<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Michael翔</title>
  
  <subtitle>因上努力，果上随缘！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://michael728.github.io/"/>
  <updated>2021-06-20T15:45:44.497Z</updated>
  <id>https://michael728.github.io/</id>
  
  <author>
    <name>Michael翔</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>小米电视大师 82 寸的使用心得</title>
    <link href="https://michael728.github.io/2021/06/12/digital-products-xiaomi-tv/"/>
    <id>https://michael728.github.io/2021/06/12/digital-products-xiaomi-tv/</id>
    <published>2021-06-12T21:29:08.000Z</published>
    <updated>2021-06-20T15:45:44.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/bncTZ6.png" alt="效果"></p><p>为了让已经拥有不错硬件的电视机发挥它应有的实力，</p><ul><li><strong>提高片源质量是非常关键的！</strong></li><li><strong>提高片源质量是非常关键的！</strong></li><li><strong>提高片源质量是非常关键的！</strong></li></ul><p>因此，我购入了一款国外的 TV 盒子，它拥有原生的 Google Android 框架，可以支持安装 Youtube 和 Netflix，并且，该设备是经过 Netflix 认证的，可以看 4K 高清视频。关于这款盒子的使用，可以阅读 <a href="https://michael728.github.io/2021/04/25/digital-products-tivo-tv/">Tivo Stream TV 使用笔记</a></p><p>除了购入 TV 盒子之外，近期我还购入了 群晖 920+ NAS，可玩性也很高，可以阅读 <a href="https://michael728.github.io/2021/05/30/digital-products-nas-started/">群晖 NAS 920+ 使用笔记</a>。</p><a id="more"></a><h2 id="APP"><a href="#APP" class="headerlink" title="APP"></a>APP</h2><p>言归正传，</p><h3 id="aida64"><a href="#aida64" class="headerlink" title="aida64"></a>aida64</h3><p>这个软件可以方便的查看电视机的系统信息、CPU 架构等。</p><p>下载地址：<a href="https://www.aida64.com/downloads" target="_blank" rel="noopener">aida64官网</a></p><p>我的电视是小米电视大师 82 寸液晶版本的，架构信息：</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/D7AE31.png" alt="CPU"></p><h3 id="x-plore"><a href="#x-plore" class="headerlink" title="x-plore"></a>x-plore</h3><p>x-plore 真是个神器，不仅方便浏览目录结构，还有可以访问远端服务器上的资源，例如访问家里 NAS 中的共享文件夹、访问网盘中的文件……这样，就不用拿着 U 盘拷贝文件等琐碎的操作。</p><p>下载地址：<a href="https://x-plore-file-manager.cn.uptodown.com/android" target="_blank" rel="noopener">X-plore File Manager</a></p><p>如果安装的 apk 在远端服务器上，直接安装时，它会先复制到电视机上的临时目录中，然后开始安装。</p><p>临时文件夹目录：</p><ul><li><code>内部共享存储空间-》Android-》data-》com.lonelycatgames.Xplor-》cache-》temp</code></li></ul><h3 id="vlc"><a href="#vlc" class="headerlink" title="vlc"></a>vlc</h3><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/kfLtWR.png" alt="VLC"></p><p>对于一些新格式的视频，常见的播放器可能无法播放或者没有声音，而 VLC 这款开源播放器亲测兼容性很强！而且，功能非常丰富，各个平台都有对应客户端。通过它，可以直接播放 NAS 设备中共享的文件夹中的视频。</p><p>下载地址：<a href="https://www.videolan.org/vlc/" target="_blank" rel="noopener">VideLAN</a></p><h3 id="jellyfin"><a href="#jellyfin" class="headerlink" title="jellyfin"></a>jellyfin</h3><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/b74vkw.png" alt="Jellyfin"></p><p><a href="https://jellyfin.org/" target="_blank" rel="noopener">Jellyfin</a> 是一个开源的媒体库管理软件。我一开始是安装在 <a href="https://michael728.github.io/2021/04/25/digital-products-tivo-tv/">Tivo TV 盒子</a>上的，后来想着这个 APP 也不依赖谷歌框架，因此，直接安装在了小米电视上。亲测，可用，这样，就少了一个切换信号源的操作了。</p><p>关于它的使用，我在 <a href="https://michael728.github.io/2021/05/30/digital-products-nas-started/">群晖 NAS 920+ 使用笔记</a> 有详细的介绍。</p><p>下载地址：<a href="https://github.com/jellyfin/jellyfin-androidtv/releases/tag/v0.11.5" target="_blank" rel="noopener">jellyfin/jellyfin-androidtv</a></p><blockquote><p>目前，如果想要好看的海报墙，则在 TV 端打开 Jellyfin 客户端，如果图方便和稳定，则直接使用 TV 端的 VLC 播放器链接到 NAS 设备，然后播放视频文件。这两种方式，是目前我探索下来比较稳定、兼容性好的方案。</p></blockquote><h3 id="emby"><a href="#emby" class="headerlink" title="emby"></a>emby</h3><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/VuoHhX.png" alt="Emby"></p><p>Emby 是一个家庭媒体库软件，包含服务端和客户端。服务端用于整理电影和剧集，客户端连上服务端后就能播放这些影片。这个软件真是一款<strong>神器</strong>！类似 Jellyfin~</p><p>Emby 公益服维护了数量庞大的视频资源，但是它的获取目前比较有门槛，需要经过考试等步骤才可以。网上有热心的网友汇总了题库<a href="https://www.yuque.com/ow/emby/ganwxl" target="_blank" rel="noopener">语雀/Emby</a>。</p><p>关于它的资料，可以阅读 </p><ul><li><a href="https://embywiki.911997.xyz/" target="_blank" rel="noopener">Emby 公益服</a></li><li><a href="https://www.youtube.com/watch?v=NjUQWgN_hKg" target="_blank" rel="noopener">油管 Bigdongdong/上万部电影和剧集免费来看！完全免费的EMBY公益媒体库分享</a></li></ul><p>客户端下载：<a href="https://embywiki.911997.xyz/use-on-various-devices/use-on-android-tv/using-official-client-on-android-tv.html" target="_blank" rel="noopener">Emby 公益服</a></p><h3 id="kodi"><a href="#kodi" class="headerlink" title="kodi"></a>kodi</h3><p>下载地址：<a href="https://kodi.tv/download/android" target="_blank" rel="noopener">kodi</a></p><h3 id="软件下载地址"><a href="#软件下载地址" class="headerlink" title="软件下载地址"></a>软件下载地址</h3><ul><li><a href="https://www.apkmirror.com/" target="_blank" rel="noopener">apkmirror</a></li><li><a href="https://en.aptoide.com/" target="_blank" rel="noopener">aptoide</a></li><li><a href="https://apkpure.com/cn/" target="_blank" rel="noopener">apkpure</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://gitee.com/michael_xiang/images/raw/master/uPic/bncTZ6.png&quot; alt=&quot;效果&quot;&gt;&lt;/p&gt;
&lt;p&gt;为了让已经拥有不错硬件的电视机发挥它应有的实力，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;提高片源质量是非常关键的！&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提高片源质量是非常关键的！&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提高片源质量是非常关键的！&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，我购入了一款国外的 TV 盒子，它拥有原生的 Google Android 框架，可以支持安装 Youtube 和 Netflix，并且，该设备是经过 Netflix 认证的，可以看 4K 高清视频。关于这款盒子的使用，可以阅读 &lt;a href=&quot;https://michael728.github.io/2021/04/25/digital-products-tivo-tv/&quot;&gt;Tivo Stream TV 使用笔记&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;除了购入 TV 盒子之外，近期我还购入了 群晖 920+ NAS，可玩性也很高，可以阅读 &lt;a href=&quot;https://michael728.github.io/2021/05/30/digital-products-nas-started/&quot;&gt;群晖 NAS 920+ 使用笔记&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="数码" scheme="https://michael728.github.io/categories/%E6%95%B0%E7%A0%81/"/>
    
    
      <category term="APP" scheme="https://michael728.github.io/tags/APP/"/>
    
      <category term="数码" scheme="https://michael728.github.io/tags/%E6%95%B0%E7%A0%81/"/>
    
      <category term="多媒体" scheme="https://michael728.github.io/tags/%E5%A4%9A%E5%AA%92%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>群晖 NAS 920+ 使用笔记</title>
    <link href="https://michael728.github.io/2021/05/30/digital-products-nas-started/"/>
    <id>https://michael728.github.io/2021/05/30/digital-products-nas-started/</id>
    <published>2021-05-30T21:29:08.000Z</published>
    <updated>2021-06-20T15:45:44.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/5ihVj4.png" alt="NAS"></p><p>很早之前就听说过 NAS 设备，但是苦于一直在租房的状态（其实是穷），一直没有入手。今年终于搬到新家了，加上近期老婆抱怨手机存储空间不够，已经塞满了吉宝的照片和视频了，因此，终于狠心剁手了一台群晖 920+ 的 NAS 设备。</p><p>本文主要就是围绕 NAS 到手后，我进行了哪些设置以及安装哪些好玩的套件。</p><a id="more"></a><h2 id="DS-video"><a href="#DS-video" class="headerlink" title="DS video"></a>DS video</h2><p>群晖安装套件：Video Station<br>电视盒子、手机安装：DS Video</p><p>通过在 NAS 上安装好套件、添加好资源之后，可以在其他设备上安装 DS Video 来进行观看。会有视频的海报墙，比直接看文件夹或者视频文件更美观和直观。</p><p>经过测试发现，对于 DTS、EAC3 格式的视频，群晖的这个 DS Video 播放就没有声音了。只能在电视盒子安装一个 VLC 播放器，这样，DS Video 不支持的视频资源可以选择用第三方播放器打开。</p><blockquote><p>网上有各种解决方案，比如 <a href="https://post.smzdm.com/p/az5e3nep/" target="_blank" rel="noopener">群晖 Video Station 支持 DTS 和 eac3 解决方案</a>，但是在我群晖 920+ 上都没好使。</p></blockquote><p>经过周末的折腾，利用 Jellyfin 搭建了家庭媒体服务中心，然后其他平台也都有 Jellyfin 的客户端，使用下来，效果也还可以，非常值得推荐！</p><p>参考：</p><ul><li><a href="https://woodenrobot.me/2019/08/12/syn-vediostation/" target="_blank" rel="noopener">群晖 Video Station 支持 DTS 和 eac3 解决方案</a></li></ul><h2 id="kodi"><a href="#kodi" class="headerlink" title="kodi"></a>kodi</h2><p><a href="https://kodi.tv/" target="_blank" rel="noopener">kodi</a> 就是个功能强大的播放器客户端，关于它的教程非常丰富，可玩性也非常高。由于我一开始是将 kodi 安装在电视盒子上，电视盒子性能不是很好，因此，kodi 播放一些视频时，卡顿感比较明显。</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/le7QDp.png" alt="kodi"></p><p>使用视频：</p><ul><li><a href="https://www.bilibili.com/video/BV1R4411A7xi" target="_blank" rel="noopener">B 站司波图/手把手教你组建家庭影院！（KODI+群晖+智能电视）</a></li></ul><h3 id="解决播放视频没有声音"><a href="#解决播放视频没有声音" class="headerlink" title="解决播放视频没有声音"></a>解决播放视频没有声音</h3><p>需要在设置-》系统-》音频里，勾选开启一些音频方面设置项的兼容性设置。设置要点：</p><ul><li>系统-音频-声道数：2.0</li><li>系统-音频-允许直通输出</li><li>系统-音频-启用杜比数字（AC3）兼容功放</li><li>系统-音频-启用杜比数字（AC3）编码转换</li></ul><p>参考：</p><ul><li><a href="https://forums.whirlpool.net.au/archive/2575344" target="_blank" rel="noopener">Would appreciate any insight into dealing with AAC 5.1 audio</a></li><li><a href="https://blog.csdn.net/weixin_28785509/article/details/112413648" target="_blank" rel="noopener">CSDN/安卓dts音频解码_【日常折腾】KODI的AC3音频转码设置</a></li></ul><h3 id="主菜单的添加与删除"><a href="#主菜单的添加与删除" class="headerlink" title="主菜单的添加与删除"></a>主菜单的添加与删除</h3><p>在设置/皮肤设置/主菜单选项中，可以开启剧集、电影等菜单项。</p><p>参考：</p><ul><li><a href="http://www.kodiplayer.cn/course/2951.html" target="_blank" rel="noopener">Kodi主菜单功能介绍 主菜单如何添加删除</a></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.themoviedb.org/" target="_blank" rel="noopener">KODI 中文网</a> 这个网站提供了很多关于 kodi 的教程</li></ul><h2 id="Transmission-安装与汉化"><a href="#Transmission-安装与汉化" class="headerlink" title="Transmission 安装与汉化"></a>Transmission 安装与汉化</h2><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/dhA0Nr.png" alt="Transmission"></p><p><a href="https://transmissionbt.com/about/" target="_blank" rel="noopener">Transmission</a> 是一个开源的下载软件，可以用来下载 PT 站的资源。记得在大学时期使用六维空间时，经常为了做种需要将笔记本一直打开着。现在只需要在 NAS 中安装好这个 APP， 则可以使用 NAS 24 小时挂在后台进行资源的下载和上传。</p><h3 id="安装-TR"><a href="#安装-TR" class="headerlink" title="安装 TR"></a>安装 TR</h3><p>在套件中心添加套件源 <code>http://packages.synocommunity.com</code>：</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/wLH56L.png" alt="synocommunity"></p><p>常规中设置信任：</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/iCVvS7.png" alt="iCVvS7"></p><p>在社群中搜索 Transmission，按照提示安装，安装好之后的访问地址：</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/dxOVgz.png" alt="dxOVgz"></p><h3 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h3><p>汉化的安装，可以阅读 <a href="https://github.com/ronggang/transmission-web-control/wiki/Linux-Installation-CN" target="_blank" rel="noopener">ronggang/transmission-web-control</a>。以下简要介绍：</p><p>在群晖控制中心，开启 NAS SSH 登录的功能：</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/KXmeOu.png" alt="SSH"></p><p>然后在终端命令行窗口即可登录 NAS：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 登录账号名和 IP 得换成你自己的</span><br><span class="line">ssh 用户名@IP</span><br><span class="line"># 切换为 root，密码和你 admin 账户密码一样</span><br><span class="line">sudo -i</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/p1XRb4.png" alt="p1XRb4"></p><p>注意：</p><ul><li>如果想要在下载时指定目录，需要对应目录需要添加群组： <code>sc-transmission</code>、<code>sc-download</code></li></ul><p>添加常用下载目录：<br><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/eBEGuV.png" alt="eBEGuV"></p><h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.colinjiang.com/archives/synology-install-transmission.html" target="_blank" rel="noopener">君子不器/群晖安装Transmission</a></li><li><a href="https://www.moewah.com/archives/2420.html" target="_blank" rel="noopener">喵斯基俱乐部/群晖NAS安装及美化Transmission(PT)教程</a></li><li><a href="https://zhongce.sina.com.cn/article/view/80527/" target="_blank" rel="noopener">新浪众测/最强下载工具，玩转NAS影音竟然如此简单！</a> 介绍了 Tr/万物下载、Plex/Kodi Jellfin</li></ul><h2 id="Jellyfin-媒体中心"><a href="#Jellyfin-媒体中心" class="headerlink" title="Jellyfin 媒体中心"></a>Jellyfin 媒体中心</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li>Jellyfin 支持硬件转码，在使用硬件转码推流的时候可以大幅降低 CPU 占用率，支持<strong>实时转码</strong>。硬件转码功能在 emby 和 plex 都是付费功能。</li><li>Jellyfin 是在它的服务器上搭建影音资料库，这样，在任何客户端来访问资料库时，就不用再建立资料库。Kodi 在不同设备上需要重新建立存储在该设备上的资料库。观看的记录会保存在 Jellyfin 服务端，这样，在各个平台切换观看时，使用同一账户就可以方便继续观看了。</li></ul><p>Kodi 播放方式类似电脑上的播放器播放。直接从共享文件夹读取文件流，而非播放视频流。Kodi 的这种方式，占用的网络资源则由具体的文件的码率决定。由于解码由播放设备进行，所以实际效果取决于设备的解码能力。如果播放设备解码能力弱，直接播放视频文件，有时候就会造成卡顿或无法播放。而 Jellyfin 的这种方式，可以理解为你自己在 NAS 上搭建了一个多媒体服务器，它可以进行视频的解码，客户端播放能够流畅很多。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>通过打开 Docker 套件，在其中的注册表中搜索 <code>jellyfin</code> 镜像（映像）进行下载。</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/9BNRO6.png" alt="9BNRO6"></p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/muC3tc.png" alt="muC3tc"></p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/35K25i.png" alt="35K25i"></p><p>进入 jellyfin 服务器地址（NAS IP:8096），即可访问。</p><p>需要进行一些设置。可以参考 <a href="https://post.smzdm.com/p/a6lnxg3g/" target="_blank" rel="noopener">SMZDM阿文菌/使用群晖Docker 安装Jellyfin 家庭影院HTPC 比emby plex好用多了</a>:</p><ul><li>国家选项里没有 China，而是要选择 Peoples’s Republic of China</li><li>选择备用字体文件路径：控制台》播放》选择备用字体文件路径，提前在 <code>config</code> 下创建好 <code>font</code> 文件夹（可以自定义文件夹名），在其中放好下载的<a href="https://github-repository-files.githubusercontent.com/164221924/4434292?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210606%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20210606T051418Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=56e41c40dd848673c66029e026ab94ed4ad7c566afcd2ed692c27ca7074bde28&amp;X-Amz-SignedHeaders=host&amp;actor_id=8510410&amp;key_id=0&amp;repo_id=164221924&amp;response-content-disposition=attachment%3Bfilename%3Dnoto.zip&amp;response-content-type=application%2Fx-zip-compressed" target="_blank" rel="noopener">字体 noto.zip</a>。这个主要为了解决 <code>ASS/SSA</code> 中文字幕会显示方块乱码。</li></ul><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/meK4M9.png" alt="meK4M9"></p><p>安装的步骤，<a href="https://jellyfin.org/docs/general/administration/hardware-acceleration.html" target="_blank" rel="noopener">Jellyfin 官网</a>可以看做是如下命令的等同：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run --name=jellyfin2 \</span><br><span class="line">--device=/dev/dri:/dev/dri  \</span><br><span class="line">--device=/dev/dri/card0:/dev/dri/card0 \</span><br><span class="line">-p 8096:8096 \</span><br><span class="line">-v /volume1/docker/jellyfin/config:/config \</span><br><span class="line">-v /volume1/docker/jellyfin/cache:/cache \</span><br><span class="line">-v /volume1/video:/media \</span><br><span class="line">jellyfin/jellyfin:latest</span><br></pre></td></tr></table></figure></p><blockquote><p>之所以映射设备，是为了开启硬件加速</p></blockquote><h3 id="添加媒体库"><a href="#添加媒体库" class="headerlink" title="添加媒体库"></a>添加媒体库</h3><p>添加媒体库的步骤很简单，注意勾选：</p><ul><li>将媒体图像保存到媒体所在文件夹：方便将下载的资源归档到视频文件夹中</li></ul><h3 id="插键"><a href="#插键" class="headerlink" title="插键"></a>插键</h3><h4 id="字幕插键-Open-Subtitles"><a href="#字幕插键-Open-Subtitles" class="headerlink" title="字幕插键 Open Subtitles"></a>字幕插键 Open Subtitles</h4><p>安装 <code>Open Subtitles</code> 插件，这样的话，可以使用字幕下载的功能。使用该插件</p><p>安装好插键之后，需要重启容器。</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/ry2JoO.png" alt="重启容器"></p><p>需要去 <a href="https://www.opensubtitles.org/zh" target="_blank" rel="noopener">opensubtitles</a> 注册账号，有了账号，需要去点击该插键进行配置。</p><p>参考：</p><ul><li><a href="http://www.92nas.com/forum.php?mod=viewthread&amp;tid=147" target="_blank" rel="noopener">92Nas/Jellyfin中电影外挂ass格式字幕无法显示的解决方法</a></li><li><a href="https://github.com/jellyfin/jellyfin-web/issues/934" target="_blank" rel="noopener">All the Chinese plug-in subtitles in ASS format</a> 中的解决方案进行配置</li></ul><h3 id="播放"><a href="#播放" class="headerlink" title="播放"></a>播放</h3><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/jr7IZR.png" alt="播放数据"></p><p>查看播放数据：</p><ul><li>播放信息：会显示播放方式，可以看出是转码播放还是直接播放的</li><li>媒体源信息：表示播放的视频源的信息，可以看到码率、音频编码</li><li>比特率：码率，视频文件 原本的码率，如果原本码率比较高，我们通过播放时设置低码率，那么，就会被自动转码</li><li>转码信息：看到这个表示正在进行硬件转码，方便播放设备播放。可以看到，源文件的音频是 <code>EAC3</code>，播放时被自动转码成 <code>AAC</code> 了。</li></ul><h3 id="硬件加速"><a href="#硬件加速" class="headerlink" title="硬件加速"></a>硬件加速</h3><p>通过如下的设置开启硬件加速：</p><ul><li>开启转码：控制台》播放，选择硬件加速<code>Video Acceleration API(VAAPI)</code></li></ul><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/5pEBal.png" alt="5pEBal"></p><blockquote><p>注意，上面能够成功开启的前提是，勾选了「使用高权限执行容器」</p></blockquote><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/Yrvjxu.png" alt="Yrvjxu"></p><p>通过 SSH 登录后台，<code>htop</code> 命令查看 CPU 占用率高的进程（jellyfin），查看是否开启验证加速：</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/RhkpfW.png" alt="RhkpfW"></p><p>此外，在 NAS 查看资源监控，播放视频时，CPU 如果没有飙升，一般也是开启硬件加速的效果。</p><p>参考：</p><ul><li><a href="https://post.smzdm.com/p/a259mgk2/p3/#comments" target="_blank" rel="noopener">分享一种简单得不能再简单的群晖DS918+下Jellyfin调用核显硬解的办法</a></li></ul><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>Jellyfin 的 APP 死机概率非常高，没有网页版本好用。可以使用手机浏览器直接访问网页。利用 Chrome 访问 Jellyfin 的地址，然后在浏览器页面的右上角的菜单项中，点击「添加到主屏幕」，这样即可在手机桌面创建快捷方式。</p><blockquote><p>我的手机进行了权限管理，需要放开 Chrome 创建快捷方式的权限。</p></blockquote><h4 id="TV-端设置"><a href="#TV-端设置" class="headerlink" title="TV 端设置"></a>TV 端设置</h4><p><a href="https://jellyfin.org/clients/" target="_blank" rel="noopener">Jellyfin/Clients</a> 官网有提供客户端的下载，其中，有<a href="https://github.com/jellyfin/jellyfin-androidtv/releases/tag/v0.11.5" target="_blank" rel="noopener">安卓 TV 的客户端</a>。</p><p>此外，也可以利用 kodi 来访问 Jellyfin 媒体中心。具体的使用方式，可以阅读 <a href="https://jellyfin.org/docs/general/clients/kodi.html" target="_blank" rel="noopener">kodi</a> ，简要步骤如下：</p><ul><li>添加 jellyfin 源：进入插键菜单，插键浏览器，选择从 zip 文件安装，浏览服务器中已经下载好的压缩包</li><li>从库安装 jellyfin 插键</li><li>为了避免之前 kodi 中添加的媒体资源重复，可以使用使用 jellyfin 插键中的重置本地数据库的功能</li></ul><blockquote><p>利用 kodi + jellyfin 插键的方式播放资源，不会对视频进行转码，这可能就会导致播放高质量视频时会有卡顿。</p></blockquote><p>具体的设置，可以阅读：</p><ul><li><a href="https://www.bilibili.com/video/BV1AE411k7hr" target="_blank" rel="noopener">B站司波图/Jellyfin的外网访问姿势，如何通过安卓，IOS，电视访问Jellyfin服务器</a></li><li><a href="https://post.smzdm.com/p/a99vlpmp/" target="_blank" rel="noopener">SMZDM/安卓TV端Kodi部署Jellyfin，使用Jellyfin打造最强媒体中心（篇二）</a></li></ul><h3 id="其他资源"><a href="#其他资源" class="headerlink" title="其他资源"></a>其他资源</h3><ul><li>字幕网站：<ul><li><a href="https://www.opensubtitles.org/zh" target="_blank" rel="noopener">opensubtitles</a></li><li><a href="https://www.a4k.net/" target="_blank" rel="noopener">a4k</a></li><li><a href="https://subhd.tv" target="_blank" rel="noopener">subhd</a></li></ul></li></ul><h3 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.moewah.com/archives/1552.html" target="_blank" rel="noopener">喵斯基部落/群晖Docker安装Jellyfin媒体服务器</a> 利用 Docker 部署 jellyfin 服务</li><li><a href="https://post.smzdm.com/p/a6lnxg3g/" target="_blank" rel="noopener">SMZDM/使用群晖Docker 安装Jellyfin 家庭影院HTPC 比emby plex好用多了</a></li><li><a href="https://www.bilibili.com/video/BV1ME411o7H2" target="_blank" rel="noopener">B站司波图/免费开源影音服务器Jellyfin部署全攻略，含群晖，OMV系统下Docker安装并启动硬件转码</a></li></ul><h2 id="电影刮削器-TinyMediaManager"><a href="#电影刮削器-TinyMediaManager" class="headerlink" title="电影刮削器 TinyMediaManager"></a>电影刮削器 TinyMediaManager</h2><h3 id="参考-3"><a href="#参考-3" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://www.92nas.com/forum.php?mod=viewthread&amp;tid=98" target="_blank" rel="noopener">92NAS/群晖Docker里安装电影剧集刮削器TinyMediaManager</a></li><li><a href="http://www.kodiplayer.cn/course/2945.html" target="_blank" rel="noopener">KODI中文网/抛弃Kodi难用的刮削器 tinyMediaManager(TMM)刮削电影信息更方便</a></li></ul><h2 id="PT"><a href="#PT" class="headerlink" title="PT"></a>PT</h2><h3 id="下载客户端"><a href="#下载客户端" class="headerlink" title="下载客户端"></a>下载客户端</h3><ul><li><a href="https://transmissionbt.com/" target="_blank" rel="noopener">Transmission</a> Linux/MacOS</li><li><a href="https://www.utorrent.com/downloads/mac" target="_blank" rel="noopener">uTorrent</a></li><li><a href="http://www.vuze.com/download.php" target="_blank" rel="noopener">Azureus</a></li></ul><h3 id="m-team"><a href="#m-team" class="headerlink" title="m-team"></a>m-team</h3><p>馒头，通过捐赠即可获得账号+1 个月的 VIP：</p><ul><li><a href="https://wiki.m-team.cc/index.php?title=%E5%B8%B3%E8%99%9F%E4%BF%9D%E7%95%99%E8%A6%8F%E5%89%87_(Account_Parking_,_Keeping_Rules" target="_blank" rel="noopener">账号保留规则</a>)</li><li><a href="https://pt.m-team.cc/pay.php" target="_blank" rel="noopener">m-team 馒头捐赠页面</a></li><li><a href="https://kp.m-team.cc/index.p" target="_blank" rel="noopener">登录地址</a></li><li><a href="https://bbs.m-team.cc/" target="_blank" rel="noopener">M-Team 外站</a></li></ul><h2 id="NAS-教程"><a href="#NAS-教程" class="headerlink" title="NAS 教程"></a>NAS 教程</h2><ul><li><a href="https://www.huakings.cn/category/nas/8/" target="_blank" rel="noopener">花王群晖教程</a> 该</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://gitee.com/michael_xiang/images/raw/master/uPic/5ihVj4.png&quot; alt=&quot;NAS&quot;&gt;&lt;/p&gt;
&lt;p&gt;很早之前就听说过 NAS 设备，但是苦于一直在租房的状态（其实是穷），一直没有入手。今年终于搬到新家了，加上近期老婆抱怨手机存储空间不够，已经塞满了吉宝的照片和视频了，因此，终于狠心剁手了一台群晖 920+ 的 NAS 设备。&lt;/p&gt;
&lt;p&gt;本文主要就是围绕 NAS 到手后，我进行了哪些设置以及安装哪些好玩的套件。&lt;/p&gt;
    
    </summary>
    
      <category term="数码" scheme="https://michael728.github.io/categories/%E6%95%B0%E7%A0%81/"/>
    
    
      <category term="数码" scheme="https://michael728.github.io/tags/%E6%95%B0%E7%A0%81/"/>
    
      <category term="多媒体" scheme="https://michael728.github.io/tags/%E5%A4%9A%E5%AA%92%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>sdkman 来管理多 JDK 版本的环境</title>
    <link href="https://michael728.github.io/2021/05/18/tools-dev-sdkman/"/>
    <id>https://michael728.github.io/2021/05/18/tools-dev-sdkman/</id>
    <published>2021-05-18T23:21:24.000Z</published>
    <updated>2021-06-20T15:45:44.505Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/cIj20k.png" alt="sdkman"></p><p>[sdkman 官网]是这么介绍它的：</p><blockquote><p>SDKMAN! is a tool for managing parallel versions of multiple Software Development Kits on most Unix based systems.</p></blockquote><p>sdkman 是一个用来管理大多数类 Unix 系统（例如 Mac OSX、Linux、Cygwin等） SDK 多版本的。例如，现在个人机器上主要还是使用 JDK8 的版本，但是，突然有个项目（比如新版 Elasticsearch 7.10）需要更高版本的 JDK 版本，这时候怎么方便管理你机器上的 JDK 环境呢？</p><p>看完下文的操作，你就会用 sdkman 来灵活切换你 SDK 的版本，真的方便！</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>安装 sdkman：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s &quot;https://get.sdkman.io&quot; | bash</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>打开新的终端窗口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source &quot;$HOME/.sdkman/bin/sdkman-init.sh&quot;</span><br></pre></td></tr></table></figure></p><p>验证安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sdk version</span><br></pre></td></tr></table></figure></p><p>sdkman 支持多达大约 29 个软件开发包管理，我们也可以使用  命令来查看支持的完整列表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sdk list</span><br></pre></td></tr></table></figure></p><p>这个内容比较多，可以使用例如 <code>sdk list java</code> 列出我感兴趣的 <code>candidate</code> 版本。</p><p>管理本地已经安装的 JDK 版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sdk install java 1.8.0_231 /Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home</span><br></pre></td></tr></table></figure></p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/tc4ZC6.png" alt="local"></p><blockquote><p>其实就是在 <code>/Users/michael/.sdkman/candidates/java</code> 路径下，创建一个软连接 <code>1.8.0_231</code> 指向了机器原本的 JDK 安装目录</p></blockquote><p>安装指定的版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sdk install java 16.0.0.hs-adpt</span><br></pre></td></tr></table></figure></p><p>临时使用指定版本（关闭终端之后失效）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sdk use java 1.8.0_231</span><br></pre></td></tr></table></figure></p><p>设置默认版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sdk default java 1.8.0_231</span><br></pre></td></tr></table></figure></p><p>查看当前使用的版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查看 java 当前版本</span><br><span class="line">sdk current java</span><br><span class="line"># 查看所有版本</span><br><span class="line">sdk current</span><br></pre></td></tr></table></figure></p><p>卸载指定版本的包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sdk uninstall java 16.0.0.hs-adpt</span><br></pre></td></tr></table></figure></p><blockquote><p>如果卸载之后想再次安装之前通过 sdkman 卸载的版本，此时不会再次重新下载，会提示 <code>Found a previously downloaded java 11.0.7.hs-adpt archive. Not downloading it again...</code>，因为之前删除操作并没有真正的从你计算机上删除源压缩包文件</p></blockquote><p>清理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 清理广播消息</span><br><span class="line">sdk flush broadcast</span><br><span class="line"># 清理下载的 sdk 二进制文件</span><br><span class="line">sdk flush archives</span><br><span class="line"># 清理临时文件内容</span><br><span class="line">sdk flush temp</span><br></pre></td></tr></table></figure></p><p>升级 sdkman<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sdk selfupdate</span><br></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://sdkman.io/usage#installspecific" target="_blank" rel="noopener">sdkman/Usage</a></li><li><a href="https://segmentfault.com/a/1190000022666856" target="_blank" rel="noopener">segmentfault/如何在一台计算机上安装多个 JDK 版本</a></li><li><a href="https://segmentfault.com/a/1190000021037771?utm_source=sf-similar-article" target="_blank" rel="noopener">segmentfault/Java升级那么快，多个版本如何灵活切换和管理？</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://gitee.com/michael_xiang/images/raw/master/uPic/cIj20k.png&quot; alt=&quot;sdkman&quot;&gt;&lt;/p&gt;
&lt;p&gt;[sdkman 官网]是这么介绍它的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SDKMAN! is a tool for managing parallel versions of multiple Software Development Kits on most Unix based systems.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;sdkman 是一个用来管理大多数类 Unix 系统（例如 Mac OSX、Linux、Cygwin等） SDK 多版本的。例如，现在个人机器上主要还是使用 JDK8 的版本，但是，突然有个项目（比如新版 Elasticsearch 7.10）需要更高版本的 JDK 版本，这时候怎么方便管理你机器上的 JDK 环境呢？&lt;/p&gt;
&lt;p&gt;看完下文的操作，你就会用 sdkman 来灵活切换你 SDK 的版本，真的方便！&lt;/p&gt;
&lt;h2 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h2&gt;&lt;p&gt;安装 sdkman：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -s &amp;quot;https://get.sdkman.io&amp;quot; | bash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ToolsDev" scheme="https://michael728.github.io/categories/ToolsDev/"/>
    
    
      <category term="开发环境" scheme="https://michael728.github.io/tags/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
      <category term="JDK" scheme="https://michael728.github.io/tags/JDK/"/>
    
  </entry>
  
  <entry>
    <title>基于 IDEA 针对 Elasticsearch 7.10 源码 Debug</title>
    <link href="https://michael728.github.io/2021/05/17/es-code-debug/"/>
    <id>https://michael728.github.io/2021/05/17/es-code-debug/</id>
    <published>2021-05-17T23:09:45.000Z</published>
    <updated>2021-06-20T15:45:44.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h2><p>ES 仓库地址：<a href="https://github.com/elastic/elasticsearch" target="_blank" rel="noopener">https://github.com/elastic/elasticsearch</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:elastic/elasticsearch.git</span><br><span class="line">git checkout 7.10</span><br></pre></td></tr></table></figure><p>看到其他人的经验，建议 fork 一下仓库，这样，在对源码进行阅读时，可以将注释等笔记，快速提交到自己的仓库中。</p><h2 id="本机环境"><a href="#本机环境" class="headerlink" title="本机环境"></a>本机环境</h2><p>ES 运行和编译所需要的 JDK 版本是需要分开讨论的。</p><ul><li>运行：只需要 Java 8 及以上版本即可</li><li>编译：如果是编译源码，对 JDK 的版本要求又高一点。一般在源码根目录下的 <code>CONTRIBUTING.md</code> 文件会有对于编译某个版本的 ES 需要的 JDK 的版本要求</li></ul><p>在 <a href="https://github.com/Michael728/elasticsearch/blob/7.10/CONTRIBUTING.md#contributing-to-the-elasticsearch-codebase" target="_blank" rel="noopener">ES 7.10 分支上</a>，是有如下的描述：</p><blockquote><p>JDK 14 is required to build Elasticsearch. You must have a JDK 14 installation with the environment variable JAVA_HOME referencing the path to Java home for your JDK 14 installation. By default, tests use the same runtime as JAVA_HOME. However, since Elasticsearch supports JDK 8, the build supports compiling with JDK 14 and testing on a JDK 8 runtime; to do this, set RUNTIME_JAVA_HOME pointing to the Java home of a JDK 8 installation. Note that this mechanism can be used to test against other JDKs as well, this is not only limited to JDK 8.</p></blockquote><p>简言之，ES 7.10 版本的编译需要 JDK 14 版本，必须有一个环境变量 <code>JAVA_HOME</code> 指向 JDK 14 的安装目录。默认情况，测试使用同样的 <code>JAVA_HOME</code>。同时，因为 ES 支持 JDK 8，构建支持用 JDK 14 编译，使用 JDK 8 测试。只需要设置一个 <code>RUNTIME_JAVA_HOME</code>  指向 JDK 8 的安装目录就行。</p><p><a href="https://sdkman.io/install" target="_blank" rel="noopener">sdkman</a> 管理不同的 JDK 版本，可以同时有多个 JDK 版本存在一台主机随时切换使用。</p><ul><li>jdk 的最低版本，在项目中的 <a href="https://github.com/Michael728/elasticsearch/tree/7.10/buildSrc/src/main/resources" target="_blank" rel="noopener">buildSrc/src/main/resources/minimumCompilerVersion</a> 文件中可以看到 <code>14</code>，用命令 <code>sdk install java 14.0.2.hs-adpt</code> 安装 JDK 14。此外，JDK 可以在<a href="https://mirrors.huaweicloud.com/openjdk/14/" target="_blank" rel="noopener">华为云镜像站</a>下载，速度比较块快</li><li>gradle 的最低版本，可以在项目的 <a href="https://github.com/Michael728/elasticsearch/blob/7.10/buildSrc/src/main/resources/minimumCompilerVersion" target="_blank" rel="noopener">buildSrc/src/main/resources/minimumGradleVersion</a> 文件下看到 <code>6.6.1</code></li></ul><h2 id="源码编译，导入-IDEA"><a href="#源码编译，导入-IDEA" class="headerlink" title="源码编译，导入 IDEA"></a>源码编译，导入 IDEA</h2><blockquote><p>一些文章比较久，依然让进入 ES 项目的根目录，运行如下命令 <code>./gradlew idea</code>，这个命令是为了配置 ES project 可以在 IDEA 中使用。目前，在 ES 7.10 版本的 <a href="https://github.com/elastic/elasticsearch/blob/7.10/CONTRIBUTING.md#importing-the-project-into-intellij-idea" target="_blank" rel="noopener">CONTRIBUTING.md#importing-the-project-into-intellij-idea</a> 中，已经略过了该步骤，可能是目前新版的 IDEA 已经自动支持了，不需要上面的步骤。</p></blockquote><ul><li>选择 <code>File &gt; Open</code></li><li>在对话框中选择根目录下的 <code>build.gradle</code> 文件</li><li>在对话框中选择 <code>Open as Project</code></li></ul><p>设置 <code>Project SDK</code> 为：JDK 14，这个步骤同时也会将 <code>Gradle JVM</code> 也设为 14。</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/RdBgz6.png" alt="Project SDK"></p><blockquote><p>如果本机网络环境不好，使用默认的 maven 源，速度可能比较慢，可以参考 <a href="https://zhuanlan.zhihu.com/p/188725714" target="_blank" rel="noopener">知乎/ElasticSearch-7.8.0 源码编译调试 (详细)</a> 进行 Gradle 源等的设置。</p></blockquote><p>点击侧边栏 Gradle 的 <code>Reload All Gradle Projects</code> 按钮，或者，打开根目录下的 <code>build.gradle</code> 文件，会有 <code>Load Gradle Changes</code> 按钮。这样会进行源码的构建（编译、下载依赖包等）。</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/sqMozN.png" alt="Build"></p><p>看到上图，则表示源码构建成功。</p><blockquote><p>关于 <a href="https://www.jetbrains.com/help/idea/gradle.html" target="_blank" rel="noopener">Roload All Gradle Projects</a>，IDEA 是有相关文档介绍的。</p></blockquote><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><h3 id="远程调试"><a href="#远程调试" class="headerlink" title="远程调试"></a>远程调试</h3><p>当项目导入到 IDEA 之后，会看到有一个默认的 <code>Remote JVM Debug</code> 配置 <code>Debug Elasticsearch</code>，这个配置是无法修改的：</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/pQf2Id.png" alt="Debug"></p><p>启动的第一步骤就是先启动这个这个，点击 <code>Debug</code> 按钮就好。</p><p>接着，在项目根目录下运行如下命令，启动一个 ES 实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./gradlew :run --debug-jvm</span><br><span class="line"># 如果是 Widows 平台，则运行如下命令</span><br><span class="line">./gradlew.bat :run --debug-jvm</span><br></pre></td></tr></table></figure></p><p>ES 实例启动完毕之后，用如下命令验证：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -u elastic:password localhost:9200</span><br></pre></td></tr></table></figure></p><p>上面的 <code>-u</code> 是授权验证 <code>user</code> 的作用，如果你尝试在浏览器中直接访问 <code>localhost:9200</code>，将会弹出对话框让你输入用户名和密码。此外，如果在 Postman 中访问的话，也需要设置 <code>Authorization</code>。</p><blockquote><p>之所有会需要授权认证，是因为开启了 xpack 的认证，</p></blockquote><p>其实，除了上面的这种 Remote Debug 之外，还可以通过<a href="https://mirrors.huaweicloud.com/elasticsearch/" target="_blank" rel="noopener">华为云镜像站点</a> 下载源码对应的 ES 客户端，然后启动客户端之后，<code>attach</code> 到进程中开始调试。下面简要介绍一下步骤：</p><ul><li>调整 ES 客户端的 config 目录下的 <code>jvm.options</code> 文件，加入 JVM 的配置参数：<code>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005</code></li><li>启动 ES 客户端：<code>./elasticsearch</code>，Windows 客户端是：<code>./elasticsearch.bat</code></li><li>创建一个 Remote 的远程启动配置：</li></ul><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/VwR3OT.png" alt="Remote"></p><h3 id="源码调试"><a href="#源码调试" class="headerlink" title="源码调试"></a>源码调试</h3><p>源码调试的步骤比较繁琐，没有上面的方式方便。</p><p>提前在 <a href="https://mirrors.huaweicloud.com/elasticsearch/" target="_blank" rel="noopener">华为云镜像站点</a> 下载好源码对应版本的 ES 客户端安装包，解压好。</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/iBzX4d.png" alt="ES Client"></p><p>在 IDEA 中创建一个 Application 启动配置：</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/YApR8g.png" alt="Application"></p><p>VM options 如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-Des.path.home=/Users/michael/opt/es/elasticsearch-7.10.2</span><br><span class="line">-Des.path.conf=/Users/michael/opt/es/elasticsearch-7.10.2/config</span><br><span class="line">-Dlog4j2.disable.jmx=true</span><br><span class="line">-Xmx4g</span><br><span class="line">-Xms4g</span><br></pre></td></tr></table></figure></p><ul><li><code>Des.path.home</code> 指刚刚 ES 客户端的解压根目录</li><li><code>Des.path.conf</code> 指刚刚 ES 客户端解解压目录下的配置目录路径</li></ul><p>需要打开你 <code>Project SDK</code> 设置的 JDK 目录中 <code>conf/security/java.policy</code> 的文件，例如我本机就是 <code>/Users/michael/.sdkman/candidates/java/14.0.2.hs-adpt/conf/security/java.policy</code> 文件，在 <code>grant</code> 括号中，添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">permission java.lang.RuntimePermission &quot;createClassLoader&quot;;</span><br><span class="line">permission java.lang.RuntimePermission &quot;setContextClassLoader&quot;;</span><br></pre></td></tr></table></figure><blockquote><p>上面的设置，是为了避免遇到 <code>org.elasticsearch.bootstrap.StartupException: java.security.AccessControlException: access denied (&quot;java.lang.RuntimePermission&quot; &quot;createClassLoader&quot;)</code>、和 <code>java.security.AccessControlException: access denied (&quot;java.lang.RuntimePermission&quot; &quot;createClassLoader&quot;)</code> 的报错</p></blockquote><p>经过上面的设置，就可以通过启动主类的方式成功启动了。</p><h3 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h3><p>断点加在 <code>org/elasticsearch/rest/action/search/RestSearchAction.java</code> 137 行，执行搜索就会进入断点。</p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="JDK-16-isn’t-compatible-with-Gradle-6-6-1-Please-fix-JAVA-HOME-environment-variable"><a href="#JDK-16-isn’t-compatible-with-Gradle-6-6-1-Please-fix-JAVA-HOME-environment-variable" class="headerlink" title="JDK 16 isn’t compatible with Gradle 6.6.1, Please fix JAVA_HOME environment variable"></a>JDK 16 isn’t compatible with Gradle 6.6.1, Please fix JAVA_HOME environment variable</h3><p>这是因为 Gradle JVM 的版本与 Gradle 版本不兼容，可以在 IDEA 的 <code>Build Tools</code> -&gt; <code>Gradle</code> 中进行设置：</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/ogkPZx.png" alt="gradle jvm"></p><blockquote><p>发现关于 JDK 的设置，当你设置了 <code>Project SDK</code>  的 JDK 版本，这里的 <code>Gradle JVM</code> 将会自动和前者保持保持一致。</p></blockquote><p>参考：</p><ul><li><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/360008588420-Found-Invalid-Gradle-JVM-configuration" target="_blank" rel="noopener">Found Invalid Gradle JVM configuration</a></li></ul><h3 id="unsupported-class-file-major-version-60"><a href="#unsupported-class-file-major-version-60" class="headerlink" title="unsupported class file major version 60"></a>unsupported class file major version 60</h3><p>解决这个问题，还是采用上面描述的方法，设置正确 <code>Gradle JVM</code>  版本。</p><ul><li><a href="https://stackoverflow.com/questions/67079327/how-to-fix-unsupported-class-file-major-version-60-in-intellij" target="_blank" rel="noopener">Stackoverflow/How to fix “unsupported class file major version 60” in IntelliJ?</a></li></ul><h3 id="gradle-出现-Connection-refused-Connection-refused-问题"><a href="#gradle-出现-Connection-refused-Connection-refused-问题" class="headerlink" title="gradle 出现 Connection refused (Connection refused) 问题"></a>gradle 出现 Connection refused (Connection refused) 问题</h3><p>与网络有问题，检查 Proxy 是否联通，总之，要保证下载依赖的网络畅通。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/188725714" target="_blank" rel="noopener">知乎/ElasticSearch-7.8.0 源码编译调试 (详细)</a> 推荐</li><li><a href="https://icbd.github.io/IntelliJ-debug-elasticsearch-source-code/" target="_blank" rel="noopener">CBD Blog/IntelliJ debug elasticsearch 7.10 source code</a></li><li><a href="https://segmentfault.com/a/1190000023647742" target="_blank" rel="noopener">segmentfault/讲得最明白的Elasticsearch源码调试环境搭建教程</a> ES 7.1.0 版本的笔记</li><li><a href="https://juejin.cn/post/6844903663807234061" target="_blank" rel="noopener">小旋锋/教你编译调试Elasticsearch 6.3.2源码</a></li><li><a href="https://lanffy.github.io/2019/04/08/Elasticsearch-Compile-Source-And-Debug" target="_blank" rel="noopener">lanffy/ElasticSearch源码解读一：源码编译和Debug环境搭建</a> ES 6.7.0 的版本，该博主围绕 ES 写了不少总结</li><li><a href="https://elasticsearch.cn/question/8243" target="_blank" rel="noopener">idea源码调试的问题/java.lang.NoClassDefFoundError: org/elasticsearch/plugins/ExtendedPluginsClassLoader</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;源码下载&quot;&gt;&lt;a href=&quot;#源码下载&quot; class=&quot;headerlink&quot; title=&quot;源码下载&quot;&gt;&lt;/a&gt;源码下载&lt;/h2&gt;&lt;p&gt;ES 仓库地址：&lt;a href=&quot;https://github.com/elastic/elasticsearch&quot; tar
      
    
    </summary>
    
      <category term="ELK" scheme="https://michael728.github.io/categories/ELK/"/>
    
    
      <category term="DevOps" scheme="https://michael728.github.io/tags/DevOps/"/>
    
      <category term="Jenkins" scheme="https://michael728.github.io/tags/Jenkins/"/>
    
      <category term="CICD" scheme="https://michael728.github.io/tags/CICD/"/>
    
  </entry>
  
  <entry>
    <title>Tivo Stream TV 使用笔记</title>
    <link href="https://michael728.github.io/2021/04/25/digital-products-tivo-tv/"/>
    <id>https://michael728.github.io/2021/04/25/digital-products-tivo-tv/</id>
    <published>2021-04-25T21:29:08.000Z</published>
    <updated>2021-06-20T15:45:44.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>搬到新家之后，陆续购入了若干大件电器，其中，电视机作为家庭客厅的一个重要输出终端设备，经过综合比较，最后剁手了小米电视大师 82 寸 4K 的版本。同期，红米也新推出了一款 86 寸的电视。但是，硬件貌似并没有大师系列好，同时，红米的这款不支持远场语音功能，每次要呼叫小爱同学，还需要找到遥控器然后语音控制，不方便。</p><p>目前国产电视机的硬件性能其实都还 OK，个人觉得影响观看体验的重要因素反而是片源！国内「优爱腾」流媒体的质量还有待提高，2K/4K 的片源质量堪忧，甚至 1080P 的片源都不行。因为小米电视并不是 Netflix 认证的设备，是无法直接安装 Netflix 官方 APP 的。因此，决定购入一个国外的电视盒子——TiVo Stream TV 盒子，然后在它上面安装 Netflix、Youtube 等 APP 观看世界各地高质量的片源了。</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/bncTZ6.png" alt="效果"></p><p>上图就是效果图啦，美滋滋，顺带安利一部剧《纸钞屋》，西班牙剧真是给力！</p><a id="more"></a><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><p>Netflix 在未进行 DRM（即 Digital Rights Management 数字版权管理） 认证的设备上无法提供高清播放。Netflix 官方帮助教程列出了支持 HD 以及 HDR 的 安卓设备。在 <a href="https://help.netflix.com/en/node/23939/cn" target="_blank" rel="noopener">Netflix is available in HD on the Android phones below.</a> 的页面，可以查看哪些安卓平板、安卓手机设备是可以播放 Netflix 高清视频的。</p><p>在播放 Netflix 的问题上，电视盒子的标准比上面的 DRM 认证更为严格。设备必须经过 Netflix 认证才能正常安装和播放 Netflix。在<a href="https://devices.netflix.com/en/recommendedtv/2020/#tvs" target="_blank" rel="noopener">2020 Netflix Recommended TVs</a>的页面，看到了 Netflix 推荐的热门电视设备。</p><p>哪些电视盒子是 Netflix 认证的设备呢？在这个网址查询：<a href="https://www.androidtv-guide.com/streaming-gaming/netflix-amazon-atv-certified" target="_blank" rel="noopener">Both Netflix &amp; Prime Video Certified Android TV Streaming Players</a></p><h2 id="Tivo-TV-激活"><a href="#Tivo-TV-激活" class="headerlink" title="Tivo TV 激活"></a>Tivo TV 激活</h2><p>Tivo TV 设置激活：</p><ul><li><a href="https://didiboy0702.gitbook.io/wukongdaily/test/ru-he-ji-huo-tivo-stream-4k" target="_blank" rel="noopener">悟空/如何激活Tivo Stream 4K</a></li><li><a href="https://www.youtube.com/watch?v=Rxv0E3kMa4Y" target="_blank" rel="noopener">悟空/Tivo Stream 4K 电视盒子开箱加9步长测评</a></li></ul><h2 id="ADB-工具"><a href="#ADB-工具" class="headerlink" title="ADB 工具"></a>ADB 工具</h2><p>为了解决盒子时间不正确以及提示网络不能联网的问题，需要用到 ADB 工具连接盒子进行设置。</p><p>ADB 各种客户端：</p><ul><li>谷歌应用商店安装 <code>Remote ADB Shell</code>，可以通过手机来进行对 TV 盒子的设置</li><li>Windows 平台也有对应的 ADB 工具，查看 <a href="https://adbshell.com/" target="_blank" rel="noopener">ADB Shell</a>、<a href="https://drive.google.com/drive/folders/1PIT3issyC3qD_mjt9HRVJkM2qTlphXWk" target="_blank" rel="noopener">悟空分享的网盘</a></li><li>Mac：<code>brew install android-platform-tools</code></li></ul><p>下载好 ADB 工具之后，怎么连接电视盒子？</p><ul><li>查看设置，查看系统版本，连续点击「内部版本号」，开启开发者选项</li><li>在开发者选项里，打开网络调试/USB调试开关</li><li>查看电视盒子连接的 WiFi 网络，获取电视盒子的链接 IP</li><li><code>adb connect IP</code></li></ul><blockquote><p>电视盒子的ADB开关通常有以下几个名字，例如USB调试开关，远程调试开关、网络调试开关</p></blockquote><h2 id="可以正常访问奈菲，但是无法观看-youtube"><a href="#可以正常访问奈菲，但是无法观看-youtube" class="headerlink" title="可以正常访问奈菲，但是无法观看 youtube"></a>可以正常访问奈菲，但是无法观看 youtube</h2><p>看一下你的 TV 盒子的系统时间，肯定于当前时间不一致，youtube 会有时间验证，临时的解决办法是打开“设置”-“设备偏好设置”，然后找到“日期和时间”，关闭“自动确定日期和时间”，然后手动更改的时间和日期为当前的正确时间。</p><p>一劳永逸的方法是去更改时间同步服务器。</p><h3 id="修改时间服务器"><a href="#修改时间服务器" class="headerlink" title="修改时间服务器"></a>修改时间服务器</h3><ul><li><a href="https://www.bilibili.com/video/av286661109/" target="_blank" rel="noopener">安卓原生电视/盒子 出现已连接但无法访问 要怎么解决？根治请看这里！</a></li></ul><p>修复盒子时间不对的问题，因为时间不对，可能会影响证书验证：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看盒子 NTP Server</span><br><span class="line">adb shell settings get global ntp_server</span><br><span class="line"><span class="meta">#</span> 设置 NTP Server</span><br><span class="line">adb shell settings put global ntp_server ntp1.aliyun.com</span><br></pre></td></tr></table></figure></p><h2 id="此-WLAN-网络无法连接到互联网"><a href="#此-WLAN-网络无法连接到互联网" class="headerlink" title="此 WLAN 网络无法连接到互联网"></a>此 WLAN 网络无法连接到互联网</h2><p>Tivo TV 盒子弹出：您所连接的 WLAN 网络无法访问互联网。</p><p>虽然弹出上面的提示，但是实际上有些 APP 是可以正常上网的，唯独 Youtube 就无法打开，显示”现在无法联网“！</p><h3 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h3><p>谷歌从 Android 5.0 开始就引入了 <code>Captive Portal</code> 机制，主要用来检测 WiFI 网络认证是否正常，默认检测访问的是谷歌服务器（<code>gstatic.com/google.com</code>）。通过HTTP返回的状态码是否是 204 来判断是否成功，如果访问得到了 200 带网页数据，那你就可能处在一个需要登录验证才能上网的环境里，比如说校园网，再比如说一些酒店提供的客户才能免费使用的WiFi(其实是通过DNS劫持实现的)，如果连接超时(根本就连接不上)就在 WiFi 图标和信号图标上加一个标志，安卓5和6是叹号，安卓7改成一个叉了。只不过默认访问的是谷歌自家的验证服务器，然而由于你懂的原因，就算你连接上了网络也连不上这个服务器。这就是所说的 <code>generate_204</code> 的问题。</p><p>国内安卓手机系统都会修改成自家的服务器地址或者高通中国的地址，以此来实现该功能。</p><h3 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 查看当前状态：</span><br><span class="line">adb shell settings get global captive_portal_mode</span><br><span class="line"># 关闭检测：</span><br><span class="line">adb shell settings put global captive_portal_mode 0</span><br><span class="line"># 查看机器已有的验证服务器，方便备份 </span><br><span class="line">adb shell settings get global captive_portal_http_url</span><br><span class="line">adb shell settings get global captive_portal_https_url</span><br><span class="line"># 删除验证服务器</span><br><span class="line">adb shell settings delete global captive_portal_http_url</span><br><span class="line">adb shell settings delete global captive_portal_https_url</span><br><span class="line"># 设置验证服务器</span><br><span class="line">adb shell settings put global captive_portal_http_url http://www.google.cn/generate_204</span><br><span class="line">adb shell settings put global captive_portal_https_url https://www.google.cn/generate_204</span><br></pre></td></tr></table></figure><p>小米的验证服务器在国内应该是延迟最低的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">settings put global captive_portal_http_url http://connect.rom.miui.com/generate_204</span><br><span class="line">settings put global captive_portal_https_url https://connect.rom.miui.com/generate_204</span><br></pre></td></tr></table></figure></p><p>验证服务器：</p><ul><li>华为： <a href="http://connectivitycheck.platform.hicloud.com/generate_204" target="_blank" rel="noopener">http://connectivitycheck.platform.hicloud.com/generate_204</a></li><li>Vivo： <a href="http://wifi.vivo.com.cn/generate_204" target="_blank" rel="noopener">http://wifi.vivo.com.cn/generate_204</a></li><li>小米：<a href="http://connect.rom.miui.com/generate_204" target="_blank" rel="noopener">http://connect.rom.miui.com/generate_204</a></li><li>Google 大陆： <a href="http://www.google.cn/generate_204" target="_blank" rel="noopener">www.google.cn/generate_204</a></li></ul><blockquote><p>给 captive_portal_https_url 赋值，改为 https 链接</p></blockquote><p>以上设置了不一定能解决问题，可能还需要清理 play 数据和缓存，重启盒子。</p><blockquote><p>其实上面步骤在我的软路由环境下不存在，因为很多科学插键的代理域名中已经包含了谷歌那个验证服务器的域名，因此，TV 盒子就不会报错误了。</p></blockquote><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://ericclose.github.io/Captive-Portal-Android.html" target="_blank" rel="noopener">原生 Android 网络去叉／叹号 Android 5.0 - 10.0</a></li><li><a href="http://www.moxishuma.cn/index.php/archives/32/" target="_blank" rel="noopener">摩西数码/shield tv无法访问互联网无法观看youtube/无线ADB教程</a></li><li><a href="https://a-li.me/844.html" target="_blank" rel="noopener">记录一次 Android TV 网络访问排障</a></li><li><a href="https://www.youtube.com/watch?v=Hsmp0IfCZfw" target="_blank" rel="noopener">油管悟空/Shield TV 出现已连接但无法访问 要怎么解决？Android TV的通用解决办法看这里！再说一遍~</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;搬到新家之后，陆续购入了若干大件电器，其中，电视机作为家庭客厅的一个重要输出终端设备，经过综合比较，最后剁手了小米电视大师 82 寸 4K 的版本。同期，红米也新推出了一款 86 寸的电视。但是，硬件貌似并没有大师系列好，同时，红米的这款不支持远场语音功能，每次要呼叫小爱同学，还需要找到遥控器然后语音控制，不方便。&lt;/p&gt;
&lt;p&gt;目前国产电视机的硬件性能其实都还 OK，个人觉得影响观看体验的重要因素反而是片源！国内「优爱腾」流媒体的质量还有待提高，2K/4K 的片源质量堪忧，甚至 1080P 的片源都不行。因为小米电视并不是 Netflix 认证的设备，是无法直接安装 Netflix 官方 APP 的。因此，决定购入一个国外的电视盒子——TiVo Stream TV 盒子，然后在它上面安装 Netflix、Youtube 等 APP 观看世界各地高质量的片源了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/michael_xiang/images/raw/master/uPic/bncTZ6.png&quot; alt=&quot;效果&quot;&gt;&lt;/p&gt;
&lt;p&gt;上图就是效果图啦，美滋滋，顺带安利一部剧《纸钞屋》，西班牙剧真是给力！&lt;/p&gt;
    
    </summary>
    
      <category term="数码" scheme="https://michael728.github.io/categories/%E6%95%B0%E7%A0%81/"/>
    
    
      <category term="数码" scheme="https://michael728.github.io/tags/%E6%95%B0%E7%A0%81/"/>
    
      <category term="多媒体" scheme="https://michael728.github.io/tags/%E5%A4%9A%E5%AA%92%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>R4S 使用笔记</title>
    <link href="https://michael728.github.io/2021/04/24/digital-products-r4s/"/>
    <id>https://michael728.github.io/2021/04/24/digital-products-r4s/</id>
    <published>2021-04-24T23:21:24.000Z</published>
    <updated>2021-06-20T15:45:44.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>为了让新家的网络可以自由访问各大流媒体资源，以及方便自己开发环境中下载各种国外资源依赖软件包等，购入了 R4S 软路由设备。</p><a id="more"></a><h2 id="固件下载"><a href="#固件下载" class="headerlink" title="固件下载"></a>固件下载</h2><ul><li><a href="https://wiki.friendlyarm.com/wiki/index.php/NanoPi_R4S/zh#.E4.B8.8B.E8.BD.BD.E7.B3.BB.E7.BB.9F.E5.9B.BA.E4.BB.B6" target="_blank" rel="noopener">官方固件/NanoPi R4S/zh</a> 对应的<a href="https://pan.baidu.com/share/init?surl=IVKSPo5m4SGGh8z_hY_hTg" target="_blank" rel="noopener">网盘地址/5fd2</a></li><li><a href="https://github.com/klever1988/nanopi-openwrt" target="_blank" rel="noopener">klever1988/nanopi-openwrt</a> Star 2.3K，推荐</li><li><a href="https://github.com/SuLingGG/OpenWrt-Rpi" target="_blank" rel="noopener">SuLingGG/OpenWrt-Rpi</a> Star 2.1K</li><li><a href="https://github.com/QiuSimons/R2S-R4S-X86-OpenWrt" target="_blank" rel="noopener">QiuSimons/R2S-R4S-X86-OpenWrt</a></li><li><a href="https://bigdongdong.gitbook.io/nanopi-r2s/r4s-gu-jian-ji-gong-ju-xia-zai" target="_blank" rel="noopener">Dongdong/R4S第三方固件</a> </li><li><a href="https://github.com/DHDAXCW/NanoPi-R4S-2021/releases/" target="_blank" rel="noopener">骷髅头/DHDAXCW/NanoPi-R4S-2021</a> </li></ul><blockquote><p>语雀上有个文章总结的挺好，推荐 <a href="https://www.yuque.com/friendlyelec/r2s/gd4g3l" target="_blank" rel="noopener">NanoPi-R2S / NanoPi-R4S 常见第三方固件选择</a></p></blockquote><p>如果想自己编译固件，可以看如下资源：</p><ul><li><a href="https://github.com/coolsnowwolf/lede" target="_blank" rel="noopener">coolsnowwolf/lede</a> Lean的Openwrt源码仓库，高 Star 项目</li></ul><h2 id="刷固件"><a href="#刷固件" class="headerlink" title="刷固件"></a>刷固件</h2><ul><li><a href="https://www.youtube.com/watch?v=ZCmbbnIBD78" target="_blank" rel="noopener">洋葱油管/R2S软路由销量之王！R2S安装openwrt攻略 openwrt软路由设置</a></li><li><a href="https://www.youtube.com/watch?v=UYl-dgrPnTI&amp;t=114s" target="_blank" rel="noopener">DongDong/R2S 使用指南</a></li></ul><p>刷固件的软件：</p><ul><li><a href="https://www.balena.io/etcher/?ref=etcher_footer" target="_blank" rel="noopener">balenaEtcher</a></li><li><a href="https://bigdongdong.gitbook.io/nanopi-r2s/" target="_blank" rel="noopener">bigdongdong/R2S/R4S 使用指导</a></li></ul><p>写盘工具：可以使用 Rufus 或者 balenaEtcher，其实，就和之前做 Linux 启动盘一样，就是拿着固件镜像文件做一个启动盘。</p><p>注意点：刷完固件的 TF 卡下次插入电脑，可能会弹出需要格式化，千万不要进行格式化，否则可能会丢失容量。下次刷固件，不用格式化就可以直接刷固件即可！</p><p>balenaEtcher 刷固件</p><ol><li>select image：选择要刷入的固件</li><li>select dirve：选择 tf 卡，也就是要将固件刷入的存储介质</li><li>flash：开始刷入固件</li></ol><p>刷好固件的 TF 卡插入 R4S，SYS 灯常亮之后，通过一根网线将 R4S 的 LAN 口和电脑连接。</p><p>接着就可以打开 R4S 的后台，浏览器访问 192.168.2.1。</p><ul><li>用户名 root</li><li>密码 password</li></ul><p>至此， R4S 的系统已经安装启动完毕，接着开始配置网络。</p><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><p>要搞清楚是猫拨号还是路由器拨号。进入路由器后台观察它的上网方式设置，如果是 DHCP 的方式，则表示是光猫拨号上网的方式。</p><p>连接设备：光猫的线接入 R4S 的 WAN 口，然后用网线将 R4S 的 LAN 口和路由器的 WAN 口相连。</p><blockquote><p>个人理解，WAN 口就是信号的入口，LAN 口就是信号的出口，这么理解，就知道上面为何这么连接了。</p></blockquote><p>备注：路由器的上网方式其实就是对 WAN 口进行设置，局域网设置的就是对 LAN 口设置的。</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/8TOcgI.png" alt="网络接线"></p><blockquote><p>图片来自 <a href="https://www.yuque.com/friendlyelec/r2s/fh1msa" target="_blank" rel="noopener">语雀/NanoPi R2S / R4S 软路由常见网络接线指引</a></p></blockquote><h3 id="将无线路由器改为无线交换机，有线中继模式"><a href="#将无线路由器改为无线交换机，有线中继模式" class="headerlink" title="将无线路由器改为无线交换机，有线中继模式"></a>将无线路由器改为无线交换机，有线中继模式</h3><p>所有设备都在一个局域网，没有路由功能，少一次转发</p><p>判断路由器是否支持场景二的设置：登录路由器后台，判断路由器是否支持无线接入点（AP）模式/有线中继模式，他们一样，只是叫法不同。</p><blockquote><p>小米路由器在上网设置菜单下有工作模式的切换</p></blockquote><p>后台管理地址一定要记住：重启之后，这台路由器就不是路由器了，就是一台无线交换机，以后，路由器的网口没有 WAN 口和 LAN 区分了。</p><ul><li>如果是光猫拨号，网络接口的 WAN 协议就是 DHCP 客户端</li><li>如果是软路由拨号上网，就切成 PPPoE，配置宽带账号密码（填好重启光猫）</li></ul><h2 id="路由器设置"><a href="#路由器设置" class="headerlink" title="路由器设置"></a>路由器设置</h2><ul><li><a href="https://blog.qust.me/posts/nanopir4s/" target="_blank" rel="noopener">NanoPi R4S 上手体验</a> 介绍了 OpenClash 的使用，简略</li><li><a href="https://didiboy0702.gitbook.io/wukongdaily/" target="_blank" rel="noopener">资料：悟空的日常</a></li><li>测速网站：<a href="https://fast.com/zh/cn/" target="_blank" rel="noopener">https://fast.com/zh/cn/</a></li></ul><h3 id="设置桥接模式"><a href="#设置桥接模式" class="headerlink" title="设置桥接模式"></a>设置桥接模式</h3><p>如果为了让软路由的 IP 和家里联网设备都处于同一网段，那么，可以将路由器设为桥接模式，这样，路由器就相当于 AP，接入路由器的设备不会处于另外的网段。方便在软路由中针对具体的 IP 设备进行联网控制。</p><p>小米路由器进入后台：常用设置-》上网设置-》工作模式切换，选择「有线中继工作模式」：</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/qP6Vec.png" alt="工作模式"></p><blockquote><p>要记住改为中继模式后的管理后台 IP</p></blockquote><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/T8y7cW.png" alt="管理台"></p><h2 id="Passwall-使用"><a href="#Passwall-使用" class="headerlink" title="Passwall 使用"></a>Passwall 使用</h2><h3 id="基本设置"><a href="#基本设置" class="headerlink" title="基本设置"></a>基本设置</h3><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/izrusV.png" alt="启用"></p><ul><li>UDP 一般选择与 TCP 节点一致</li><li>需要勾选「主开关」保存并应用才真正启用</li></ul><p>模式</p><ul><li>TCP 默认代理模式：一般选择「中国列表以外」</li><li>UDP 默认代理模式：默认是「游戏模式」</li><li>路由器自身 TCP 代理模式：</li><li>路由器自身 UDP 代理模式：</li></ul><p>选项说明：</p><ul><li>不代理：不启用代理</li><li>全局代理：全部网站走代理</li><li>GFW 列表：仅那些被屏蔽的网站走代理</li><li>中国列表以外：只要是外国的都走代理</li><li>中国列表：这个模式一般是国外的用于访问国内网站的，暂时用不到</li></ul><h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><p>控制连接到局域网中的设备，主要是控制他们使用什么节点或者什么模式来访问网络。</p><blockquote><p>要能控制这些设备，有个前提，这些设备要和软路由在同一网段下。</p></blockquote><p>一般家庭网络布置是如下的：</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/Zi5HbO.png" alt="光猫拨号"></p><p>上面这种方式，路由器一般是 「DHCP 方式/动态 IP」。只能保证无线接入的设备和路由器在一个网段，但是，路由器和软路由并不在一个网段。这种情况，「访问控制」是无法使用的，因为对于软路由来说，只有路由器这个设备是它能控制的。除此以外，还多了一个缺点，多了一次转发。</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/sSGwHY.png" alt="推荐模式"></p><p>上图是 UP 主推荐的模式，避免家中网段过多，光猫改为桥接模式，软路由负责拨号，路由器设为「AP模式/桥接模式/有线中继模式」。这样设置，设备就处于同一网段下了。此时，路由器就类似是一个交换机的角色，他不会像 DHCP 那样，产生一个新的网段。</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/iZOSy2.png" alt="简化"></p><p>有时候运宽带运营商是不推荐让光猫改为桥接模式，因为改为桥接模式他们没法直接后台操作网络，升级等。现在光猫的性能都不差，也没必要非要改为桥接模式，让其他设备拨号。上图的模式就比较方便，仅仅是将路由器的模式修改为「AP模式/桥接模式/有线中继模式」，路由器连接的设备也可以和软路由处在同一网段。</p><p>如下的设置，可以实现局域网内某些设备是否可以走代理：</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/nsCBOu.png" alt="示例"></p><p>比如我们使用的 NAS，一般都是国外厂商的，当我们模式选择「中国列表以外」时，一般他们的网站都会被代理，这时候想让他们不走代理或者为GFW 列表的方式，就可以使用访问控制的功能来设置了。</p><h3 id="自动切换"><a href="#自动切换" class="headerlink" title="自动切换"></a>自动切换</h3><p>自动切换功能就是添加若干个备用节点，当其中一个节点不可用，会自动切换到备用节点，实现「高可用」。</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/uruSYQ.png" alt="自动切换"></p><h3 id="直连-代理名单管理"><a href="#直连-代理名单管理" class="headerlink" title="直连/代理名单管理"></a>直连/代理名单管理</h3><ul><li>直连列表：可以实现加入的 域名/IP 不走代理，这就可以让一些防火墙中的网址依然不能访问，对所有模式生效，优先级最高</li><li>代理列表：加入的 域名/IP 将走代理；</li><li>屏蔽列表：加入的 域名/IP 将屏蔽；</li></ul><p>举例，<code>https://www.speedtest.net/</code> 这个测速网站是国外网站，如果在使用代理的情况，默认会是在国外节点进行测速，如果我们将它加到「直连列表」中，则会测量我们家中实际运营商的网速，这才是我们关心的：</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/FjVAl8.png" alt="测速示例"></p><h3 id="高级设置"><a href="#高级设置" class="headerlink" title="高级设置"></a>高级设置</h3><p>设置节点数量，可以使用多个 TCP 节点，然后配合上面介绍的访问控制，可以实现针对某个设备指定使用某个节点：</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/TnR7eT.png" alt="节点数量"></p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/uHBDsU.png" alt="指定节点"></p><blockquote><p>例如使用某些不限流量的节点给 NAS 云盘备份使用</p></blockquote><h3 id="分流"><a href="#分流" class="headerlink" title="分流"></a>分流</h3><p>实现让特定的网站使用指定的节点，比如奈菲使用新加坡节点，油管使用香港节点。</p><p>只需要在「节点列表」-》「添加」，按照如下示例选择：</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/TP1VOf.png" alt="分流"></p><p>当创建好这个「分流节点」之后，需要在「基本设置」中，选择我们刚刚创建的这个节点。这样，就可以实现分流了。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.youtube.com/watch?v=qkga9DN5H08&amp;t=7s" target="_blank" rel="noopener">油管/使用PassWALL 完美掌控内网科学上网</a></li></ul><h2 id="软路由设置重启"><a href="#软路由设置重启" class="headerlink" title="软路由设置重启"></a>软路由设置重启</h2><p>在使用一周左右，发现网速降低比较明显，重启软路由之后正常了。因此，决定设置定时任务，让软路由每天清晨自动重启。</p><ul><li>首先在系统》启动项中，检查 <code>cron</code> 服务是启用的状态</li><li>在系统》计划任务的输入框中，添加 <code>0 4 * * * sleep 70 &amp;&amp; touch /etc/banner &amp;&amp; reboot</code>，然后提交保存。计划每天凌晨 4 点重启</li></ul><blockquote><p>上面这个定时任务，其实，直接进入 TTYD 终端界面，<code>crontab -e</code> 也可以编辑保存</p></blockquote><p>参考：</p><ul><li><a href="https://einverne.github.io/post/2017/03/auto-reboot-openwrt.html" target="_blank" rel="noopener">使用 Cron 定时重启 Openwrt 路由器</a></li></ul><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>客户端：</p><ul><li><a href="https://github.com/Kr328/ClashForAndroid/releases" target="_blank" rel="noopener">Clash andriod</a></li><li><a href="https://smartyoutubetv.github.io/" target="_blank" rel="noopener">smartyoutubetv</a> 针对没有谷歌框架的设备可以安装的 Youtube 客户端</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;为了让新家的网络可以自由访问各大流媒体资源，以及方便自己开发环境中下载各种国外资源依赖软件包等，购入了 R4S 软路由设备。&lt;/p&gt;
    
    </summary>
    
      <category term="数码" scheme="https://michael728.github.io/categories/%E6%95%B0%E7%A0%81/"/>
    
    
      <category term="数码" scheme="https://michael728.github.io/tags/%E6%95%B0%E7%A0%81/"/>
    
      <category term="多媒体" scheme="https://michael728.github.io/tags/%E5%A4%9A%E5%AA%92%E4%BD%93/"/>
    
      <category term="网络" scheme="https://michael728.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch常见API</title>
    <link href="https://michael728.github.io/2021/02/16/elk-es-operation-api/"/>
    <id>https://michael728.github.io/2021/02/16/elk-es-operation-api/</id>
    <published>2021-02-16T23:10:57.000Z</published>
    <updated>2021-06-20T15:45:44.497Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/pexels-andrea-piacquadio-3769697.jpg" alt="Search"></p><h2 id="文档-CRUD"><a href="#文档-CRUD" class="headerlink" title="文档 CRUD"></a>文档 CRUD</h2><table><thead><tr><th>Index</th><th>API 示例</th></tr></thead><tbody><tr><td>Index</td><td>PUT my_index/_doc/1 <br>{“user”:”mike”,”comment”:”You know,for search”}</td></tr><tr><td>Create</td><td>PUT my_index/_create/1<br>{“user”:”mike”,”comment”:”You know,for search”}<br>POST my_index/_doc （不指定 ID，则自动生成 ID）<br>{“user”:”mike”,”comment”:”You know,for search”}</td></tr><tr><td>Read</td><td>GET my_index/_doc/1</td></tr><tr><td>Update</td><td>POST my_index/_update/1<br>{<br>  “doc”: {<br>    “user”:”mike”,<br>    “comment”: “You know, Elasticsearch”<br>  }<br>}</td></tr><tr><td>Delete</td><td>DELETE my_index/<em>doc/1</em></td></tr></tbody></table><blockquote><p>示例中，my_index 是新建的索引名</p></blockquote><ul><li>Type 名，约定都用 <code>_doc</code></li><li>Create：创建新文档，如果 ID 已经存在，则会失败</li><li>Index：如果 ID 不存在，则新建文档；如果 ID 存在，则会先删除已有的文档，在创建新的文档，版本会增加</li><li>Update：文档必须已经存在，更新只会对相应字段做增量修改</li></ul><h3 id="Index-文档"><a href="#Index-文档" class="headerlink" title="Index 文档"></a>Index 文档</h3><p>Index 和 Create 不一样的地方：</p><ul><li>index：如果文档不存在，就索引新的文档。否则现有文档会被删除，新的文档被索引。版本信息 +1</li><li>update：update 方法不会删除原来的文档，而是实现真正的数据更新，POST 方法请求体需要包含在 <code>doc</code> 中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST my_index/_update/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;: &#123;</span><br><span class="line">    &quot;user&quot;:&quot;mike&quot;,</span><br><span class="line">    &quot;comment&quot;: &quot;You know, Elasticsearch&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Get-文档"><a href="#Get-文档" class="headerlink" title="Get 文档"></a>Get 文档</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET my_index/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot; : &quot;my_index&quot;,</span><br><span class="line">  &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">  &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">  &quot;_version&quot; : 6,</span><br><span class="line">  &quot;_seq_no&quot; : 6,</span><br><span class="line">  &quot;_primary_term&quot; : 1,</span><br><span class="line">  &quot;found&quot; : true,</span><br><span class="line">  &quot;_source&quot; : &#123;</span><br><span class="line">    &quot;user&quot; : &quot;mike&quot;,</span><br><span class="line">    &quot;comment&quot; : &quot;You know, Elasticsearch&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>找到文档，返回 HTTP 200<ul><li>文档元信息<ul><li>_index/_type</li><li>版本信息，同一个 ID 的文档，及时被删除，Version 号也会不断增加</li><li>_source 中默认包含了文档的所有原始信息</li></ul></li></ul></li><li>找不到文档，返回 HTTP 404</li></ul><h2 id="Bulk-API"><a href="#Bulk-API" class="headerlink" title="Bulk API"></a>Bulk API</h2><ul><li>支持在一次 API 调用中，对不同的索引进行操作</li><li>支持四种类型操作<ul><li>Index</li><li>Create</li><li>Update</li><li>Delete</li></ul></li><li>可以在 URI 中指定 Index，也可以在请求体中进行</li><li>操作中单条操作失败，并不影响其他操作</li><li>返回结果包含每一条操作执行的结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST  _bulk</span><br><span class="line">&#123;&quot;index&quot;: &#123;&quot;_index&quot;:&quot;test&quot;,&quot;_id&quot;:&quot;1&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;field1&quot;: &quot;value1&quot;&#125;</span><br><span class="line">&#123;&quot;delete&quot;: &#123;&quot;_index&quot;: &quot;test&quot;,&quot;_id&quot;:&quot;2&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;create&quot;: &#123;&quot;_index&quot;:&quot;test2&quot;,&quot;_id&quot;:&quot;3&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;field1&quot;:&quot;value3&quot;&#125;</span><br><span class="line">&#123;&quot;update&quot;:&#123;&quot;_index&quot;:&quot;test&quot;,&quot;_id&quot;:1&#125;&#125;</span><br><span class="line">&#123;&quot;doc&quot;:&#123;&quot;field2&quot;:&quot;value2&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>index 和 create 操作，需要在紧接着的下一行提供 source，以便添加文档或者更新</li><li>delete 不需要 source</li><li>update 需要在下一行指定 doc，指明如何更新</li></ul><p>返回体：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 350,</span><br><span class="line">  &quot;errors&quot; : false,</span><br><span class="line">  &quot;items&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;index&quot; : &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;test&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;_version&quot; : 1,</span><br><span class="line">        &quot;result&quot; : &quot;created&quot;,</span><br><span class="line">        &quot;_shards&quot; : &#123;</span><br><span class="line">          &quot;total&quot; : 2,</span><br><span class="line">          &quot;successful&quot; : 2,</span><br><span class="line">          &quot;failed&quot; : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;_seq_no&quot; : 0,</span><br><span class="line">        &quot;_primary_term&quot; : 1,</span><br><span class="line">        &quot;status&quot; : 201</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;delete&quot; : &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;test&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2&quot;,</span><br><span class="line">        &quot;_version&quot; : 1,</span><br><span class="line">        &quot;result&quot; : &quot;not_found&quot;,</span><br><span class="line">        &quot;_shards&quot; : &#123;</span><br><span class="line">          &quot;total&quot; : 2,</span><br><span class="line">          &quot;successful&quot; : 2,</span><br><span class="line">          &quot;failed&quot; : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;_seq_no&quot; : 1,</span><br><span class="line">        &quot;_primary_term&quot; : 1,</span><br><span class="line">        &quot;status&quot; : 404</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;create&quot; : &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;test2&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;3&quot;,</span><br><span class="line">        &quot;_version&quot; : 1,</span><br><span class="line">        &quot;result&quot; : &quot;created&quot;,</span><br><span class="line">        &quot;_shards&quot; : &#123;</span><br><span class="line">          &quot;total&quot; : 2,</span><br><span class="line">          &quot;successful&quot; : 2,</span><br><span class="line">          &quot;failed&quot; : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;_seq_no&quot; : 0,</span><br><span class="line">        &quot;_primary_term&quot; : 1,</span><br><span class="line">        &quot;status&quot; : 201</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;update&quot; : &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;test&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;_version&quot; : 2,</span><br><span class="line">        &quot;result&quot; : &quot;updated&quot;,</span><br><span class="line">        &quot;_shards&quot; : &#123;</span><br><span class="line">          &quot;total&quot; : 2,</span><br><span class="line">          &quot;successful&quot; : 2,</span><br><span class="line">          &quot;failed&quot; : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;_seq_no&quot; : 2,</span><br><span class="line">        &quot;_primary_term&quot; : 1,</span><br><span class="line">        &quot;status&quot; : 200</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="批量读取-mget"><a href="#批量读取-mget" class="headerlink" title="批量读取 mget"></a>批量读取 mget</h2><p>批量操作，可以减少网络连接所产生的开销，提高性能。<code>mget</code> 是通过文档 ID 来查询文档信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET _mget</span><br><span class="line">&#123;</span><br><span class="line">  &quot;docs&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_index&quot;: &quot;my_index&quot;,</span><br><span class="line">      &quot;_id&quot;: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_index&quot;: &quot;test&quot;,</span><br><span class="line">      &quot;_id&quot;: 1</span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回体：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;docs&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_index&quot; : &quot;my_index&quot;,</span><br><span class="line">      &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">      &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">      &quot;_version&quot; : 10,</span><br><span class="line">      &quot;_seq_no&quot; : 10,</span><br><span class="line">      &quot;_primary_term&quot; : 1,</span><br><span class="line">      &quot;found&quot; : true,</span><br><span class="line">      &quot;_source&quot; : &#123;</span><br><span class="line">        &quot;user&quot; : &quot;mike2&quot;,</span><br><span class="line">        &quot;comment&quot; : &quot;You know, Elasticsearch&quot;,</span><br><span class="line">        &quot;age&quot; : 28</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_index&quot; : &quot;test&quot;,</span><br><span class="line">      &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">      &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">      &quot;_version&quot; : 2,</span><br><span class="line">      &quot;_seq_no&quot; : 2,</span><br><span class="line">      &quot;_primary_term&quot; : 1,</span><br><span class="line">      &quot;found&quot; : true,</span><br><span class="line">      &quot;_source&quot; : &#123;</span><br><span class="line">        &quot;field1&quot; : &quot;value1&quot;,</span><br><span class="line">        &quot;field2&quot; : &quot;value2&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="批量查询-msearch"><a href="#批量查询-msearch" class="headerlink" title="批量查询 msearch"></a>批量查询 msearch</h2><p><code>msearch</code> 是根据查询条件、搜索得到相应文档。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST my_index/_msearch</span><br><span class="line">&#123;&#125;</span><br><span class="line">&#123;&quot;query&quot;: &#123;&quot;match_all&quot;: &#123;&#125;&#125;, &quot;from&quot;: 0, &quot;size&quot;: 10&#125;</span><br><span class="line">&#123;&quot;index&quot;:&quot;test&quot;&#125;</span><br><span class="line">&#123;&quot;query&quot;:&#123;&quot;match_all&quot;:&#123;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>上面的查询涉及了 2 个索引，一个是 my_index 索引，还有一个是 test 索引</li></ul><h2 id="analyzer-API"><a href="#analyzer-API" class="headerlink" title="_analyzer API"></a>_analyzer API</h2><h2 id="常见错误返回"><a href="#常见错误返回" class="headerlink" title="常见错误返回"></a>常见错误返回</h2><table><thead><tr><th>问题</th><th>原因</th></tr></thead><tbody><tr><td>无法连接</td><td>网络故障或集群挂了</td></tr><tr><td>连接无法关闭</td><td>网络故障或节点出错</td></tr><tr><td>429</td><td>集群过于繁忙</td></tr><tr><td>4xx</td><td>请求体格式有错</td></tr><tr><td>500</td><td>集群内部错误</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://gitee.com/michael_xiang/images/raw/master/uPic/pexels-andrea-piacquadio-3769697.jpg&quot; alt=&quot;Search&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;文档-CRUD&quot;
      
    
    </summary>
    
      <category term="ELK" scheme="https://michael728.github.io/categories/ELK/"/>
    
    
      <category term="ELK" scheme="https://michael728.github.io/tags/ELK/"/>
    
      <category term="Search" scheme="https://michael728.github.io/tags/Search/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch 学习笔记</title>
    <link href="https://michael728.github.io/2021/02/14/elk-es-basic-tutorial-note/"/>
    <id>https://michael728.github.io/2021/02/14/elk-es-basic-tutorial-note/</id>
    <published>2021-02-14T23:10:57.000Z</published>
    <updated>2021-06-20T15:45:44.497Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/pexels-andrea-piacquadio-3769697.jpg" alt="Search"></p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="文档-Document"><a href="#文档-Document" class="headerlink" title="文档 Document"></a>文档 Document</h3><p>ES 是面向文档的，文档是所有课搜索数据的最小单位。例如：</p><ul><li>日志文件中的日志项</li><li>一本电影的具体信息</li></ul><p>文档会被序列化为 JSON 格式，保存在 ES 中</p><ul><li>JSON 对象由字段组成</li><li>每个字段都有对应的字段类型</li></ul><p>每个文档都有一个 Unique ID</p><ul><li>可以自定义 ID</li><li>或者 ES 自动生成</li></ul><h4 id="文档的元数据"><a href="#文档的元数据" class="headerlink" title="文档的元数据"></a>文档的元数据</h4><p>元数据，用于标准文档的相关信息</p><ul><li><code>_id</code>：一篇文档的唯一 ID</li><li><code>_index</code>：文档所属的索引名</li><li><code>_source</code>：文档的原始 JSON 数据</li><li><code>_version</code>：文档版本信息</li><li><code>_score</code>：相关性打分</li><li><code>_all</code>：整合所有字段内容到该字段，已被废除</li></ul><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>Index 索引是文档的容器，是一类「文档」的集合</p><ul><li>Index：体现了逻辑空间的概念：每个索引都有自己的 Mapping 定义，用于定义包含的文档的字段名和字段类型</li><li>Shard：体现了物理空间的概念：索引中的数据分散在 Shard 上</li></ul><p>索引的 Mapping 与 Settings：</p><ul><li>Mapping 定义文档字段的类型</li><li>Setting 定义不同的数据分布</li></ul><h4 id="索引的不同语义"><a href="#索引的不同语义" class="headerlink" title="索引的不同语义"></a>索引的不同语义</h4><p>索引这个词在不同的上下文中是有不同的含义的。</p><blockquote><p>索引（动词）文档到 ES 的索引（名词）中。</p></blockquote><ul><li>名词：ES 集群中可以创建很多个不同的索引</li><li>动词：保存文档到 ES 的过程也叫索引（indexing），ES 中创建一个倒排索引的过程</li></ul><h3 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h3><ul><li>在 ES7 之前，一个 Index 可以设置成多个 Types</li><li>在 ES7 开始，一个 Index 仅可以创建一个 Type <code>_doc</code></li></ul><h3 id="关系型数据库与-ES-的比较"><a href="#关系型数据库与-ES-的比较" class="headerlink" title="关系型数据库与 ES 的比较"></a>关系型数据库与 ES 的比较</h3><p>类比：</p><table><thead><tr><th>RDMS</th><th>ES</th></tr></thead><tbody><tr><td>Table</td><td>Index</td></tr><tr><td>Row</td><td>Document</td></tr><tr><td>Column</td><td>Field</td></tr><tr><td>Schema</td><td>Mapping</td></tr><tr><td>SQL</td><td>DSL</td></tr></tbody></table><p>传统关系型数据库与 ES 的区别：</p><ul><li>ES：相关性/高性能全文检索</li><li>RDMS：事务性/Join</li></ul><h3 id="分片（Primary-Shard-amp-Replica-Shard）"><a href="#分片（Primary-Shard-amp-Replica-Shard）" class="headerlink" title="分片（Primary Shard &amp; Replica Shard）"></a>分片（Primary Shard &amp; Replica Shard）</h3><ul><li>主分片，用以解决数据水平扩展的问题。通过主分片，可以将数据分不到集群内的所有节点之上<ul><li>一个分片就是一个运行的 Lucene 的实例</li><li>主分片数在索引创建时指定，<strong>后续不允许修改</strong>，除非 Reindex</li></ul></li><li>副本，用以解决数据高可用的问题。副本分片是主分片的拷贝。当主分片丢失，集群会选择对应的副本分片称为主分片<ul><li>副本分片数是可以动态调整的</li><li>增加副本数，还可以在一定程度上提高服务的可用性（读取的吞吐 ）。</li></ul></li></ul><p>增删改属于写操作，增加副本只可能降低写入速度，但是会提高数据安全性。从写的角度看，会把请求分发到不同的副本，只要这些副本在不同的机器，机器资源又足够，那就实现了水平的扩展，提高了读取的并发性。</p><p>补充：</p><ul><li>一个 ES node 对应一个 ES 实例</li><li>一个 ES node 可以有多个 index</li><li>一个 index 可以有多个 shard</li><li>一个 shard 是一个 Lucene index（这里的 index 是 Lucene 自己概念，和 ES 中的 index 不是一个概念）</li></ul><h4 id="分片的设定"><a href="#分片的设定" class="headerlink" title="分片的设定"></a>分片的设定</h4><ul><li>对于生产环境中分片的设定，需要提前做好容量规划<ul><li>分片数设置过小<ul><li>导致后续无法实现增加节点实现水平扩展</li><li>单个分片的数据量太大，导致数据重新分配耗时</li></ul></li><li>分片数设置过大，7.0 开始，默认主分片数设置成1，解决了 over-sharding 的问题<ul><li>影响搜索结果的相关性打分，影响统计结果的准确性（因为 idf 是基于分片上的数据进行计算的，并不是基于所有分片计算，所以数据量少，容易出现不准的情况）</li><li>单个节点上过多的分片，会导致资源浪费，同时也会影响性能</li></ul></li></ul></li></ul><p>从数据量、写入速度、是写为主还是查询为主等等，考虑分片的设置：</p><ul><li>磁盘推荐 SSD</li><li>JVM 最大 Xmx 不要超过 30G</li><li>副本分片至少设置为 1</li><li>主分片单个存储不要超过 30GB，按照这个推算出分片数</li></ul><p>查看集群的健康状况：<code>GET _cluster/health</code></p><ul><li>Green：主分片与副本都正常分配</li><li>Yellow：主分片全部正常分配，有副本分片未能正常分配</li><li>Red：有主分片未能分配<ul><li>例如，当服务器磁盘容量超过 85%时，去创建了一个新的索引<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3></li></ul></li><li><a href="https://time.geekbang.org/course/detail/100030501-102667" target="_blank" rel="noopener">极客时间-</a></li></ul><h2 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h2><ul><li>正排索引指的是文档 ID 和文档内容的关联,索引号对应索引稳定的内容，比如：书的第一页有啥内容?第二页有啥内容?</li><li>倒排索引指的是<strong>单词到文档 ID</strong>的对应关系</li></ul><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/BTZrxe.png" alt="倒排索引"></p><h3 id="倒排索引的核心组成"><a href="#倒排索引的核心组成" class="headerlink" title="倒排索引的核心组成"></a>倒排索引的核心组成</h3><p>倒排索引包含两个部分：</p><ul><li>单词词典（Term Dictionary），记录所有文档的单词，记录单词到倒排列表的关联关系<ul><li>单词词典一般比较大，可以通过 B+ 树或哈希拉链法实现，以满足高性能的插入与查询</li></ul></li><li>倒排列表（Posting List），记录了单词对应的文档结合，由倒排索引项组成<ul><li>倒排索引项（Posting）<ul><li>文档 ID</li><li>词频 TF：该单词在文档中出现的次数，用于相关性评分</li><li>位置（Position）：单词在文档中分词的位置。用于语句搜索（pharse query）</li><li>偏移（Offset）：记录单词的开始结束位置，实现高亮显示</li></ul></li></ul></li></ul><p>一个示例，针对 Elasticsearch 倒排索引：</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/rH8GAg.png" alt="Posting List"></p><h3 id="Elasticsearch-的倒排索引"><a href="#Elasticsearch-的倒排索引" class="headerlink" title="Elasticsearch 的倒排索引"></a>Elasticsearch 的倒排索引</h3><ul><li>Elasticsearch 的 JSON 文档中的每个字段，都有自己的倒排索引</li><li>可以指定对某些字段不做索引<ul><li>优点：节省存储空间</li><li>缺点：字段无法被搜索</li></ul></li></ul><h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><ul><li><p><a href="https://www.jianshu.com/p/ed7e1ebb2fb7" target="_blank" rel="noopener">简书/Elasticsearch是如何做到快速索引的</a></p><h2 id="Analysis-与-Analyzer"><a href="#Analysis-与-Analyzer" class="headerlink" title="Analysis 与 Analyzer"></a>Analysis 与 Analyzer</h2></li><li><p>Analysis：文本分析是把全文本转换一系列单词（term/token）的过程，也叫分词</p></li><li>Analysis 是通过 Analyzer 来实现的<ul><li>可以使用 Elasticsearch 内置的分析器或者按需定制化分析器</li></ul></li><li>除了在数据写入时转换词条，匹配 Query 语句时也需要使用相同的分析器对查询语句进行分析</li></ul><h3 id="Analyzer-的组成"><a href="#Analyzer-的组成" class="headerlink" title="Analyzer 的组成"></a>Analyzer 的组成</h3><p>分词器是专门处理分词的组件，Analyzer 由三部分组成：</p><ul><li>Character Filters 针对原始文本处理，例如去除 HTML 标签</li><li>Tokenier 按照规则切分为单词</li><li>Token Filter 将切分的单词进行 二次加工，小写，删除 stopwords，增加同义词</li></ul><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/rjTlvk.png" alt="demo"></p><h3 id="ES-的内置分词器"><a href="#ES-的内置分词器" class="headerlink" title="ES 的内置分词器"></a>ES 的内置分词器</h3><p>Elasticsearch 内置了挺多<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.x/analysis-analyzers.html" target="_blank" rel="noopener">分词器</a>的：</p><ul><li>Standard Analyzer：默认分词器，按词切分，小写处理</li><li>Simple Analyzer：按照非字母切分（符号被过滤），小写处理</li><li>Stop Anlyzer：小写处理，停用词过滤（the,a,is）</li><li>Whitespace Analyzer：按照空格切分，不转小写</li><li>Keyword Analyzer：不分词，直接将输入当做输出，★★★</li><li>Pattern Analyzer：正则表达式，默认 \W+（非字符）</li><li>Language：提供 30 多种常见语言的分词器</li><li>Customer Analyzer：自定义分词器</li></ul><h4 id="Standar-Analyzer"><a href="#Standar-Analyzer" class="headerlink" title="Standar Analyzer"></a>Standar Analyzer</h4><p>默认分词器，按词切分，小写处理</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/qxeLOF.png" alt="standard"></p><p>停用词，例如 <code>in</code> 这些，也没有去除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;standard&quot;,</span><br><span class="line">  &quot;text&quot;: [&quot;2 running Quick brown-foxes dogs in the summer&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回体：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;tokens&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;2&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 0,</span><br><span class="line">      &quot;end_offset&quot; : 1,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;NUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;running&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 2,</span><br><span class="line">      &quot;end_offset&quot; : 9,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;quick&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 10,</span><br><span class="line">      &quot;end_offset&quot; : 15,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 2</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;brown&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 16,</span><br><span class="line">      &quot;end_offset&quot; : 21,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 3</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;foxes&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 22,</span><br><span class="line">      &quot;end_offset&quot; : 27,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 4</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;dogs&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 28,</span><br><span class="line">      &quot;end_offset&quot; : 32,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 5</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;in&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 33,</span><br><span class="line">      &quot;end_offset&quot; : 35,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 6</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;the&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 36,</span><br><span class="line">      &quot;end_offset&quot; : 39,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 7</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;summer&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 40,</span><br><span class="line">      &quot;end_offset&quot; : 46,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 8</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Simple-Analyzer"><a href="#Simple-Analyzer" class="headerlink" title="Simple Analyzer"></a>Simple Analyzer</h4><ul><li>按照非字母切分（例如 空格啊、中划线 - 这样的），非字母的都被去除</li><li>小写处理</li></ul><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/3K3q1d.png" alt="Simple"></p><h4 id="Stop-Analyzer"><a href="#Stop-Analyzer" class="headerlink" title="Stop Analyzer"></a>Stop Analyzer</h4><p>相比 Simpler Analyzer 多了 stop filter，会把 the/a/is 等词去除</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/EF8Fcj.png" alt="Stop"></p><h4 id="Keyword-Analyzer"><a href="#Keyword-Analyzer" class="headerlink" title="Keyword Analyzer"></a>Keyword Analyzer</h4><p>不分词，直接将输入当一个 term 输出</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/DFgKBg.png" alt="Kerword"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;keyword&quot;,</span><br><span class="line">  &quot;text&quot;: [&quot;2 running Quick brown-foxes dogs in the summer&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回体：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;tokens&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;2 running Quick brown-foxes dogs in the summer&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 0,</span><br><span class="line">      &quot;end_offset&quot; : 46,</span><br><span class="line">      &quot;type&quot; : &quot;word&quot;,</span><br><span class="line">      &quot;position&quot; : 0</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="analyzer-API"><a href="#analyzer-API" class="headerlink" title="_analyzer API"></a>_analyzer API</h3><h4 id="直接指定-Analyzer-进行测试"><a href="#直接指定-Analyzer-进行测试" class="headerlink" title="直接指定 Analyzer 进行测试"></a>直接指定 Analyzer 进行测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;standard&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;Mastering Elasticsearch, elasticsearch in Action&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回体：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;tokens&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;mastering&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 0,</span><br><span class="line">      &quot;end_offset&quot; : 9,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 10,</span><br><span class="line">      &quot;end_offset&quot; : 23,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 25,</span><br><span class="line">      &quot;end_offset&quot; : 38,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 2</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;in&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 39,</span><br><span class="line">      &quot;end_offset&quot; : 41,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 3</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;action&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 42,</span><br><span class="line">      &quot;end_offset&quot; : 48,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 4</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="指定索引的字段进行测试"><a href="#指定索引的字段进行测试" class="headerlink" title="指定索引的字段进行测试"></a>指定索引的字段进行测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST my_index/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;field&quot;:&quot;comment&quot;,</span><br><span class="line">  &quot;text&quot;:&quot;Mastering Elasticsearch, elasticsearch in Action&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回体：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;tokens&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;mastering&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 0,</span><br><span class="line">      &quot;end_offset&quot; : 9,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 10,</span><br><span class="line">      &quot;end_offset&quot; : 23,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 25,</span><br><span class="line">      &quot;end_offset&quot; : 38,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 2</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;in&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 39,</span><br><span class="line">      &quot;end_offset&quot; : 41,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 3</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;action&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 42,</span><br><span class="line">      &quot;end_offset&quot; : 48,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 4</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="自定义分词器进行测试"><a href="#自定义分词器进行测试" class="headerlink" title="自定义分词器进行测试"></a>自定义分词器进行测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokenizer&quot;: &quot;standard&quot;,</span><br><span class="line">  &quot;filter&quot;:[&quot;lowercase&quot;],</span><br><span class="line">  &quot;text&quot;: &quot;Mastering Elasticsearch, elasticsearch in Action&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回体：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;tokens&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;mastering&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 0,</span><br><span class="line">      &quot;end_offset&quot; : 9,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 10,</span><br><span class="line">      &quot;end_offset&quot; : 23,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 25,</span><br><span class="line">      &quot;end_offset&quot; : 38,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 2</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;in&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 39,</span><br><span class="line">      &quot;end_offset&quot; : 41,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 3</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;action&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 42,</span><br><span class="line">      &quot;end_offset&quot; : 48,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 4</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="中文分词器"><a href="#中文分词器" class="headerlink" title="中文分词器"></a>中文分词器</h3><p>中文分词的难点：</p><ul><li>中文句子，需要切分成一个一个词（不是一个一个字）。英文中，单词有自然的空格作为分隔，而中文却没有。</li><li>一句中文，在不同的上下文，有不同的理解<ul><li>这个苹果，不大好吃/这个苹果，不大，好吃</li><li>他说的确实在理/这事的确定不下来</li></ul></li></ul><h4 id="ICU-Analyzer"><a href="#ICU-Analyzer" class="headerlink" title="ICU Analyzer"></a>ICU Analyzer</h4><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/iYkbh5.png" alt="icu"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;icu_analyzer&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;他说的的确在理&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回体：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;tokens&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;他&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 0,</span><br><span class="line">      &quot;end_offset&quot; : 1,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;说的&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 1,</span><br><span class="line">      &quot;end_offset&quot; : 3,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;的确&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 3,</span><br><span class="line">      &quot;end_offset&quot; : 5,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 2</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;在&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 5,</span><br><span class="line">      &quot;end_offset&quot; : 6,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 3</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;理&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 6,</span><br><span class="line">      &quot;end_offset&quot; : 7,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 4</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果是默认的分词器呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;standard&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;他说的的确在理&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回体：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;tokens&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;他&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 0,</span><br><span class="line">      &quot;end_offset&quot; : 1,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;说&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 1,</span><br><span class="line">      &quot;end_offset&quot; : 2,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;的&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 2,</span><br><span class="line">      &quot;end_offset&quot; : 3,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 2</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;的&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 3,</span><br><span class="line">      &quot;end_offset&quot; : 4,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 3</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;确&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 4,</span><br><span class="line">      &quot;end_offset&quot; : 5,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 4</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;在&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 5,</span><br><span class="line">      &quot;end_offset&quot; : 6,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 5</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;理&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 6,</span><br><span class="line">      &quot;end_offset&quot; : 7,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 6</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="IK"><a href="#IK" class="headerlink" title="IK"></a>IK</h4><p><a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="noopener">IK Analysis for Elasticsearch</a> 支持自定义词库，支持热更新分词词典</p><p>安装插键：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.3.2/elasticsearch-analysis-ik-7.3.2.zip</span><br></pre></td></tr></table></figure></p><p>测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;ik_smart&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;他说的的确在理&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>返回体：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;tokens&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;他&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 0,</span><br><span class="line">      &quot;end_offset&quot; : 1,</span><br><span class="line">      &quot;type&quot; : &quot;CN_CHAR&quot;,</span><br><span class="line">      &quot;position&quot; : 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;说&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 1,</span><br><span class="line">      &quot;end_offset&quot; : 2,</span><br><span class="line">      &quot;type&quot; : &quot;CN_CHAR&quot;,</span><br><span class="line">      &quot;position&quot; : 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;的&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 2,</span><br><span class="line">      &quot;end_offset&quot; : 3,</span><br><span class="line">      &quot;type&quot; : &quot;CN_CHAR&quot;,</span><br><span class="line">      &quot;position&quot; : 2</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;的确&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 3,</span><br><span class="line">      &quot;end_offset&quot; : 5,</span><br><span class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</span><br><span class="line">      &quot;position&quot; : 3</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;在理&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 5,</span><br><span class="line">      &quot;end_offset&quot; : 7,</span><br><span class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</span><br><span class="line">      &quot;position&quot; : 4</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>ik_max_word</code> 与 <code>ik_smart</code> 的区别：</p><ul><li>ik_max_word: 会将文本做最细粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,中华人民,中华,华人,人民共和国,人民,人,民,共和国,共和,和,国国,国歌”，会穷尽各种可能的组合，适合 Term Query；</li><li>ik_smart: 会做最粗粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,国歌”，适合 Phrase Query。</li></ul><p>Term Query 与 Phrase Query 的区别：<br>Term Query，表示查询时，将查询的词分词之后，他们之间关系是 OR 的关系，例如请求为<code>GET /movies/_search?q=title:(Beautiful Mind)</code>，意思就是查询 title 中包括 Beautiful 或者 Mind<br>Phrase Query 表示查询时他们是一个整体短语，需要用引号包起来，例如请求为 <code>GET /movies/_search?q=title:&quot;Beautiful Mind&quot;</code></p><p>综上，创建索引的时候可以使用 ik_max_word，查询的时候使用 ik_smart，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 创建索引的同时指定 mapping</span><br><span class="line">PUT /ik_index</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">        &quot;properties&quot;: &#123;</span><br><span class="line">            # 字段</span><br><span class="line">            &quot;content&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">                &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">                &quot;search_analyzer&quot;: &quot;ik_smart&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li><a href="https://github.com/microbun/elasticsearch-thulac-plugin" target="_blank" rel="noopener">THULAC</a> 清华大学的一套中文分词器，<a href="http://thulac.thunlp.org/" target="_blank" rel="noopener">官网主页</a></li></ul><h2 id="Search-API"><a href="#Search-API" class="headerlink" title="Search API"></a>Search API</h2><p>ES 的搜索可以分为两大类：</p><ul><li>URI Search：在 URL 中使用查询参数</li><li>Request Body Search：使用 ES 提供的，基于 JSON 格式的更加完备的 Query Domain Specific Language（DSL）</li></ul><h3 id="指定查询的索引"><a href="#指定查询的索引" class="headerlink" title="指定查询的索引"></a>指定查询的索引</h3><table><thead><tr><th>语法</th><th>范围</th></tr></thead><tbody><tr><td>/<em>search</em></td><td>集群上所有的索引</td></tr><tr><td>/index1/_search</td><td>查询索引 index1</td></tr><tr><td>/index1,index2/_search</td><td>查询索引 index1 和index2</td></tr><tr><td>/index*/_search</td><td>查询以 index 开头的索引</td></tr></tbody></table><h3 id="URI-查询"><a href="#URI-查询" class="headerlink" title="URI 查询"></a>URI 查询</h3><ul><li>使用 <code>q</code> 指定查询字符串</li><li><code>query string syntax</code> KV 键值对</li></ul><p>示例：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET "http://localhost:9200/kibana_sample_data_ecommerce/_search?q=customer_first_name:Eddie"</span><br></pre></td></tr></table></figure></p><p>说明：对索引 <code>kibana_sample_data_ecommerce</code> 中字段 <code>customer_first_name</code> 进行查询，查询的值是 Eddie</p><h3 id="Request-Body-查询"><a href="#Request-Body-查询" class="headerlink" title="Request Body 查询"></a>Request Body 查询</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET "http://localhost:9200/kibana_sample_data_ecommerce/_search" -H 'Content-Type:application/json' -d '</span><br><span class="line">&#123;</span><br><span class="line">  "query":&#123;</span><br><span class="line">    "match_all": &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;'</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>支持 POST 和 GET</li><li><code>_search</code> 表明执行搜索的操作</li><li>查询返回所有的文档</li></ul><h3 id="搜索-Response"><a href="#搜索-Response" class="headerlink" title="搜索 Response"></a>搜索 Response</h3><p>搜索结果如何看懂，示例：</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/0MXq8l.png" alt="response"></p><ul><li><code>took</code>：表示花费的时间</li><li><code>total</code>：表示符合条件的文档数</li><li><code>hits</code>：表示结果集，默认前 10 个文档</li><li><code>_index</code>：索引名</li><li><code>_id</code>：文档 ID</li><li><code>_score</code>：相关度评分</li><li><code>_source</code>：文档原始信息</li></ul><h3 id="搜索的相关性-Relevance"><a href="#搜索的相关性-Relevance" class="headerlink" title="搜索的相关性 Relevance"></a>搜索的相关性 Relevance</h3><p>用户关心的是搜索结果的相关性</p><ul><li>是否可以找到所有相关的内容</li><li>有多少不相关的内容被返回了</li><li>文档的打分是否合理</li><li>结合业务需求，平衡结果排名</li></ul><h4 id="衡量相关性"><a href="#衡量相关性" class="headerlink" title="衡量相关性"></a>衡量相关性</h4><p>Information Retrieval</p><ul><li>Precision 查准率：召回的结果集中，正确结果的比例</li><li>Recall 查全率：召回结果中的正确结果数占实际全部的正确结果的比例</li><li>Ranking：是否能够按照相关度进行排序？</li></ul><p>比如搜索苹果，搜索出结果一共有 8 条，其中 6 条确实是和苹果有关的，但是实际上数据集中一共有 10 个苹果相关的文档，那么，查准率就是 6/8，查全率就是 6/10。很显然，查准率和查全率我们都希望越高越好！</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/3wr4jV.png" alt="precision recall"></p><h2 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://gitee.com/michael_xiang/images/raw/master/uPic/pexels-andrea-piacquadio-3769697.jpg&quot; alt=&quot;Search&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="ELK" scheme="https://michael728.github.io/categories/ELK/"/>
    
    
      <category term="ELK" scheme="https://michael728.github.io/tags/ELK/"/>
    
      <category term="Search" scheme="https://michael728.github.io/tags/Search/"/>
    
  </entry>
  
  <entry>
    <title>Kibana 学习笔记</title>
    <link href="https://michael728.github.io/2021/02/14/elk-es-kibana/"/>
    <id>https://michael728.github.io/2021/02/14/elk-es-kibana/</id>
    <published>2021-02-14T23:10:57.000Z</published>
    <updated>2021-06-20T15:45:44.497Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/pexels-andrea-piacquadio-3769697.jpg" alt="Search"></p><h2 id="Kibana-安装"><a href="#Kibana-安装" class="headerlink" title="Kibana 安装"></a>Kibana 安装</h2><p>官方文档 <a href="https://www.elastic.co/guide/en/kibana/current/install.html" target="_blank" rel="noopener">Installing Kibana</a> 中提供了多种安装包对应的指导链接！本文就先选择 <a href="https://www.elastic.co/guide/en/kibana/current/targz.html" target="_blank" rel="noopener">tar 包</a>的方式安装。</p><h3 id="下载-Kibana-安装包"><a href="#下载-Kibana-安装包" class="headerlink" title="下载 Kibana 安装包"></a>下载 Kibana 安装包</h3><p>同样，Kibana 在我司镜像站上也有对应的软件包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">https://mirrors.huaweicloud.com/kibana/7.3.2/</span><br><span class="line">wget https://mirrors.huaweicloud.com/kibana/7.3.2/kibana-7.3.2-linux-x86_64.tar.gz</span><br><span class="line">wget https://mirrors.huaweicloud.com/kibana/7.3.2/kibana-7.3.2-linux-x86_64.tar.gz.sha512</span><br><span class="line">shasum -a 512 -c elasticsearch-7.3.2-linux-x86_64.tar.gz.sha512</span><br><span class="line">tar xzf kibana-7.3.2-linux-x86_64.tar.gz</span><br><span class="line">chown -R michael kibana-7.3.2-linux-x86_64</span><br><span class="line">cd kibana-7.3.2-linux-x86_64</span><br></pre></td></tr></table></figure><blockquote><p>Mac 环境，下载的安装包是 kibana-7.3.2-darwin-x86_64.tar.gz。因为我是从华为镜像站下载的，直接运行可能会提示安全告警，运行这样的命令即可去除告警 <code>xattr -d -r com.apple.quarantine kibana-7.3.2-darwin-x86_64</code></p></blockquote><h3 id="配置-Kibana"><a href="#配置-Kibana" class="headerlink" title="配置 Kibana"></a>配置 Kibana</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">egrep -v "^#|^$" config/kibana.yml # 如下内容是修改的配置</span><br><span class="line">server.port: 5601</span><br><span class="line">server.host: "0.0.0.0"</span><br><span class="line">elasticsearch.hosts: ["http://127.0.0.1:9200"]</span><br><span class="line">kibana.index: ".kibana"</span><br></pre></td></tr></table></figure><p>更多配置内容，可以阅读 <a href="https://www.elastic.co/guide/en/kibana/current/settings.html" target="_blank" rel="noopener">Configuring Kibana</a></p><p>Kibana 链接 ES 以后，会把相关的数据写入 <code>.kibana</code> 开头的 index 中。</p><h3 id="运行-Kibana"><a href="#运行-Kibana" class="headerlink" title="运行 Kibana"></a>运行 Kibana</h3><p>如下方式可以实现后台运行，避免 Ctrl+C 终止了程序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup bin/kibana &amp;</span><br></pre></td></tr></table></figure><p>访问：<code>http://127.0.0.1:5601/</code></p><p>这时候可以看到我们之前搭建的集群节点了：</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/Dg7DMe.png" alt="Kiana-ES"></p><h2 id="Dev-Tools"><a href="#Dev-Tools" class="headerlink" title="Dev Tools"></a>Dev Tools</h2><p>Kibana Console 可以执行一些 API 请求，Help 中有相关快捷键的操作说明：</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/5GPJYG.png" alt="Dev Tools"></p><p>快捷键：</p><ul><li><code>Ctrl/Cmd + /</code> API 文档</li></ul><h2 id="Kibana-Plugins"><a href="#Kibana-Plugins" class="headerlink" title="Kibana Plugins"></a>Kibana Plugins</h2><p>安装命令和 ES 类似，提供了如下常用命令：</p><ul><li><code>bin/kibana-plugin install plugin_location</code></li><li><code>bin/kibana-plugin list</code></li></ul><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>Cerebro 可以用来管理查看 ES</p><p>除了上述安装方式之外，还有用 Docker 方式安装的，可以参考：</p><ul><li><a href="https://github.com/onebirdrocks/geektime-ELK/blob/master/part-1/2.3-%E5%9C%A8Docker%E5%AE%B9%E5%99%A8%E4%B8%AD%E8%BF%90%E8%A1%8CElasticsearch%2CKibana%E5%92%8CCerebro/7.x-docker-2-es-instances/docker-compose.yaml" target="_blank" rel="noopener">onebirdrocks/geektime-ELK</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://gitee.com/michael_xiang/images/raw/master/uPic/pexels-andrea-piacquadio-3769697.jpg&quot; alt=&quot;Search&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Kibana-安
      
    
    </summary>
    
      <category term="ELK" scheme="https://michael728.github.io/categories/ELK/"/>
    
    
      <category term="ELK" scheme="https://michael728.github.io/tags/ELK/"/>
    
      <category term="Search" scheme="https://michael728.github.io/tags/Search/"/>
    
  </entry>
  
  <entry>
    <title>安卓手机必备 APP 清单</title>
    <link href="https://michael728.github.io/2021/02/11/digital-products-mobile-app-backup/"/>
    <id>https://michael728.github.io/2021/02/11/digital-products-mobile-app-backup/</id>
    <published>2021-02-11T21:29:08.000Z</published>
    <updated>2021-06-20T15:45:44.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>APP 清单</p><h2 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h2><ul><li>滴答清单</li><li>shadowsocks</li></ul><h2 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h2><ul><li>Fasthub</li><li>多看</li><li>微信阅读</li><li>豆瓣阅读</li><li>开发者头条</li><li>Pocket</li><li>极客时间</li><li>西梅</li><li>译学馆</li></ul><h2 id="摄影"><a href="#摄影" class="headerlink" title="摄影"></a>摄影</h2><ul><li>必剪</li><li>剪映</li><li>Vue Vlog</li><li>美图秀秀</li><li>黄油</li><li>一刻相册</li><li>MIX</li></ul><h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><ul><li>央视频</li><li>QQ 音乐</li><li>KMPlayer</li></ul><h2 id="办公"><a href="#办公" class="headerlink" title="办公"></a>办公</h2><ul><li>BOSS</li><li>拉钩</li><li>QQ 邮箱</li><li>扫描全能王</li><li>白描</li><li>WPS</li><li>个人所得税</li><li>QQ 浏览器</li></ul><h2 id="APP"><a href="#APP" class="headerlink" title="APP"></a>APP</h2><ul><li>酷安</li><li>应用宝</li><li>Play 商店</li><li>APKPure</li></ul><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><ul><li>印象笔记</li></ul><h2 id="智联"><a href="#智联" class="headerlink" title="智联"></a>智联</h2><ul><li>米家</li><li>Andpods</li><li>万能遥控器</li><li>小米 WiFi</li><li>唯乐</li><li>小爱音箱</li><li>乐播投屏</li><li>精臣云打印</li></ul><h2 id="金融"><a href="#金融" class="headerlink" title="金融"></a>金融</h2><ul><li>老虎证券</li><li>货币 Pro</li><li>兴业银行</li><li>动卡空间</li><li>掌上生活</li><li>招商银行</li><li>云闪付</li></ul><h2 id="购物"><a href="#购物" class="headerlink" title="购物"></a>购物</h2><ul><li>饿了么</li><li>拼多多</li><li>严选</li><li>苏宁易购</li><li>小米有品</li><li>悦拜</li><li>一淘</li><li>京粉</li><li>当当</li><li>盒马</li><li>瑞幸</li></ul><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><ul><li>化妆品监管</li><li>食药云搜</li><li>贝壳</li><li>透明家</li><li>浙里办</li><li>丁香医生</li><li>美柚</li><li>网上国网</li></ul><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li>百度网盘</li><li>手机营业厅</li><li>手机助手</li><li>倒数日</li><li>SpeedTest</li><li>QQ同步助手</li><li>一键测速</li><li>QQ 输入法</li><li>AirDroid</li><li>身份验证器</li><li>v2rayNG</li></ul><h2 id="新闻"><a href="#新闻" class="headerlink" title="新闻"></a>新闻</h2><ul><li>学习强国</li></ul><h2 id="出行"><a href="#出行" class="headerlink" title="出行"></a>出行</h2><ul><li>高德</li><li>嘀嗒出行</li><li>哈喽出行</li><li>滴滴出行</li><li>iAdmin</li><li>花小猪</li><li>T3 出行</li><li>携程</li><li>飞猪</li><li>巴士管家</li><li>慧通</li><li>马蜂窝</li><li>穷游</li><li>航旅纵横</li><li>铁路 12306</li></ul><h2 id="社交"><a href="#社交" class="headerlink" title="社交"></a>社交</h2><ul><li>QQ</li><li>订阅号助手</li><li>Telegram</li><li>脉脉</li><li>抖音</li><li>微博</li></ul><h2 id="兴趣"><a href="#兴趣" class="headerlink" title="兴趣"></a>兴趣</h2><ul><li>西窗烛</li><li>活动性</li><li>懂车帝</li><li>汽车之家</li><li>懒饭</li><li>好好住</li></ul><p>## </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;APP 清单&lt;/p&gt;
&lt;h2 id=&quot;效率&quot;&gt;&lt;a href=&quot;#效率&quot; class=&quot;headerlink&quot; title=&quot;效率&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="数码" scheme="https://michael728.github.io/categories/%E6%95%B0%E7%A0%81/"/>
    
    
      <category term="APP" scheme="https://michael728.github.io/tags/APP/"/>
    
  </entry>
  
  <entry>
    <title>IT程序员的装修笔记——软装篇</title>
    <link href="https://michael728.github.io/2021/01/30/life-shopping-soft-decoration/"/>
    <id>https://michael728.github.io/2021/01/30/life-shopping-soft-decoration/</id>
    <published>2021-01-30T21:29:08.000Z</published>
    <updated>2021-06-20T15:45:44.501Z</updated>
    
    <content type="html"><![CDATA[<h2 id="被子"><a href="#被子" class="headerlink" title="被子"></a>被子</h2><h3 id="被子分类"><a href="#被子分类" class="headerlink" title="被子分类"></a>被子分类</h3><ul><li>棉花被：属于植物纤维，价格适中，性价比高。如果想更保暖，往往比较笨重。</li><li>化纤被：人造纤维（聚酯纤维）填充的被子。价格比棉花还便宜，其中最受欢迎的是七孔被。松软，保温效果也不错，比起自然纤维，坚固耐用、抗皱免烫，不像羽绒被一样老爱“掉毛”</li><li>羊毛被</li><li>羽绒被：羽绒取自鹅、鸭身上的绒毛。同样的体积，羽绒被重量只有棉被的三分之一</li><li>蚕丝被：讲究人专用</li></ul><blockquote><p>棉花被导热系数比较低低，所以相对来说比较保暖。但是它升温时间慢，我们需要用自己的体温先去捂热被子。羽绒被，轻盈的羽绒被的重量仅为同体积棉被的1/3、羊毛被的1/2，使用时不会对人体造成压迫感。</p></blockquote><h3 id="品牌"><a href="#品牌" class="headerlink" title="品牌"></a>品牌</h3><ul><li>原装进口品牌：德国peter kohl，110年历史，是欧洲著名的羽绒供应厂家；德国obb royal bed 博登，成立于1900年，hanskruchen成立于1900年，billerbeck betten成立于1921年；奥地利kauffmann，日本西川</li><li>国外品牌+国内代工：澳大利亚的downia、日本的interlagos、英国downland、美国pacific coast、奥地利的SIDANDA</li><li>新国货品牌：网易严选、淘宝心选、京造，除此以外，以前和大型酒店供货的厂商也开始做自己的品牌，例如浙江三星羽绒厂的格兰贝恩</li><li>老牌国货：一类企业，在国内有比较长的历史了，集中分布在安徽、浙江羽绒生产基地。例如安徽鸿润、安徽霞珍、浙江雁皇</li><li>家纺品牌：一般都是跟江苏南通、浙江萧山、安徽等当地的企业进行OEM的定制，比如罗莱、水星、富安娜等家纺品牌</li></ul><p>补充知识：</p><ul><li>OBM：A设计，A生产，A品牌，A销售==工厂自己设计自产自销</li><li>ODM：B设计，B生产，A品牌，A销售==俗称“贴牌”，就是工厂的产品，别人的品牌</li><li>OEM：A设计，B生产，A品牌，A销售==代工，代生产，别人的技术和品牌，工厂只生产<h3 id="如何选择羽绒"><a href="#如何选择羽绒" class="headerlink" title="如何选择羽绒"></a>如何选择羽绒</h3></li></ul><p>常见羽绒的品质排序如下：白鹅绒＞灰鹅绒＞白鸭绒＞灰鸭绒。</p><p>鹅绒比鸭绒的绒多更大、蓬松度也更好。关注常规绒与大朵绒的比列，大朵绒比例高比较好。</p><blockquote><p>逆光看充绒是均匀整齐的、异色绒少、能看到朵朵绒。记住：真正的朵朵绒，在逆光下一定是点点状，而如果暗度差不多，说明里面的很充绒绒丝、碎羽毛多</p></blockquote><p>核心参数指标：</p><ul><li>清洁度：1000+，表示没有任何杂质、细菌的残留（国标是 450mm）</li><li>蓬松度：800+</li><li>含绒量：95% 含绒量就算比较高的</li><li>填充量：</li><li>面料支数：60S，支数越高，不仅意味着面料越细腻光滑，还代表内容物能更好地包裹其中</li></ul><blockquote><p>数据编辑很容易，要有相关检验检疫证明才可靠！</p></blockquote><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li>羽绒和羊毛都可以干洗，但不可以在阳光下暴晒。羽绒和羊毛不需要频繁晾晒，也不可以直接让毒辣的阳光照射。因为高温会让羽毛、羊毛中的油分起变化，产生腐臭味。解决办法：可以选择通风干燥日，把杯子放在阳关直射不到的地方，晾一两个小时就能达到杀菌除湿的效果了。</li><li><p>羽绒被更不能使劲拍打，绒毛也容易断裂成细小的“羽尘”，羽绒保温性能会大幅降低。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3></li><li><p><a href="https://post.smzdm.com/p/a99v9ggo/p19/#comments" target="_blank" rel="noopener">什么值得买/2019鹅绒被值得买 篇二：双十一最全的鹅绒被清单在这里！</a></p></li><li><a href="https://post.smzdm.com/p/a83g3ve0/" target="_blank" rel="noopener">什么值得买/70款鹅绒被实力PK：2020双十一鹅绒被购买攻略</a></li><li><a href="https://post.smzdm.com/p/awxln5gk/" target="_blank" rel="noopener">什么值得买/总抱怨没有深睡眠？可能是你盖错了被子！</a></li><li><a href="https://www.zhihu.com/question/20323695" target="_blank" rel="noopener">ODM 和 OEM 分别是什么？两者有什么本质区别？</a></li><li><a href="https://post.smzdm.com/p/ar07g8xg/" target="_blank" rel="noopener">什么值得买/鹅绒被什么值得买系列 篇八：关于羽绒行业，这次干脆跟你们交个底儿……（附双十二超值好价</a><h2 id="窗帘"><a href="#窗帘" class="headerlink" title="窗帘"></a>窗帘</h2><h3 id="窗帘配色："><a href="#窗帘配色：" class="headerlink" title="窗帘配色："></a>窗帘配色：</h3></li><li>不知道选什么颜色，选纯色无脑灰肯定不会错</li><li>选择与墙面、地板相近或稍深的颜色，整体和谐统一</li><li>选择与软装点缀色相近或相似的颜色，掏钱可爱</li></ul><h3 id="窗帘配色原则："><a href="#窗帘配色原则：" class="headerlink" title="窗帘配色原则："></a>窗帘配色原则：</h3><ul><li>同色系和谐不出错，</li><li>对比色系个性吸睛，红和绿、蓝和橙、黑和白</li><li>上浅下深显层高</li></ul><ol><li>根据墙面颜色：选择和家里大面积颜色同色系的，一般都不会出错，比如选择与墙面颜色相近或稍深的配色，显得整体和谐</li><li>根据地板的颜色：选择和地板颜色相近或稍深的窗帘也都没有问题（但要特别注意，如果你家连墙面带地面都是白色的，窗帘打死也别选白色）</li><li>根据软装的颜色：选择与软装色彩相近或相似的窗帘，整体感显而易见（参考物有沙发、茶几、地毯、床品、床头柜、保证、花瓶、绿植等）</li></ol><p>“白纱＋灰帘”这个神仙组合，一层白纱窗帘，搭配任何明度的灰色布帘，几乎能和所有空间风格完美融合</p><h3 id="窗帘面料"><a href="#窗帘面料" class="headerlink" title="窗帘面料"></a>窗帘面料</h3><ul><li>纯棉布：褪色爱皱“洗一次缩一半”，求你打死别买</li><li>亚麻：窗帘全屋适用，但缩水爱皱又透光。亚麻窗帘适合选择困难星人，在窗帘款式上举棋不定的话，选亚麻一定不会出错</li><li>天鹅绒：卧室需要保护隐私或隔音，选厚一些的窗帘最佳，想低成本装出惊艳效果的，首选天鹅绒</li><li>亚麻或纱帘：客厅、阳台、书房等需要保证充足阳光的空间，选薄质的亚麻或纱帘</li><li>怕光星人追求颜值，可以选“薄帘+遮光帘”双层组合</li><li>高精密遮光布：想遮光又隔热，就买高精密遮光布</li></ul><h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.zhihu.com/question/22923832/answer/942328402" target="_blank" rel="noopener">家居搭配窗帘有什么技巧？ - 住范儿石乐天的回答 - 知乎</a></li></ul><h2 id="新房-Tips"><a href="#新房-Tips" class="headerlink" title="新房 Tips"></a>新房 Tips</h2><h3 id="验房"><a href="#验房" class="headerlink" title="验房"></a>验房</h3><p>目前国内开发商都很强势，都会要求先签字收房再验房，先验后拿需要业主自己去争取。如果只能拿房后验房的话，大家不要着急，有问题也还是开发商的责任，提醒大家在拿房当天物业给你们的房屋确认书签字栏里写一句话：“以本人找的第三方检测公司出具的验房报告为准，房屋有待维修。”后期如果验出大问题，也可以起诉索赔。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;被子&quot;&gt;&lt;a href=&quot;#被子&quot; class=&quot;headerlink&quot; title=&quot;被子&quot;&gt;&lt;/a&gt;被子&lt;/h2&gt;&lt;h3 id=&quot;被子分类&quot;&gt;&lt;a href=&quot;#被子分类&quot; class=&quot;headerlink&quot; title=&quot;被子分类&quot;&gt;&lt;/a&gt;被子分类&lt;/h
      
    
    </summary>
    
      <category term="Life" scheme="https://michael728.github.io/categories/Life/"/>
    
    
      <category term="装修" scheme="https://michael728.github.io/tags/%E8%A3%85%E4%BF%AE/"/>
    
      <category term="购物" scheme="https://michael728.github.io/tags/%E8%B4%AD%E7%89%A9/"/>
    
      <category term="软装" scheme="https://michael728.github.io/tags/%E8%BD%AF%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>IT程序员的装修笔记——实木家具</title>
    <link href="https://michael728.github.io/2020/11/09/life-shopping-wood-furniture/"/>
    <id>https://michael728.github.io/2020/11/09/life-shopping-wood-furniture/</id>
    <published>2020-11-09T21:29:08.000Z</published>
    <updated>2021-06-20T15:45:44.501Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>家具选择上，个人主要喜欢木质家具，摸上去质感舒服。而且，木质家具也比较耐用，记得以前老家那张八仙桌，真是用了很多年，童年的回忆。本文主要就介绍家具的一些选购经验。</p><h2 id="床"><a href="#床" class="headerlink" title="床"></a>床</h2><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://post.smzdm.com/p/ax08wle9/?send_by=3145139953" target="_blank" rel="noopener">什么值得买/大师谈实木家具选购 篇二：实木床的用料、选材、结构、工艺和功能</a></li></ul><h2 id="沙发"><a href="#沙发" class="headerlink" title="沙发"></a>沙发</h2><h2 id="茶几、电视柜"><a href="#茶几、电视柜" class="headerlink" title="茶几、电视柜"></a>茶几、电视柜</h2><h2 id="餐桌"><a href="#餐桌" class="headerlink" title="餐桌"></a>餐桌</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;家具选择上，个人主要喜欢木质家具，摸上去质感舒服。而且，木质家具也比较耐用，记得以前老家那张八仙桌，真是用了很多年，童年的回忆。本文主要就介
      
    
    </summary>
    
      <category term="Life" scheme="https://michael728.github.io/categories/Life/"/>
    
    
      <category term="装修" scheme="https://michael728.github.io/tags/%E8%A3%85%E4%BF%AE/"/>
    
  </entry>
  
  <entry>
    <title>IT程序员的装修笔记——衣柜定制</title>
    <link href="https://michael728.github.io/2020/10/16/life-shoppinmg-closet/"/>
    <id>https://michael728.github.io/2020/10/16/life-shoppinmg-closet/</id>
    <published>2020-10-16T21:29:08.000Z</published>
    <updated>2021-06-20T15:45:44.501Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/pexels-visually-us-1648839.jpg" alt="us"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在考虑家里衣柜定制的事情，发现这个行业真不像买电器那么容易……商家给板材门取的名字真是五花八门，比如生态板、无醛板、禾香板、康纯板、爱格板等等，听着一个比一个高大上！</p><p>经过查阅各种文档、帖子、视频，将了解到的内容做个笔记，方便更多的业主熟悉一下这行业的基本情况，避免踩坑。</p><a id="more"></a><h2 id="环保标准"><a href="#环保标准" class="headerlink" title="环保标准"></a>环保标准</h2><p>先来了解一下板材的环保标准：</p><ul><li>E0：目前国标只对强化复合地板有 E0 级的评定标准，其他木制品只有 E1 和 E2 两个标准</li><li>E1：国标用于室内的标准是 E1 级（0.124mg/m3）</li></ul><blockquote><p>商家宣传里的 E0 级一直是市场炒作并未写进国家标准的。2017年，中国发布《室内装饰装修材料人造板及其制品中甲醛释放限量》（GB18580——2017）中国家标准中无 E0 级标准。因此提个醒，如果最终签合同时，记得要明确是国标 E1。</p></blockquote><p>GB18580——2017 标准链接：<a href="http://www.jianbiaoku.com/webarbs/book/11724/3216471.shtml" target="_blank" rel="noopener">http://www.jianbiaoku.com/webarbs/book/11724/3216471.shtml</a></p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/1EUP6m.png" alt="要求截图"></p><p>补充：所谓 F4 星标准，其实就是日本的 <code>F☆☆☆☆</code> 认证标准。F4 星源于日本农林省的法律法规，是日本国土交通部颁发的证书，它是日本标准环保最高的健康等级，更被认为是国际上最健康的环保标准。如果按照平时的 E1、E0 级标准来看的话，那么 F3 星相当于国家 E0 级标准，建议限制使用面积，F4 星则远高于 F3 星，在使用面积上<strong>无限制</strong>。</p><p>参考：</p><ul><li>百度百科：<a href="https://baike.baidu.com/item/F4%E6%98%9F%E6%A0%87%E5%87%86" target="_blank" rel="noopener">https://baike.baidu.com/item/F4%E6%98%9F%E6%A0%87%E5%87%86</a></li></ul><h2 id="板材介绍"><a href="#板材介绍" class="headerlink" title="板材介绍"></a>板材介绍</h2><p>关于板材的讨论众说纷纭：</p><ul><li>有人对颗粒板一棒子打死，认为它肯定没有常见的多层板、杉木芯板环保……</li><li>有人就认为大品牌用的颗粒板（比如禾香板、康纯板）就一定比多层板更好……</li></ul><p>其实，个人觉得上面那些看法都太绝对！抛开<strong>基材品牌、封边工艺、贴面工艺</strong>直接就否定其他板材类型的做法，要么就是动机不纯、要么就是井底之蛙~</p><p>现实生活中最常见的是，在不靠谱的渠道，消费者花了 E1 板材的价格，实际拿到的是 E2 级别的产品。</p><p>经过阅贴无数，总结一句话：只要确保是可靠品牌的板子，商家可信，封边、贴面工艺先进，合同里明确符合国标 E1 标准，那么，质量都不会差到哪里去！</p><p>先说重点：</p><ul><li>家具的核心不仅仅不在板材，五金也非常重要！</li><li>封边和贴面的工艺水平也不能忽视！</li></ul><h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><p>介绍板材种类之前，先熟悉一下相关名词：</p><ul><li>素板/板芯：一般指从板材供应商直接拿到的基材，没有进行封边、贴面等处理</li><li>贴面：板式家具的贴面主要以贴纸皮、贴木皮、烤漆、水晶板、防火板、模压板为主<ul><li>三聚氰胺纸：色彩丰富，经过了三聚氰胺树脂浸泡，它使得家具板材不易变形、耐腐蚀。缺点是只有平面造型，做不了凹凸效果</li><li>实木贴面：将天然木皮粘在基材的饰面板上，看起来像是实木家具。缺点是不易清洗，过于潮湿易变质</li><li>烤漆饰面：光泽好、防水性好、抗污能力强，易于造型。缺点是怕磕磕碰碰</li><li>防火板饰面：表面色彩丰富、方便加工，保温隔热，缺点是门板为平板，做不了凹凸造型</li><li>水晶板饰面：现代感强烈，其实是 PVC 透明软板，表面贴了游记玻璃板（类似常说的亚克力），成型后的板表面高光、亮丽透明，缺点是不耐磨、容易留下划痕、热胀冷缩易变形</li><li>模压板饰面：模压板表面有一定造型，可加工成各种形状，有高光和哑光两种选择，缺点是价格较贵，以进口品牌为主</li></ul></li><li>封边：无起鼓无开裂。封边不好的有明显的交接线，不整齐。<strong>封边工艺是检验一个品牌做工好坏的细节点。</strong>激光封边是目前一种主流的高水准封边工艺</li></ul><p>参考：</p><ul><li>鲁班园/六大家具贴面材料：<a href="http://www.lubanyuan.cn/jishu/tmfm/3138.html" target="_blank" rel="noopener">http://www.lubanyuan.cn/jishu/tmfm/3138.html</a></li><li>一兜糖/超详细橱柜选购攻略：<a href="http://www.yidoutang.com/guide-83034.html" target="_blank" rel="noopener">http://www.yidoutang.com/guide-83034.html</a></li></ul><blockquote><p>接下来，是我从网上找到的一些关于各类板材的介绍。可能有些描述也不太精确，仅供参考。</p></blockquote><h3 id="密度板"><a href="#密度板" class="headerlink" title="密度板"></a>密度板</h3><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/lYS3oZ.png" alt="密度板"></p><ul><li>材料：以木质纤维或其他植物纤维为原料、加热、加压压制</li><li>优点：<ul><li>结构均匀、性能稳定，易加工</li></ul></li><li>缺点：<ul><li><strong>密度太高，容易开裂，不适合做家具</strong></li><li>不防潮，见水容易发胀</li><li>握钉力差</li></ul></li><li>用途：一般密度板适合做室内装潢、墙板、隔板等</li></ul><h3 id="颗粒板-刨（bao）花板"><a href="#颗粒板-刨（bao）花板" class="headerlink" title="颗粒板/刨（bào）花板"></a>颗粒板/刨（bào）花板</h3><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/9BMPWe.png" alt="颗粒板"></p><ul><li>材料：由木材或其他木质纤维材料制成的碎料+胶水粘剂+压力合成的人造板。</li><li>优点：<ul><li>没有虫眼</li><li>稳定性好、材质均匀</li><li>防潮性能高于生态板</li><li>握钉力强</li><li>质轻</li></ul></li><li>缺点：<ul><li>环保性能比不过多层板（比较的是旧工艺的颗粒板，不绝对）</li></ul></li></ul><p>颗粒板也叫做刨花板。刨花板交叉错落结构，各方向力基本相同，尺寸稳定，厚度大，升级后的 OSB 工艺，甲醛释放更低。现在较火的 OSB 欧松板就是改进后的刨花板。</p><blockquote><p>欧松板就是大片大片的刨花，所谓的定向刨花板，加的 MDI 胶也更加环保</p></blockquote><h3 id="爱格板"><a href="#爱格板" class="headerlink" title="爱格板"></a>爱格板</h3><p>爱格英文名叫 EGGER，是一家创建于 1961 年的奥地利企业。爱格板不是一种特殊的板材，它就是三聚氰胺刨花板！主要是因为它的环保性比较好，在国内才比较有名，称他们的板材为「爱格板」。</p><p>因为有名，所以模仿者众多！消费者花了爱格板的价格，不一定拿到的就是真的爱格板，需要仔细筛选、甄别！希望遇到的商家是一位有良心的商家，而不是只顾赚钱、不顾消费者家庭健康的无良商家。</p><p>W980 在爱格板里的存在更类似于柜体专用，<strong>是爱格板里唯一一个不是激光封边的色号</strong>，一般都会用来做柜体，非要做柜门也可以，但是可能效果没有那么好。W1000 就是很标准的门板，和 U702 等色号一样，大部分人用来做门板。</p><p>下面介绍一下如何查看爱格正规的授权商家：<br>1.登录爱格官网，查看哪些是授权经销商 <a href="https://www.egger.com/shop/zh_MO/about-us/sources-of-supply：" target="_blank" rel="noopener">https://www.egger.com/shop/zh_MO/about-us/sources-of-supply：</a></p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/3bKJz3.png" alt="经销商列表"></p><p>2.访问对应经销商的官网，查看授权客户 <a href="http://www.vigour.net.cn/index.php?c=article&amp;a=type&amp;tid=101：" target="_blank" rel="noopener">http://www.vigour.net.cn/index.php?c=article&amp;a=type&amp;tid=101：</a></p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/ExSpqz.png" alt="授权客户"></p><blockquote><p>看到群主联系的爱格板厂家的  LOGO 了，可以确认他就是一个正规的爱格板授权方。</p></blockquote><h3 id="胶合板"><a href="#胶合板" class="headerlink" title="胶合板"></a>胶合板</h3><p>胶合板是一个<strong>统称</strong>，它有如下常见的几种板材种类。</p><h4 id="大芯板-细木工板"><a href="#大芯板-细木工板" class="headerlink" title="大芯板/细木工板"></a>大芯板/细木工板</h4><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/M0Z2Jk.png" alt="大芯板"></p><ul><li>材料：中间基材（板芯材）为拼接实木（如杉木、杨木等）组成，表面是三聚氰胺贴面</li><li>优点：<ul><li>环保较好，因为生产使用的是杉木等密度较低的实木，加工过程用到胶水较少</li><li>防潮、耐高温</li><li>性价比高</li></ul></li><li>缺点：<ul><li>握钉力不太好</li><li>变形系数大</li></ul></li></ul><h4 id="多层板"><a href="#多层板" class="headerlink" title="多层板"></a>多层板</h4><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/9ZHgPN.png" alt="多层板"></p><ul><li>材料：多层实木加热、加压粘合，表面以实木贴皮等工序制作而成</li><li>优点：<ul><li>环保性能高于颗粒板，低于生态板</li><li>变形小、强度大、结构稳定性好</li><li>握钉力高于颗粒板和生态板</li></ul></li><li>缺点：<ul><li>价格比颗粒板贵</li></ul></li></ul><p>行业背景：</p><ul><li>胶合板九成以上用脲醛树脂，用酚醛树脂是安全，但是贵啊！</li></ul><h4 id="生态板-免漆板"><a href="#生态板-免漆板" class="headerlink" title="生态板/免漆板"></a>生态板/免漆板</h4><p>生态板其实就是饰面板，也叫免漆板，是将带有不同颜色或纹理的纸放入三聚氰胺树脂胶粘剂中浸泡，然后干燥到一定固化程度再贴在人造板材（细木工、刨花板、颗粒板）表面装饰的装饰面板。细木工板表层为树皮（装饰面板）。</p><blockquote><p>在毒奶粉事件中三聚氰胺出名了，但它在板材里其实是很成熟的工艺，不要被它吓退</p></blockquote><p>然而，我们去市场上去买的生态板大多是指大芯板贴三聚氰胺的板，其内芯是用杉木条平铺两面各贴一层薄板而成，板的质量好坏在于杉木条铺的是否密实，两面薄板的材质和厚度。</p><p>为什么市场上买的生态板主要是这种呢？因为只有这种板才适合家装现场木工使用，木工现场使用的大多是小圆盘锯，只有这种板才能锯的动，不会有锯齿痕，不会有大的崩边，像多层板是小锯很难锯动根本锯不直的，颗粒板又会崩边很厉害，密度板是不能用来做柜体的。</p><h3 id="实木指接板"><a href="#实木指接板" class="headerlink" title="实木指接板"></a>实木指接板</h3><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/fdiTgR.png" alt="指接板"></p><h3 id="胶水"><a href="#胶水" class="headerlink" title="胶水"></a>胶水</h3><p>常见的如脲醛树脂、酚醛、三聚氰胺—甲醛胶粘剂等都是含有可游离的甲醛。还有一种胶黏剂原材料，叫异氰酸酯，英文名 MDI。它与前面说过的脲醛树脂相比，最大的优点就是没有游离甲醛，而且高温下也不会产生甲醛；缺点就是比较贵。</p><p>万华集团是中国唯一拥有 MDI 生产技术与能力的企业。他们官网是有提供合作品牌的列表的，可以访问查询：</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/LlRaA7.png" alt="品牌客户"></p><ul><li>万华官网：<a href="https://www.whchem.com/" target="_blank" rel="noopener">https://www.whchem.com/</a></li><li>万华禾香板官网：<a href="http://www.whstby.cn/customer/?page=7" target="_blank" rel="noopener">http://www.whstby.cn/customer/?page=7</a></li></ul><h3 id="板材供应商"><a href="#板材供应商" class="headerlink" title="板材供应商"></a>板材供应商</h3><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/ONwh92.png" alt="标准起草单位"></p><p>看了 <a href="http://www.jianbiaoku.com/webarbs/book/11724/3216471.shtml" target="_blank" rel="noopener">GB18580——2017 标准</a>的文件，发现了这个起草单位列表，我看觉得这应该都是行业龙头吧，应该都是比较可靠的品牌了！</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.xiaohongshu.com/discovery/item/5f54b3ab0000000001003fdb?source=question" target="_blank" rel="noopener">小红书/为大家介绍一下衣柜通用的四种板材如下</a></li><li><a href="https://www.zhihu.com/question/50623779" target="_blank" rel="noopener">知乎/实木颗粒板与多层实木板做柜体如何选择？</a></li><li><a href="http://jiaju.leju.com/shiliu/6642613467230831993.shtml" target="_blank" rel="noopener">石榴家/实木板？颗粒板？生态板？眼花缭乱分不清？看完选家具有谱了</a></li></ul><h2 id="五金"><a href="#五金" class="headerlink" title="五金"></a>五金</h2><p>五金是个值得关注的地方，每天开合柜门等，如果阻尼有问题、生锈、变形等，都会影响使用体验！</p><h3 id="五金小件"><a href="#五金小件" class="headerlink" title="五金小件"></a>五金小件</h3><ul><li>滑轨</li><li>铰链 </li><li>轨道</li><li>拉手</li></ul><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/T7NAwh.png" alt="铰链"></p><h3 id="五金品牌"><a href="#五金品牌" class="headerlink" title="五金品牌"></a>五金品牌</h3><ul><li>海蒂诗/Hettich：德国品牌，官网 <a href="https://web.hettich.com/zh-cn/%E4%B8%BB%E9%A1%B5.jsp" target="_blank" rel="noopener">https://web.hettich.com/zh-cn/%E4%B8%BB%E9%A1%B5.jsp</a></li><li>百隆/Blum：奥地利品牌，官网 <a href="https://www.blum.com/cn/zh/" target="_blank" rel="noopener">https://www.blum.com/cn/zh/</a></li><li>顶固：广东，<a href="https://www.dinggu.net/" target="_blank" rel="noopener">https://www.dinggu.net/</a></li><li>东泰 DTC</li><li>固特：广东</li><li>斯力高：广州</li></ul><blockquote><p>市面上很多百隆铰链用的都是山寨的阻尼器，需要谨防商家使用山寨货！！！</p></blockquote><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ul><li>国产铰链的固定位常见是 4 个螺丝位，而进口的则是 2 个（因为国外常见颗粒板，握钉力强，而国内常用多层板、大芯板等，因此要多用几个螺丝位）</li><li>重量也是评价铰链好坏的一个细节</li></ul><h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><ul><li>什么值得买/铰链都不懂，还瞎选啥家具：<a href="https://post.smzdm.com/p/a83dm9l0/" target="_blank" rel="noopener">https://post.smzdm.com/p/a83dm9l0/</a></li></ul><h2 id="合同签署注意事项"><a href="#合同签署注意事项" class="headerlink" title="合同签署注意事项"></a>合同签署注意事项</h2><ul><li>环保等级签署在合同里</li><li>板材用料、五金品牌，明确签署在合同里</li><li>比如明确注明「材料品牌、环保等级符合合同说明，假一赔十」</li></ul><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>虽然各花入各眼，但是向优秀的设计学习是有效提升审美的途径。</p><h3 id="设计避免踩坑"><a href="#设计避免踩坑" class="headerlink" title="设计避免踩坑"></a>设计避免踩坑</h3><p>定制衣柜我们要避免如下的设计：</p><p>1.框门不同色</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/YBCBjE.png" alt="框门不同色"></p><p>2.门板线条错缝</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/GkkTmk.png" alt="错缝"></p><p>3.白色木纹：要么选纯白色、要么选原木色</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/Sv0wlM.png" alt="白色木纹"></p><p>4.有花纹樱花、有腰线装饰带</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/aw7v4n.png" alt="腰线"></p><p>建议：定制衣柜越低调越好，选择纯白色、纯平门板，百搭。柜子低调，家具高调~</p><p>参考：</p><ul><li><a href="https://mp.weixin.qq.com/s/Zd2KGKfikuTu3X-KidMfYQ" target="_blank" rel="noopener">住范儿/定制柜这6种设计，劝你千万不要做！</a></li></ul><h2 id="一言"><a href="#一言" class="headerlink" title="一言"></a>一言</h2><p>在做笔记的同时发现一些品牌的官网就很与时俱进，比如爱格、百隆、海蒂诗、顶固、兔宝宝，他们官网都启用了 HTTPS 协议，而大多数品牌的官网则还是老旧的 HTTP 协议，比如知名的千年舟……当然，并不是他官网没有与时俱进，就代表它产品就不好。只是想说，细节决定成败，用心维护官网，让我觉得更放心！</p><blockquote><p>最后采用了爱格的板材，一是他们官网确实很可靠，各级经销商都能查到，二是他们板材的口碑确实都挺好~</p></blockquote><p>衣柜定制篇就总结到这儿啦，祝愿小伙伴们都能装修不踩坑！Peace~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://gitee.com/michael_xiang/images/raw/master/uPic/pexels-visually-us-1648839.jpg&quot; alt=&quot;us&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在考虑家里衣柜定制的事情，发现这个行业真不像买电器那么容易……商家给板材门取的名字真是五花八门，比如生态板、无醛板、禾香板、康纯板、爱格板等等，听着一个比一个高大上！&lt;/p&gt;
&lt;p&gt;经过查阅各种文档、帖子、视频，将了解到的内容做个笔记，方便更多的业主熟悉一下这行业的基本情况，避免踩坑。&lt;/p&gt;
    
    </summary>
    
      <category term="Life" scheme="https://michael728.github.io/categories/Life/"/>
    
    
      <category term="装修" scheme="https://michael728.github.io/tags/%E8%A3%85%E4%BF%AE/"/>
    
  </entry>
  
  <entry>
    <title>【转】程序员如何把控自己的职业</title>
    <link href="https://michael728.github.io/2020/10/08/soft-skills-IT/"/>
    <id>https://michael728.github.io/2020/10/08/soft-skills-IT/</id>
    <published>2020-10-08T13:55:08.000Z</published>
    <updated>2021-06-20T15:45:44.501Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/指南针-方向.jpg" alt="方向"></p><blockquote><p>本文转载自 <a href="https://coolshell.cn/articles/20977.html" target="_blank" rel="noopener"> 酷 壳 – CoolShell </a>。</p></blockquote><p>这篇文章的主要内容主要是我今年3月份在腾讯做的直播，主要是想让一些技术人员对世界有一个大体的认识，并且在这个认识下能够有一个好的方法成就自己。而不是在一脸蒙圈的状态下随波逐流，而日益迷茫和焦虑。直播完后，腾讯方面把我的直播形成文字的形式发了出来，我觉得我可以再做一个精编版。所以，有了这篇文章，希望对大家有帮助。</p><a id="more"></a><p>对我来说，在我二十多年的工作经历来看，期间经历了很多技术的更新换代，整个技术模式、业务模式也是一直变来变去，我们这群老程序员成长中所经历的技术比今天的程序员玩的还更杂更多。我罗列一下我学过的，而且还被淘汰掉的技术，大家先感受一下。</p><ul><li>MIS应用开发：FoxPro，PowerBuilder，Delphi</li><li>OA：Lotus Notes，VBScripts</li><li>微软：ODBC/ADO，COM/DCOM，MFC/ATL，J++</li><li>服务器：AIX，HP-UX，SCO Unix</li><li>Web：CGI，ISAPI，SOAP</li><li>RPC：CICS，Tuxedo</li><li>J2EE：Websphere，Weblogic</li><li>DB：Sybase，Informix </li></ul><p>我想说的是，无论过去还是今天，我们这些前浪和你们后浪所面对的技术的挑战和对技术的焦虑感是相似的，我们那个时候不但玩996，还玩封闭开发（就是一周只能回家一天）。当然，唯一好的东西，就是比起今天的程序员来说，我们那个年代没有像微信、微博、知乎，抖音这些巨大消耗你人生的东西，所以，我们的工作、生活和成长都有很效率，不会被打断、喜欢看书、Google还没有被封……当然，那时代没有StackOverlow和Github这样的东西，所以，能完成的东西或质量都一般。</p><p>当然，这里并不是想做一个比较，只是想让大家了解一下两代程序员间的一些问题各有千秋，大同小异。在整个成长过程中，其实有很多东西是相通的，基本上来说，就是下面的三件事——</p><p>第一，如果想要把控技术，应对这个世界的一些变化，需要大致知道这个世界的一些规律和发展趋势，另外还得认识自己，自己到底适合做什么？在这个趋势和规律下属于自己的发挥领域到底是什么？这是我们每个人都需要了解的。</p><p>第二，打牢基础，以不变应万变，不管世界怎样变化，我都能很快适应它。基础的重要程度对于你能够飞多高是相当有影响的，懂原理的人比不懂原理的人能做出来的事情或是能解决的问题完全是两个层级的。</p><p>第三，提升成长的效率，因为现在社会的节奏实在太快了，比二十年前快得太多，技术层出不穷，所以我们的成长也要更有效率。效率并不单指的快，效率是怎么样更有效，是有用功除以总功（参看《加班与效率》），怎么学到更有效的东西，或者怎么更有效学习，是我们需要掌握的另一关键。</p><p>下面是我这多年来的一些认识，希望对你有帮助。</p><h2 id="世界发展趋势"><a href="#世界发展趋势" class="headerlink" title="世界发展趋势"></a>世界发展趋势</h2><p>我个人经历的信息化革命应该分成三个阶段：</p><ul><li>1990年代到2000年，这个时代MB时代，是雅虎、新浪、搜狐、网易门户网站的时代，这个时代就是ISP/ICP互联网提供商，把一些资讯数字化，然后发布到网络上。</li><li>2000年到2010年，这个时代叫GB时代，或是叫多媒体或UGC时代，上网开始变得普遍了，每个人手里的数码设备开始变得多了起来，可以上传照片，可以上传视频，甚至可以在网上做社交。</li><li>2010年到2020年，这个时代叫TB时代，这过去的十年是移动互联网时代，移动互联网只需要手机在线，不需要依靠电脑。因为手机随时在线，所以个人的各种各样的数据始终在被收集，只要用户上网就会产生数据，所以人的行为最终也被数字化了。</li></ul><p>所有的硬件和软件都是跟着需要处理的数据而演进的，我们需要更大的带宽，更大的硬盘，更多的处理器……大到一定时候就只能进入分布式化的技术架构了，再大，数据中心也顶不住了，就会要引入更为分布式的边缘计算了。</p><p>另一方面，从业务上来看，我们可以看到整个世界就在不断地进行数字化，因为，只要数字化了，就可以进行复制传播和计算，只要可以进行计算了，就可以进行数学建模，就可以自动化，只要可以自动化了就可以规模化，只要可能规模化了，就可以改变整个行业。人类的近代史的大趋势基本上都是在解决能源和自动化的事，源源不断的能源是让机器不知疲倦的前提条件，用机器代替牲口，代替人类进行工作是规模化的前提条件。</p><p>所以，技术的演进规律基本是自动化加规模化，从而降低成本，提升效率。这就是为什么世界变得越来越快，人类都快跟不上节奏的原因，主要是整个社会不断被机器、数据所驱动。</p><h2 id="人才需求"><a href="#人才需求" class="headerlink" title="人才需求"></a>人才需求</h2><p>在这个过程中，需要什么样的人？下面是我的一些认识——</p><ul><li>技工，在机器和自动化面前，肯定是需要能够操作机器的技术工人了，这类人是有技术的劳动力。在编程的圈子里俗称“码农”，他们并不是真正的工程师，他们只是电脑程序的操作员，所以，随着技术门槛的下降或是技术形式的变更他可能就会变得越来越不值钱，直到被淘汰掉。</li><li>特种工，这种人是必须了解原理和解决难题的一类人，他们是解决比较难的、特定的一些技术问题。当一种技术被淘汰，他并不容易被淘汰，因为他懂原理，原理就是解决问题的能力，是解决问题的套路和方法。</li><li>工程师，不但是使用技术，还可以把活儿做好，他们认为代码更多的时间是在维护，这些人使用各种各样的手段和各种技术，精益求精地持续不断地提高代码的易读性、扩展性、可维护性和重用性，这个过程似乎永无止境。对于这些有“洁癖”，有“工匠精神”，有“修养”的技术人员，我们称他们为工程师。这种人做事又稳又快，而且可以做出很多称手的工具和方法论。</li><li>再往上是设计师和架构人员，这些人主要是开发一些工具，框架，模式，提升软件开发和维护效率，同时也提升用户体验，和提升稳定性、性能、代码重用等，总的来说就是为了降本增效。这类人的工作降低了技术得到门槛，他们把技术门槛降低了以后，就可以把这个技术普及开来，就可以由广大劳工、技工、特殊工人使用了。</li><li>还有一类人是经理，经理主要是组织团队、完成项目、创造利润。这类人中，即有身先士卒的leader，也有高高在上的boss，但无论怎么样，这些人只不过是为了让一个公司或是一个团队更好组织在一起的“粘合剂”，这类人只有在大公司中才会变成更有价值。</li></ul><p>这就是我总结的世界需要哪些人才，我们了解这些东西以后大概就明白我们现在所处的位置有什么样的问题，我们应该去什么样的地方。</p><h2 id="Google评分卡"><a href="#Google评分卡" class="headerlink" title="Google评分卡"></a>Google评分卡</h2><p>接下来，我们再来看看Google的SRE的自我评分卡：</p><ol start="0"><li>对于相关的技术领域还不熟悉</li><li>可以读懂这个领域的基础知识</li><li>可以实现一些小的改动，清楚基本的原理，并能够在简单的指导下自己找到更多的细节。</li><li>基本精通这个技术领域，完全不需要别人的帮助</li><li>对这个技术领域非常的熟悉和舒适，可以应对和完成所有的日常工作。<ul><li>对于软件领域 – 有能力开发中等规模的程序，能够熟练和掌握并使用所有的语言特性，而不是需要翻书，并且能够找到所有的冷知识。</li><li>对于系统领域 – 掌握网络和系统管理的很多基础知识，并能够掌握一些内核知识以运维一个小型的网络系统，包括恢复、调试和能解决一些不常见的故障。</li></ul></li><li>对于该技术领域有非常底层的了解和深入的技能。</li><li>能够从零开发大规模的程序和系统，掌握底层和内在原理，能够设计和部署大规模的分布式系统架构</li><li>理解并能利用高级技术，以及相关的内在原理，并可以从根本上自动化大量的系统管理和运维工作。</li><li>对于一些边角和晦涩的技术、协议和系统工作原理有很深入的理解和经验。能够设计，部署并负责非常关键以及规模很大的基础设施，并能够构建相应的自动化设施</li><li>能够在该技术领域出一本经典的书。并和标准委员会的人一起工作制定相关的技术标准和方法。</li><li>在该领域写过一本书，被业内尊为专家，并是该技术的发明人。</li></ol><p>SRE需要自评如下这些技术或技能：</p><ul><li>TCP/IP Networking (OSI stack, DNS etc)</li><li>Unix/Linux internals</li><li>Unix/Linux Systems administration</li><li>Algorithms and Data Structures</li><li>C/C++</li><li>Python</li><li>Java</li><li>Perl</li><li>Go</li><li>Shell Scripting (sh, Bash, ksh, csh)</li><li>SQL and/or Database Admin</li><li>Scripting language of your choice (not already mentioned) <strong><strong><strong>_</strong></strong></strong></li><li>People Management</li><li>Project Management</li></ul><p>这个评分卡是面试 Google 前需要候选人对自己的各种技术进行自评，也算是一种技术人员的等级的度量尺，其把技术的能分成 11 个等级，我用颜色把其它成四大层级，希望这个评分卡能够给你一个能力提升的参考标准。</p><h2 id="认识自己"><a href="#认识自己" class="headerlink" title="认识自己"></a>认识自己</h2><p>认识了世界是怎么发展的，也知道技术人员的种类和层级，那么还要了解一下自己，因为如果不了解自己，那么你也无法找到自己的路和适合自己的地方。</p><p>我觉得，一个人要认识自己就需要认识自己的特长、兴趣、热情、擅长等，下面是一个认识自己的标准方法：</p><ul><li>特长。首先你要找得到自己特长。你要认识自己的特长，找到自己的天赋，找到你在DNA里比别人强的东西，就拿你的 DNA 跟别人竞争就好了。所以你要找到自己可以干成的事，找到别人找你请教的事，你身边人找你请教就是说明你有特长。这是找到自己特长非常非常重要，扬长避短。</li><li>兴趣。如果你没有找到自己特长，就找自己有兴趣有热情的东西。什么叫兴趣？兴趣是再难再累都不会放弃的事。如果你遇到困难就会放弃不叫兴趣，那叫叶公好龙。不怕困难，痴迷其中，就算你没有特长，有了这种特质，你也是头部的人才。</li><li>方法。如果你没有特长，没有兴趣和热情就要学方法。这种方法就是要有时间观念，要会做计划，要懂统筹、规划对于做过的事情，犯过的错误多总结，举一反三，喜欢自己找答案，自己探究因果关系，这是一些方法，自己总结一些套路。</li><li>勤奋。如果你没有特长，没有兴趣，也没有方法，你还能做的事就是勤奋，勤奋注定会让你成为一个比较劳累的人，也是很有可能被淘汰的人随着你的年纪越来越大，你的勤奋也会越来越不值钱。因为年轻人会比你更勤奋，比你更勤奋、比你斗志更强，比你能力更强，比你要钱更少的人会出现。勤奋最不值钱，但是只要你勤奋至少能够自食其力。</li></ul><p>以上就是为了应对未来技术变化，作为个人必须要从特长、兴趣、方法一层一层筛选挖掘，如果没有这些你就要努力和勤奋。就只能接受“福报”了。</p><p>从我个人而言，我不算是特别聪明的人，但自认为对技术还是比较感兴趣的，难的我不怕。有很多比较难啃的技术，聪明点的人啃一个月就懂了，我不行，我可能啃半年。但是没有关系，知识都是死的，只要不怕困难总有一天会懂的。最可怕是畏难，为自己找借口，这样就不太好了。</p><h2 id="打好基础"><a href="#打好基础" class="headerlink" title="打好基础"></a>打好基础</h2><p>最前面提到我学的各式各样的被淘汰的技术，会让你感觉很迷茫，或是迷失。但前面也提到了“谷歌评分卡”，在这个评分卡中，我们看到了许多基础原理方面的内容，其实要应对未来的变化，很重要的一点就是无招胜有招，以不变应万变。</p><p>变化都是表面的东西，内在的东西其实并没有太多的变化。理论层面上变得不多，反而形式上的东西今天一个花样，明天一个花样，所以如果要去应对这种变化，就一定要打牢自己的基础，提升内功修养。比如像编程的一些方式和套路，修饰模式原理本质，解耦，提升代码的重用度等。提升代码重用度必须解耦，要跟现实解耦，提升抽象，这些都是一些技术基础。无论用什么语言，都是这么做的。</p><p>打牢基础就可以突破瓶颈，不打牢基础没有办法突破瓶颈。在技术世界不要觉得量变会造成质变，这是不可能的。技术这个东西就像搞建筑砌砖头，砌砖头砌的再多也不可能让你能成为一个架构师的，因为你不懂原理，不懂科学方法，你就不可能成长上去的，就像学数学一样，当你掌握了微积分这种大杀器后，你解题的能力是无所披靡，而微积分这种方式绝对不是你能“量变”出来的。</p><p>所以你必须学习基础的理论知识，如果不学这些基础理论知识，还要学习解题思路和方法，如果你只学在表面，那么当这个技术的形式有变化，就会发现以前学的都没用了，要重头学一遍。掌握技术基础可以让自己找到答案和知识，基础是抽象和归纳，很容易形成进一步的推论。我们学的很多技术实现都逃不脱基础原理，不管是Java，还是其他语言，只要用TCP用的都是相同的原理，逃不出范围，只要抓住原理，举一反三，时间一长了，甚至还可以自己推导答案。对于技术的基础，我会把其它成四类：</p><ul><li>程序语言：语言的原理，类库的实现，编程技术（并发、异步等），编程范式，设计模式……</li><li>系统原理：计算机系统，操作系统，网络协议，数据库原理……</li><li>中间件：消息队列，缓存系统，网关代理，调度系统 ……</li><li>理论知识：算法和数据结构，数据库范式，网络七层模型，分布式系统……</li></ul><p>这些知识其实就是一个计算机科学专业的学生他所要学习的原理，但可惜的是，我们的一些学校教得也很糟糕，不但老师能力不足，而且放着世界上最优秀的教课书不用了，一定要自己写一本。讲也讲不全，还有各种错误，哎……总之，如果你学习用用到的教材不行，那么可以肯定的是你的学习效率一定是很糟糕的。这就是为什么我们大学上完了，还是跟个傻瓜一样，还要在工作中再重新自学。</p><p>不过，就算自学，这些基础技术大概需要四五年的时间堆叠。我工作二十年了，这二十年来基本还是这些原理没变，无论形式怎么变，但是核心永远还是这些，理论创新很难，这是以不变应万变。</p><h2 id="学习效率"><a href="#学习效率" class="headerlink" title="学习效率"></a>学习效率</h2><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/styaeO.png" alt="学习金字塔"></p><p>谈到学习效率，就需要拿出这张学习金字塔的图来了。从图可以看到学习方法分布两层，一种是被动学习，也是浅度学习，听讲，阅读，视听，演示都是在被动学习，而与人讨论，自己动手实践，教授给别人是主动学习。主动学习我们称之为深度学习，如果你不能深度学习，你就不能真正学到东西。这也是你会经常有“学那么多干什么，不用就忘了”，这就是浅度学习的症状了。</p><p>下面，我给出一些我自己觉得不错的学习经验：</p><ol><li>挑选一手知识和信息源。对于学习方法：第一我们一定要到知识源去挑选知识，知识信息源非常关键，二手信息丢失太大了，谭浩强写的书就丢失太多信息了。目前计算机一手知识基本都是国外的，所以英文非常重要。我鼓励大家一定读第一手的资料。如果你英语有问题，至少要看翻译过来，最好是原汁原味翻译的，不要我理解了给你讲那种，那种也是被别人嚼一遍再讲给你你没有体会，是别人带着你，别人的体会会影响你，也许你的体会会比他更好，因为是你自己总结出来的东西，所以知识源很重要。</li><li>注意原理和基础第二要注重基础原理。虽然可以忘记这个技术，但是原理记在心里，我可以徒手实现出来，而且通过原理可以更快学习其他类似的技术。所以原理很重要！当你学会C、C++要学Java和GO都很快。</li><li>使用知识图谱一定要学会使用知识图，把知识结构化。从一个技术关键点开始不断地关联和细化下去，比如：关于TCP协议，首先第一个要记住状态图，怎么建立连接，怎么断连接，状态怎么变迁。TCP没有连接，是靠状态维护连接的。其次，要了解TCP怎么保证可靠性，就是丢包以后怎么重传，重传有哪些技术点。然后，重传会让你联想到拥塞控制，拥塞控制到滑动窗口……。这基本就是TCP的所有东西了，找到关键点，然后顺着这个脉络一点点往下想，通过知识图关联就可以进行顺藤摸瓜。我们不需要记所有知识，那些手册的知识不需要记，你知道在哪里能找到就可以了。你脑子里面要有地图，学一个东西就跟在城市生活一样，闭上眼睛就知道地图，A点到B点怎么去大概方向要知道。我在北京我去广州，广州在南边，我大概坐飞机还是火车要心里有数。。</li><li>学会举一反三。就是用不同方法学一个东西，比如说学TCP协议，看书是一种方法，编程是另外一种方法，还有用做Debug去看的，用不同方法学一个东西会让你更加熟悉，你学一个知识的同时把周边也学了。比如说学前端能不能把HTTP学一下，比如说长连接、短连接，包括hp1、hp2有一些不一样的东西。</li><li>总结和归纳。只有学会总结和归纳，才能形成自己的思维框架、自己的套路、自己的方法论，以后学这个东西应该怎么学。就像学一门新的语言，不管GO语言，还是Rust语言，第一件事情就是了解内存是怎么管理的，数据类型什么样，第二是泛型怎么搞，第三是并发怎么弄。还有一些抽象怎么弄，比如说怎么解耦，怎么实现多态？套路这种东西只有学的多了以后才能形成套路，如果你只学会一门语言不会有套路，你要每年学门语言，不用学多精，你思考这个语言有什么不一样，为什么这个这种有玩法，那个有那种玩法，这些东西思考多了套路方法论就出来了。比如说Windows和Linux有什么不同，Linux和Unix又有什么不同？只有总结自己的框架、套路和方法，这些才永远不会被淘汰。</li><li>实践和坚持。剩下就是多做多练，多坚持，只有实践才会有经验，只有锻炼了才能够把自己的脂肪变没，所以，要把知识变成技能必须练，就像小学生学会加减乘除，还是要演练，必须多做题，题目做得多了，自然掌握得好。要挑选好的知识源，注重原理技术，有一些原理的基础的书太枯燥，但是我告诉你学习这些基础太值得投入时间，搬砖赚几十元不值得，因为赚的是辛苦钱，老了就赚不了，必须要赚更有能力的钱，这是学习投资。</li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>好了，该到这篇文章收尾的时候了，小结一下，如果你想更好的把握时代，提升自己，你需要知道这个时代的趋势是什么，需要什么样的人，这些人需要什么样的能力，这些能力是怎么获得的，投入到基础知识的学习就像“基建”一样，如果基础不好，不能长高，学习能力也是需要适应这个快速时代的重要的基础能力，没有好的学习能力，很快就会掉队被淘汰。</p><p>这些东西，是我从业二十年来的总结和体会，希望对你有用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://gitee.com/michael_xiang/images/raw/master/uPic/指南针-方向.jpg&quot; alt=&quot;方向&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文转载自 &lt;a href=&quot;https://coolshell.cn/articles/20977.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt; 酷 壳 – CoolShell &lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这篇文章的主要内容主要是我今年3月份在腾讯做的直播，主要是想让一些技术人员对世界有一个大体的认识，并且在这个认识下能够有一个好的方法成就自己。而不是在一脸蒙圈的状态下随波逐流，而日益迷茫和焦虑。直播完后，腾讯方面把我的直播形成文字的形式发了出来，我觉得我可以再做一个精编版。所以，有了这篇文章，希望对大家有帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="思考" scheme="https://michael728.github.io/categories/%E6%80%9D%E8%80%83/"/>
    
    
      <category term="思考" scheme="https://michael728.github.io/tags/%E6%80%9D%E8%80%83/"/>
    
      <category term="软技能" scheme="https://michael728.github.io/tags/%E8%BD%AF%E6%8A%80%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>Mac 效率工具必备神器 —— Alfred</title>
    <link href="https://michael728.github.io/2020/09/23/tools-dev-mac-alfred/"/>
    <id>https://michael728.github.io/2020/09/23/tools-dev-mac-alfred/</id>
    <published>2020-09-23T23:05:50.000Z</published>
    <updated>2021-06-20T15:45:44.501Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/w3dQKD.png" alt="Alfred"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://www.alfredapp.com/" target="_blank" rel="noopener">alfred</a> 这款软件称为「神器」真是当之无愧。今天专门总结一下，作为之前 <a href="https://michael728.github.io/2019/04/14/tools-dev-mac/">Mac 配置教程-开发篇</a> 的补充。</p><a id="more"></a><blockquote><p>需要说明的是，如果你发现我介绍的功能无法使用，则代表需要花钱购买它的 Powerpack。麦哥是从淘宝购买的正版永久激活码搞定的，百十块大洋~如果你囊中羞涩，也有一些网站提供了破解版本。关注公众号[Coder魔法院]，回复 Alfred，会提供对应的下载网站（注意：破解版软件往往会有安全风险）。</p></blockquote><h2 id="General-通用设置"><a href="#General-通用设置" class="headerlink" title="General 通用设置"></a>General 通用设置</h2><ul><li><code>Startup</code>：勾选上，这样就能在登录系统时自动启动 Alfred；</li><li><code>Alfred Hotkey</code>： 启动 Alfred 的快捷键，我设置的是双击 Command 键；</li></ul><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/CzLoxh.png" alt="通用设置"></p><h2 id="Alfred-基本功能"><a href="#Alfred-基本功能" class="headerlink" title="Alfred 基本功能"></a>Alfred 基本功能</h2><ul><li><code>/</code>：输入 <code>/</code>，会跳转到系统根目录；</li><li><code>~</code>：输入 <code>~</code>，会进入当前用户的用户目录；</li><li>输入搜索内容后，<code>Enter</code> 按键是直接打开文件，<code>Command + Enter</code>表示打开文件所在文件夹；</li><li><code>Command + L</code> 居中放大显示结果；</li></ul><h3 id="搜索应用"><a href="#搜索应用" class="headerlink" title="搜索应用"></a>搜索应用</h3><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/PD2BnJ.png" alt="搜索应用"></p><h3 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h3><ul><li><code>Find + 文件名</code>：搜索文件，Enter 确认之后，直接跳转到 Finder 中文件所在位置；</li><li><code>Open + 文件名</code>：搜索文件，Enter 确认之后，直接打开该文件；</li></ul><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/FidDNA.png" alt="find"></p><h3 id="内容搜索"><a href="#内容搜索" class="headerlink" title="内容搜索"></a>内容搜索</h3><p>输入 <code>in</code> 命令加空格，以及待搜索的文本，列出磁盘中包含该文本的相关文件：</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/74XFzg.png" alt="in"></p><h2 id="Features-特性功能"><a href="#Features-特性功能" class="headerlink" title="Features 特性功能"></a>Features 特性功能</h2><p>Features 功能很多，这里仅介绍目前个人发现的常用设置。</p><h3 id="Default-Results-默认结果"><a href="#Default-Results-默认结果" class="headerlink" title="Default Results 默认结果"></a>Default Results 默认结果</h3><p>这个菜单项主要是设置 Alfred 搜索结果时，默认从哪些目录搜索出结果。</p><ul><li><code>Essentials</code>：搜索系统偏好设置和联系人信息；</li><li><code>Extras</code>：指定搜索对象，比如文件夹、文档、图片等。如果格式不全，可以点击 <code>Advanced</code> 按钮自定义；</li><li><code>Search Scope</code>：指定搜索范围，哪些路径可以搜；</li></ul><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/HbqAlq.png" alt="Default Results"></p><h3 id="Web-Search-文件搜索"><a href="#Web-Search-文件搜索" class="headerlink" title="Web Search 文件搜索"></a>Web Search 文件搜索</h3><p>该功能非常方便，快捷键启动 Alfred 之后，输入指定网站的关键字，然后输入要搜索的内容，按下 Enter 键之后自动跳转到浏览器对应网站的搜搜结果，一气呵成的搜索体验！</p><p><img src="https://i.loli.net/2020/09/26/9ZCbHyKspqD3OXk.gif" alt="alfred-web-search.gif"></p><p>只需要点击右下角的 <code>Add Custom Search</code> 按钮，即可添加你经常搜索的网站的快捷方式：</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/ad01wm.png" alt="网站搜索"></p><p>日常网站：</p><ul><li>百度：<code>https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;wd={query}</code></li><li>淘宝：<code>https://s.taobao.com/search?q={query}</code></li><li>豆瓣电影：<code>http://movie.douban.com/subject_search?search_text={query}&amp;cat=1002</code></li><li>B 站：<code>http://search.bilibili.com/all?keyword={query}</code></li><li>知乎：<code>https://www.zhihu.com/search?type=content&amp;q={query}</code></li><li>什么值得买：<code>https://search.smzdm.com/?s={query}&amp;v=b</code></li></ul><p>技术网站：</p><ul><li>DuckDuckGo：<code>https://duckduckgo.com/?q={query}</code></li><li>Stackoverflow：<code>http://www.stackoverflow.com/search?q={query}</code></li><li>Github Search：<code>https://github.com/search?utf8=%E2%9C%93&amp;q={query}</code></li><li>MDN：<code>https://developer.mozilla.org/zh-CN/search?q={query}</code></li></ul><h3 id="Web-Bookmarks"><a href="#Web-Bookmarks" class="headerlink" title="Web Bookmarks"></a>Web Bookmarks</h3><p>又是一个非常赞的功能！虽然我浏览器中已经安装了插键可以快速搜索我的书签，但是 Alfred 的作用就是，当浏览器没有打开、你正在做其他工作时想要快速打开你浏览器中的某个书签，这时候你只需要快速启动 Alfred-&gt;搜索书签的关键字-&gt;Enter 打开该书签。又是一气呵成的操作！</p><p><img src="https://i.loli.net/2020/09/26/rZecT87wD6Nm1Hq.gif" alt="alfred-bookmarks-search.gif"></p><p>我设置了一个关键字 <code>bm</code>，寓意 <code>bookmarks</code>，用来表示我目的是搜索书签：</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/33s1ZC.png" alt="bm"></p><blockquote><p>如果遇到权限问题，需要在系统偏好设置中<code>安全性与隐私-&gt;隐私-&gt;完全磁盘访问权限，勾选 Alfred 4.app</code>。接着在 Alfred 中输入 <code>Reload Alfred Cache</code> 后回车，Alfred 重新加载缓存就可以搜索书签</p></blockquote><h3 id="Clipboard-History-剪贴板历史"><a href="#Clipboard-History-剪贴板历史" class="headerlink" title="Clipboard History 剪贴板历史"></a>Clipboard History 剪贴板历史</h3><p>这个功能其实是我掏钱购买它的主要原因之一！在 Windows 上有 Ditto，但是在 Mac 上没有体验足够好的剪贴板历史工具。之前也使用了几个开源免费的剪贴板工具，但是他们有一些细节功能缺失，比如没法搜索剪贴板的历史。</p><p>有了 Alfred 的剪贴板增强，两个场景最常用：</p><ul><li>当你需要大段编辑文字、敲代码时，不需要反复在两个页面复制、切换页面、粘贴……只需要在一个页面将想要复制的内容复制好，然后切换页面，刚刚你复制的历史片段都可以看到，大大提高了文本编辑的效率！</li><li>当你需要快速找到某一天你复制过的片段时，只需要输入关键字在剪贴板历史中搜索即可~</li></ul><p><img src="https://ftp.bmp.ovh/imgs/2020/10/6951139ef4b30949.gif" alt></p><p>这里我把它们都设置为存储 1 个月，同时把打开剪贴板的默认快捷键为 <code>Command + Shift + V</code>：</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/dMbZQX.png" alt="剪贴板设置"></p><ul><li><code>Clear Now</code>：表示立即清空剪贴板的历史</li></ul><h3 id="Snippets-文本片段"><a href="#Snippets-文本片段" class="headerlink" title="Snippets 文本片段"></a>Snippets 文本片段</h3><p>有一些文本是需要反复输入的，比如你的邮箱、QQ号、地址、手机号码、某个网址等信息，亦或者聊天常用语句、表情等等，这些都可以通过 Alfred 来管理，节省输入时间。</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/i0SKPx.png" alt="Snippets"></p><blockquote><p>这个功能很强大，不止描述的那么简单。</p></blockquote><p>Alfred 官网 <a href="https://www.alfredapp.com/extras/snippets/" target="_blank" rel="noopener">Snippets</a> 提供了集合片段集合，下载后双击文件即可导入到 Alfred 中。</p><ul><li>Emoji Pack</li><li>Mac Symbols</li></ul><p>例如，我们有时候编辑文本时经常需要输入 Mac 上的一些按键符号⌘：</p><p><img src="https://i.loli.net/2020/10/03/ndU6wJa5zlIojXB.gif" alt="alfred-snippsets.gif"></p><h3 id="Calculator-计算器"><a href="#Calculator-计算器" class="headerlink" title="Calculator 计算器"></a>Calculator 计算器</h3><p>直接在输入框中输入计算的表达式，例如 <code>15*3</code>，Alfred 会自动计算出结果：</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/Kzzbmw.png" alt="计算结果"></p><p>Advanced 增强计算的功能，支持一些高级计算的表达式，使用时以 <code>=</code> 开头，然后输入表达式即可，例如：<code>=sqrt(9)+abs(-2)</code>。</p><p>支持这些函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sin, cos, tan, log, log2, ln, exp, abs, sqrt, asin, acos, atan, sinh, cosh, tanh, asinh, acosh, atanh, ceil, floor, round, trunc, rint, near, dtor, rtod等</span><br></pre></td></tr></table></figure><h3 id="Dictionary-字典"><a href="#Dictionary-字典" class="headerlink" title="Dictionary 字典"></a>Dictionary 字典</h3><p>输入 <code>define</code> 开头，然后输入查询的单词；</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/C2pSvb.png" alt="define"></p><ul><li><code>Define a word</code>：可以自定义一个关键词来标记你要查询单词了，例如 <code>df</code>。</li></ul><h3 id="System-系统"><a href="#System-系统" class="headerlink" title="System 系统"></a>System 系统</h3><p>这个设置也很实用，通过在 Alfred 中输入一些命令来实现系统的操作，比如输入 <code>Empty Trash</code> 就是清空垃圾箱。不用担心记不住命令，因为 Alfred 是支持联想的。</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/yJ71ij.png" alt="系统命令"></p><p>常用的有：</p><ul><li><code>emptytrash</code>：清空垃圾箱</li><li><code>lock</code>：锁定屏幕</li><li><code>slppe</code>：休眠</li><li><code>restart</code>：重启</li><li><code>shutdown</code>：关机</li><li><code>eject</code>：快速推出一些外界设备，比如 U 盘、挂载的镜像</li></ul><h3 id="Terminal-终端"><a href="#Terminal-终端" class="headerlink" title="Terminal 终端"></a>Terminal 终端</h3><p>可以直接在 Alfred 中输入 <code>&gt;</code> 之后，指定 shell 命令在 Terminal 中执行。</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/3vvwm7.png" alt="Terminal"></p><p>操作示例：</p><p><img src="https://ftp.bmp.ovh/imgs/2020/10/6855e3274cfd9d1f.gif" alt="example"></p><p>默认情况是在 Mac 自带的 Terminal 中执行命令，如果你想在 Alfred 中执行，则需要通过如下命令自定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">on alfred_script(q)</span><br><span class="line">    tell application "iTerm"</span><br><span class="line">        set _length to count window</span><br><span class="line">    if _length = 0 then</span><br><span class="line">        create window with default profile</span><br><span class="line">    end if</span><br><span class="line">    set aa to (get miniaturized of current window)</span><br><span class="line">    if aa then</span><br><span class="line">        set miniaturized of current window to false</span><br><span class="line">    end if</span><br><span class="line">    set bb to (get visible of current window)</span><br><span class="line">    if bb is false then</span><br><span class="line">        set visible of current window to true</span><br><span class="line">    end if</span><br><span class="line">    set cc to frontmost</span><br><span class="line">    if cc is false then</span><br><span class="line">        activate</span><br><span class="line">    end if</span><br><span class="line">        (*if _length = 0 then*)</span><br><span class="line">            set theResult to current tab of current window</span><br><span class="line">        (*else</span><br><span class="line">            set theResult to (create tab with default profile) of current window</span><br><span class="line">        end if*)</span><br><span class="line">        write session of theResult text q</span><br><span class="line">end tell</span><br><span class="line">end alfred_script</span><br></pre></td></tr></table></figure><h3 id="Previews-预览"><a href="#Previews-预览" class="headerlink" title="Previews 预览"></a>Previews 预览</h3><p>Mac 预览功能也叫 <code>Quick Look</code>。当我们在 Finder 中选中一些文件之后，按住 <code>Space/空格键</code> 键，可以预览文件内容。Alfred 中这个预览功能叫 <code>Preview</code>。当我们在 Alfred 搜到一些文件之后，按一下 <code>Shift</code> 按键，就可以预览对应文件内容。同时，在 Finder 中，也可以通过 Alfred 提供的预览功能预览文件，对应快捷键是 <code>Command+y</code>。</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/wvkfkB.png" alt="预览"></p><h2 id="workflow"><a href="#workflow" class="headerlink" title="workflow"></a>workflow</h2><h3 id="workflow-是什么"><a href="#workflow-是什么" class="headerlink" title="workflow 是什么"></a>workflow 是什么</h3><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/TYaQGU.png" alt="workflow"></p><p>上面截图是 Alfred 官网对 Workflow 的一个描述，简单描述就是，workflow 是一个类似工作流的功能，它可以根据你预设的流程进行一系列的操作来帮你实现一个功能。</p><h3 id="日用推荐"><a href="#日用推荐" class="headerlink" title="日用推荐"></a>日用推荐</h3><p><a href="http://www.packal.org/workflow/numtocny" target="_blank" rel="noopener">NumToCNY</a>：转换数字为人民币金额，<code>cny</code> 然后输入数字即可</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/72kvgD.png" alt="数字转人民币"></p><p><a href="https://github.com/whyliam/whyliam.workflows.youdao" target="_blank" rel="noopener">YoudaoDict</a> 有道翻译</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/irarxg.png" alt="有道翻译"></p><p><a href="https://github.com/mpco/AlfredWorkflow-Recent-Documents/blob/master/README_CN.md" target="_blank" rel="noopener">mpco/AlfredWorkflow-Recent-Documents</a> 快速打开最近访问的文档、文件夹、应用</p><ul><li>输入 rr，列出当前激活应用的最近文档</li><li>输入 rf，列出最近访问的文件夹</li><li>输入 rd，列出最近打开的各种文件</li><li>输入 ra，列出最近打开的应用</li></ul><h3 id="开发推荐"><a href="#开发推荐" class="headerlink" title="开发推荐"></a>开发推荐</h3><p><a href="https://github.com/zenorocha/alfred-workflows/blob/master/ip-address/ip-address.alfredworkflow" target="_blank" rel="noopener">ip address</a>：查看本机 IP</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/ptmUFi.png" alt="IP"></p><p><a href="https://github.com/ilstar/http_status_code" target="_blank" rel="noopener">http_status_code</a>：显示 HTTP 状态码含义</p><ul><li>输入 <code>httpcode + 状态码</code>，按下 Enter 键会跳到对应网站</li></ul><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/a7jRch.png" alt="httpcode"></p><p><a href="https://githb.com/willfarrell/alfred-encode-decode-workflow" target="_blank" rel="noopener">encode</a> 字符编码（encode）、解码（decode），例如有时候一些密码、URL 中有特殊字符则可以使用它</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/eXkrrY.png" alt="encode"></p><h3 id="下载源"><a href="#下载源" class="headerlink" title="下载源"></a>下载源</h3><ul><li>Alfred官宣/workflows：<a href="https://www.alfredapp.com/workflows/" target="_blank" rel="noopener">https://www.alfredapp.com/workflows/</a></li><li>alfredworkflow：<a href="http://www.alfredworkflow.com/" target="_blank" rel="noopener">http://www.alfredworkflow.com/</a></li><li>packal/workflow-list：<a href="http://www.packal.org/workflow-list" target="_blank" rel="noopener">http://www.packal.org/workflow-list</a></li><li>zenorocha/alfred-workflows：<a href="https://github.com/zenorocha/alfred-workflows" target="_blank" rel="noopener">https://github.com/zenorocha/alfred-workflows</a></li><li>github/awesome-alfred-workflows：<a href="https://github.com/alfred-workflows/awesome-alfred-workflows" target="_blank" rel="noopener">https://github.com/alfred-workflows/awesome-alfred-workflows</a></li></ul><blockquote><p>由于网络原因，workflow 可能下载比较慢，麦哥已经将本文提到的一些 workflow 文件打包好了，公众号后台回复 「Alfred」即可获取相关的安装文件。</p></blockquote><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/公众号-二维码-截图.png" alt="公众号"></p><h2 id="Usage-使用统计"><a href="#Usage-使用统计" class="headerlink" title="Usage 使用统计"></a>Usage 使用统计</h2><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/LYoIRO.png" alt="Usage"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://sspai.com/post/43973" target="_blank" rel="noopener">总是在 Mac 「装机必备」看到的搜索利器 Alfred，究竟是怎么用的？| 新手问号</a></li><li><a href="https://hufangyun.com/2018/alfred-workflow-recommend/" target="_blank" rel="noopener">效率神器 Alfred workflow 插件推荐</a></li><li><a href="http://louiszhai.github.io/2018/05/31/alfred/#%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85alfred" target="_blank" rel="noopener">Alfred神器使用手册</a></li><li><a href="https://juejin.im/post/5b0e99436fb9a009e405dbb6" target="_blank" rel="noopener">掘金-Mac 提升开发效率的小工具</a></li><li><a href="https://ihtcboy.com/2020/02/09/2020-02-09_%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84macOS%E7%B3%BB%E5%88%97%EF%BC%9A%E9%AB%98%E6%95%88Alfred%E8%BF%9B%E9%98%B6/" target="_blank" rel="noopener">iHTCboy/程序员的macOS系列：高效Alfred进阶</a> 博主总结很详细，推荐</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://gitee.com/michael_xiang/images/raw/master/uPic/w3dQKD.png&quot; alt=&quot;Alfred&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.alfredapp.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;alfred&lt;/a&gt; 这款软件称为「神器」真是当之无愧。今天专门总结一下，作为之前 &lt;a href=&quot;https://michael728.github.io/2019/04/14/tools-dev-mac/&quot;&gt;Mac 配置教程-开发篇&lt;/a&gt; 的补充。&lt;/p&gt;
    
    </summary>
    
      <category term="ToolsDev" scheme="https://michael728.github.io/categories/ToolsDev/"/>
    
    
      <category term="Tools" scheme="https://michael728.github.io/tags/Tools/"/>
    
      <category term="Mac" scheme="https://michael728.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Java 定时任务框架 Quartz 入门篇</title>
    <link href="https://michael728.github.io/2020/09/06/java-middleware-quartz-basic/"/>
    <id>https://michael728.github.io/2020/09/06/java-middleware-quartz-basic/</id>
    <published>2020-09-06T12:49:10.000Z</published>
    <updated>2021-06-20T15:45:44.501Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Quartz-概念"><a href="#Quartz-概念" class="headerlink" title="Quartz 概念"></a>Quartz 概念</h2><p>Quartz 是任务调度的开源项目。Quartz 就是基于 Java 实现的任务调度框架。</p><ul><li>Quartz 官网地址：<a href="http://www.quartz-scheduler.org" target="_blank" rel="noopener">http://www.quartz-scheduler.org</a></li><li>Quartz 官网 - Examples：<a href="http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/" target="_blank" rel="noopener">http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/</a></li></ul><h2 id="Quartz-运行环境"><a href="#Quartz-运行环境" class="headerlink" title="Quartz 运行环境"></a>Quartz 运行环境</h2><ul><li>Quartz 可以运行嵌入在两一个独立式应用程序</li><li>Quartz 可以在应用程序服务器（或 Sevelet 容器） 内被实例化，并参与事务</li><li>Quartz 可以作为独立的程序运行（其自己的 Java 虚拟机内），可以通过 RMI 使用</li><li>Quartz 可以被实例化，作为独立的项目集群（负载平衡和故障转移功能），用于作业的执行</li></ul><h2 id="Quartz-设计模式"><a href="#Quartz-设计模式" class="headerlink" title="Quartz 设计模式"></a>Quartz 设计模式</h2><ul><li>Buider 模式</li><li>Factory 模式</li><li>组件模式</li><li>链式编程</li></ul><blockquote><p>这里说的设计模式，其实主要是针对 Quartz 使用过程中涉及的一些有用法。比如，通过 Factory 模式，生成调度器。比如，使用 Quartz 涉及了调度器、Job、触发器等组件。比如可通过 Build 方法创建出组件。</p></blockquote><h2 id="Quartz-核心概念"><a href="#Quartz-核心概念" class="headerlink" title="Quartz 核心概念"></a>Quartz 核心概念</h2><h3 id="任务-Job-和-JobDetail"><a href="#任务-Job-和-JobDetail" class="headerlink" title="任务 Job 和 JobDetail"></a>任务 Job 和 JobDetail</h3><p>Job 指的是你想要执行的任务类，每一个 Job 必须实现 <code>org.quartz.job</code> 接口，且只需要实现接口定义的 <code>execute()</code> 方法。在 <code>execute</code> 方法内编写任务的业务逻辑。</p><p>Job 实例在 Quartz 中的生命周期：每次调度器执行 Job 时，它在调用 <code>execute</code> 方法前会创建一个新的 Job 实例，当调用完成之后，关联的 Job 对象实例会被释放，释放的实例会被垃圾回收机制回收。</p><p>JobDetail: JobDetail 为 Job 实例提供许多设置属性，以及 jobDataMap 成员变量属性，它用来存储特定 Job 实例的状态信息，调度器需要借助 JobDetail 对象来添加 Job 实例。</p><h3 id="触发器-Trigger"><a href="#触发器-Trigger" class="headerlink" title="触发器 Trigger"></a>触发器 Trigger</h3><p>Trigger 为你执行任务的触发器，比如你想每天定时 3 点发送一份统计邮件，Trigger 将会设置 3 点进行执行该任务。</p><p>Trigger 主要包含两种：</p><ul><li><code>SimpleTrigger</code></li><li><code>CronTrigger</code></li></ul><h3 id="调度器-Scheduler"><a href="#调度器-Scheduler" class="headerlink" title="调度器 Scheduler"></a>调度器 Scheduler</h3><p>Scheduler 为任务的调度器，它将任务 Job 及 触发器 Trigger 整合起来，负责基于 Trigger 设定的时间来执行 Job。</p><h2 id="Quartz-的体系结构"><a href="#Quartz-的体系结构" class="headerlink" title="Quartz 的体系结构"></a>Quartz 的体系结构</h2><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/cpbdMt.png" alt="cpbdMt"></p><h2 id="Quartz-几个常用-API"><a href="#Quartz-几个常用-API" class="headerlink" title="Quartz 几个常用 API"></a>Quartz 几个常用 API</h2><p>以下是 Quartz 编程 API 几个重要接口，也是 Quartz 的重要组件。</p><ul><li>Scheduler 用于与调度程序交互的主程序接口</li></ul><p>Scheduler 调度程序-任务执行计划表，只有安排进执行计划的任务 Job（通过 schduler.scheduleJob 方法安排进执行计划），当它预先定义的执行时间到了（任务触发器 trigger），该任务才会执行。</p><ul><li>Job 我们预先定义的希望在未来时间能够被调度程序执行的任务类，我们可以自定义。</li><li>JobDetail 使用 jobDetail 来定义定时任务的实例，jobDetail 实例是通过 JobBuilder 类创建的。</li><li>JobDataMap 可以包含不限量的（序列化）的数据对象，在 job 实例执行的时候，可以使用其中的数据。JobDataMap 是 Java Map 接口的一个实现，额外增加了一些便于存取基本类型的数据方法。</li><li>Trigger 触发器，Trigger 对象是用来触发执行 Job 的。当调度一个 Job 时，我们实例触发器然后调整它的属性来满足 Job 执行的条件。表明任务在什么时候会执行。定义了一个已经被安排的任务将会在什么时候执行的时间条件，比如每 2 秒执行一次。</li><li>JobBuilder 用于声明一个任务实例，也可以定义关于该任务的详情，比如任务名、组名等。这个声明的实例将会作为一个实际执行的任务。</li><li>TriggerBuilder 触发器创造器，用于创建触发器 trigger 实例。</li><li>JobListener、TriggerListener、SchedulerListener 监听器，用于对组件的监听。</li></ul><blockquote><p>注意 Job 和 JobDetail 的区分，Job 是指我们具体的「任务类」。JobDetail 指通过 JobBuilder 类创建出的一个实例，它和 Job 类进行了绑定。</p></blockquote><p>贴一个官网示例片段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// define the job and tie it to our HelloJob class</span></span><br><span class="line">JobDetail job = newJob(HelloJob.class)</span><br><span class="line">    .withIdentity(<span class="string">"job1"</span>, <span class="string">"group1"</span>)</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Trigger the job to run now, and then repeat every 40 seconds</span></span><br><span class="line">Trigger trigger = newTrigger()</span><br><span class="line">    .withIdentity(<span class="string">"trigger1"</span>, <span class="string">"group1"</span>)</span><br><span class="line">    .startNow()</span><br><span class="line">          .withSchedule(simpleSchedule()</span><br><span class="line">            .withIntervalInSeconds(<span class="number">40</span>)</span><br><span class="line">            .repeatForever())</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tell quartz to schedule the job using our trigger</span></span><br><span class="line">scheduler.scheduleJob(job, trigger);</span><br></pre></td></tr></table></figure><h2 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h2><h3 id="引入-Maven-依赖"><a href="#引入-Maven-依赖" class="headerlink" title="引入 Maven 依赖"></a>引入 Maven 依赖</h3><p>在 <a href="https://mvnrepository.com" target="_blank" rel="noopener">https://mvnrepository.com</a> 官网搜索 quartz，选择了最新版本 <a href="https://mvnrepository.com/artifact/org.quartz-scheduler/quartz/2.3.2" target="_blank" rel="noopener">2.3.2</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 核心包 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.quartz-scheduler/quartz --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 工具包 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.quartz-scheduler/quartz-jobs --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz-jobs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>说明：核心依赖是 <code>quartz</code>，而 <code>quartz-jobs</code> 是一个可选依赖，它主要放置了一些 quartz 的工具代码、一些预定义的 job。</p><h3 id="任务类"><a href="#任务类" class="headerlink" title="任务类"></a>任务类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzHelloJob</span> <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        <span class="comment">// 当前时间</span></span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        DateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd:HH:mm:ss"</span>);</span><br><span class="line">        String dateStr = dateFormat.format(date);</span><br><span class="line">        <span class="comment">// 工作内容</span></span><br><span class="line">        System.out.println(<span class="string">"正在进行数据备份任务的定时执行，执行时间："</span> + dateStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主类"><a href="#主类" class="headerlink" title="主类"></a>主类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzHelloScheduler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 调度器 Schduler，从工厂中获取调度器实例</span></span><br><span class="line">        Scheduler stdScheduler = StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 任务实例 JobDetail</span></span><br><span class="line">        <span class="comment">// 参数 1：任务的名称；参数 2：任务组的名称</span></span><br><span class="line">        JobDetail jobDetail = JobBuilder.newJob(QuartzHelloJob.class)</span><br><span class="line">                .withIdentity(<span class="string">"job1"</span>, <span class="string">"jobGroup1"</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 触发器 Trigger</span></span><br><span class="line">        <span class="comment">// 参数 1：触发器的名称；参数 2：触发器组的名称</span></span><br><span class="line">        Trigger trigger = TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">"trigger1"</span>, <span class="string">"triggerGroup1"</span>)</span><br><span class="line">                .withSchedule(SimpleScheduleBuilder.simpleSchedule().repeatSecondlyForever(<span class="number">5</span>))</span><br><span class="line">                .startNow()</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 通过调度器将触发器与任务实例关联，保证按照触发器定义的条件执行任务</span></span><br><span class="line">        stdScheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 启动</span></span><br><span class="line">        stdScheduler.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行主类，结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">正在进行数据备份任务的定时执行，执行时间：2020-09-06:17:45:56</span><br><span class="line">正在进行数据备份任务的定时执行，执行时间：2020-09-06:17:46:01</span><br><span class="line">正在进行数据备份任务的定时执行，执行时间：2020-09-06:17:46:06</span><br><span class="line">正在进行数据备份任务的定时执行，执行时间：2020-09-06:17:46:11</span><br></pre></td></tr></table></figure><p>可以看到控制台果然每隔 5 秒就会有输出内容。</p><h2 id="概念扩展"><a href="#概念扩展" class="headerlink" title="概念扩展"></a>概念扩展</h2><p>上面介绍过一些核心概念，还有一些概念也比较重要。</p><h3 id="JobExecutionContext-介绍"><a href="#JobExecutionContext-介绍" class="headerlink" title="JobExecutionContext 介绍"></a>JobExecutionContext 介绍</h3><p>当 Scheduler 调用一个 Job 时，会将 <code>JobExecutionContext</code> 传递给 Job 的 <code>execute()</code> 方法。<strong>Job 能通过 <code>JobExecutionContext</code> 对象访问到 Quartz 运行时的环境以及 Job 本身的详细数据。</strong></p><h3 id="JobDataMap-介绍"><a href="#JobDataMap-介绍" class="headerlink" title="JobDataMap 介绍"></a>JobDataMap 介绍</h3><ul><li>在进行任务调度时，JobDataMap 存储在 JobExecutionContext 中，非常方便获取；</li><li>JobDataMap 可以用来装载任何可序列化的数据对象，当 Job 实例对象执行时，这些参数对象会传递给它；</li><li>JobDataMap 实现了 JDK 的 Map 接口，并且添加了非常方便的方法用来存取基本数据类型；</li></ul><p>主类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 任务实例 JobDetail</span></span><br><span class="line"><span class="comment">// 参数 1：任务的名称；参数 2：任务组的名称</span></span><br><span class="line">JobDetail jobDetail = JobBuilder.newJob(QuartzHelloJob.class)</span><br><span class="line">        .withIdentity(<span class="string">"job1"</span>, <span class="string">"jobGroup1"</span>)</span><br><span class="line">        .usingJobData(<span class="string">"message"</span>, <span class="string">"job message"</span>) <span class="comment">// 传参</span></span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure><p>Job 实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JobDataMap 传值</span></span><br><span class="line">JobDataMap jobDataMap1 = jobExecutionContext.getJobDetail().getJobDataMap();</span><br><span class="line">System.out.println(<span class="string">"任务数据的参数值："</span> + jobDataMap1.get(<span class="string">"message"</span>));</span><br></pre></td></tr></table></figure><p>还有一个用法，在 Job 实现类中添加 <code>setter</code> 方法对应 JobDataMap 的键，Quartz 框架默认的 jobFactory 实现类在初始化 Job 实例对象时会自动地调用这些 <code>setter</code> 方法。这样的好处是，你可以在 Job 实现类中方便地使用成员变量，而不用像上面那种方式去取值。</p><div class="note warning no-icon">            <p>注意点：如果遇到同名的 key，Trigger 中的 key 对应的值会覆盖 JobDetail 中的值。</p>          </div><h3 id="有状态-Job-和无状态的-Job"><a href="#有状态-Job-和无状态的-Job" class="headerlink" title="有状态 Job 和无状态的 Job"></a>有状态 Job 和无状态的 Job</h3><ul><li>有状态 Job 可以理解为，多次 Job 调用期间可以持有一些状态信息，这些状态信息存储在 JobDataMap 中。</li><li>默认的无状态的 Job 每次调用时都会创建一个新的 JobDataMap。</li></ul><p><code>@PersisJobDataAfterExecution</code> 注解的使用在 Job 任务类上，多次 Job 实例被调用期间，可以持有一些状态信息，比如可以实现 count 的累加。</p><h2 id="Trigger-介绍"><a href="#Trigger-介绍" class="headerlink" title="Trigger 介绍"></a>Trigger 介绍</h2><p>Quartz 有一些不同的触发器类型，使用最多的是 <code>SimpleTrigger</code> 和 <code>CronTrigger</code></p><ul><li>jobKey：表示 job 实例的标识，触发器被触发时，该指定的 job 实例被执行（也就是说，除了通过 JobDetail 获取到 job 实例的内容，Trigger 对象也提供了方法获取）；</li><li>startTime：表示触发器的时间表，第一次开始被触发的时间，数据类型是 <code>java.util.Date</code>；</li><li>endTime：表示触发器终止被触发的时间，数据类型也是 <code>java.util.Date</code>；</li></ul><h3 id="SimpleTrigger-触发器"><a href="#SimpleTrigger-触发器" class="headerlink" title="SimpleTrigger 触发器"></a>SimpleTrigger 触发器</h3><p>5 秒重复执行，只执行 3 次，设置结束时间：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Trigger trigger = TriggerBuilder.newTrigger()</span><br><span class="line">        .withIdentity(<span class="string">"trigger1"</span>, <span class="string">"triggerGroup1"</span>)</span><br><span class="line">        .withSchedule(SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                .repeatSecondlyForever(<span class="number">5</span>)</span><br><span class="line">                .withRepeatCount(<span class="number">2</span>))</span><br><span class="line">        .usingJobData(<span class="string">"message"</span>, <span class="string">"simple 触发器"</span>)</span><br><span class="line">        .startNow()</span><br><span class="line">        .endAt(endDate)</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure></p><ul><li>SimpleTrigger 属性有开始时间、结束时间、重复次数和重复时间间隔等</li><li>重复次数的属性值从 0 开始计数</li><li>重复时间间隔属性值必须是长整型的正整数</li><li>如果指定了结束时间属性值，那么，结束时间属性权重优于重复次数属性</li></ul><h3 id="CronTrigger-触发器"><a href="#CronTrigger-触发器" class="headerlink" title="CronTrigger 触发器"></a>CronTrigger 触发器</h3><p>CronTriggers 通常比 SimpleTrigger 更有用，因为它是基于日历的作业触发器。使用 CronTrigger，你可以指定诸如“每周五中午”或者“每个工作日的 9:30”这样的日程来触发 Job 执行。像 SimpleTrigger 一样，CronTrigger 也有一个 startTime 以指定日程从什么时候开始，也有一个（可选） endTime 以指定何时日程不再继续。</p><h4 id="Cron-Expressions-——-Cron-表达式"><a href="#Cron-Expressions-——-Cron-表达式" class="headerlink" title="Cron Expressions —— Cron 表达式"></a>Cron Expressions —— Cron 表达式</h4><p>Cron 表达式被用来配置 <code>CronTrigger</code> 实例。Cron 表达式是一个由 7 个表达式组成的字符串。每个子表达式描述一个单独的日程细节。这些表达式用空格分隔：</p><ol><li>Seconds 秒</li><li>Minutes 分</li><li>Hours 小时</li><li>Day-Of-Month 月中的天，日</li><li>Month 月</li><li>Day-Of-Week 周中的天，周几</li><li>Year 年（可选）</li></ol><table><thead><tr><th>字段</th><th>是否必填</th><th>允许值</th><th>可以出现的运算符</th></tr></thead><tbody><tr><td>秒</td><td>必填</td><td>0 - 59</td><td>/    *    ,   -</td></tr><tr><td>分</td><td>必填</td><td>0 - 59</td><td>/    *    ,   -</td></tr><tr><td>时</td><td>必填</td><td>0 - 23</td><td>/    *    ,   -</td></tr><tr><td>月中的天</td><td>必填</td><td>1 - 31</td><td>/    *    ,   -    ?  L    W    C</td></tr><tr><td>月</td><td>必填</td><td>1 - 12， 也可以用JAN这些缩写</td><td>/    *    ,   -</td></tr><tr><td>星期中的天</td><td>必填</td><td>1 - 7 或者 SUN-SAT，7是星期六， 可以用 WED 这些缩写</td><td>/    *    ,   -     ?  L    C    #</td></tr><tr><td>年份</td><td>非必填</td><td>1970   -   2099</td><td>/    *    ,   -</td></tr></tbody></table><blockquote><p>1 表示周日</p></blockquote><p>运算符的含义：</p><table><thead><tr><th>运算符</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>表示这个字段的每一个值， 可以出现在所有字段中。 如”<em> </em> <em> </em> <em> ？</em>”表示每一秒钟。</td></tr><tr><td>/</td><td>表示值的增量，从一个值开始，<strong>每间隔</strong>多少时间后再次执行，可以出现在所有的字段。如在分钟字段上， 0/15表示从0分开始， 间隔15分钟执行一次， 相当于0,15,30,45</td></tr><tr><td>,</td><td>表示多个值， 可以出现在所有的字段。 如周一周三周五可表示为MON,WED,FRI。</td></tr><tr><td>-</td><td>表示一个区间。如周一到周三可表示为MON-WED。</td></tr><tr><td>?</td><td>表示放弃这个字段设置， 可以出现在月中的天和周中的天这两个字段。如”<em> </em> <em> </em> <em> ？</em>”表示每一秒钟。</td></tr><tr><td>L</td><td>L是 Last 的缩写， 可以出现在月中的天和周中的天这两个字段, 当时含义不一样。 在月中的天这个字段中， L表示这个月的最后一天。 而在周中的天中， 如果L单独出现， 那么就表示7或者SAT即星期六， 如果出现在一个数字的后面， 那么就表示这个月的周几， 如“6L”, 表示这个月的最后一个周五</td></tr><tr><td>W</td><td>W是 week 的缩写， 可以出现在月中的天这个字段， 可以用来指定距离这个时间最近的周几， 周的天在Day of Week字段中指定。</td></tr><tr><td>#</td><td>表示这个月的第几个星期，可以出现在周中的天这个字段。 如 <code>1#3</code> 或 <code>SUN#3</code>， 表示这个月的第 3 个星期日。</td></tr></tbody></table><blockquote><p>月中的天和周中的天<strong>互斥</strong>，只能出现一个问号，例如，不能保证每周二都是 1 号！</p></blockquote><div class="note success no-icon">            <ul><li><code>/</code> 这个符号还是挺常用的，比如在秒的位置，如果你直接 5，那么，就表示第 5 秒执行，但是如果是 <code>0/5</code> 则表示从 0 秒开始，每隔 5 秒！注意不要搞错！</li><li><code>L</code>  和 <code>W</code> 可以一起使用，比如每隔月最后一个周五结算工资</li><li>周字段的英文字母缩写不区分大小写，例如 <code>MON</code> 等价于 <code>mon</code></li><li>在线 Cron 表达式生成器：<a href="https://www.matools.com/cron" target="_blank" rel="noopener">https://www.matools.com/cron</a></li></ul>          </div><p>Cron 表达式示例：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"0 0 10,14,16  * * ?" 每天 10 点、14 点、16 点执行</span><br><span class="line">"0 0/30 9-17 * * ?" 每天 9-17 点，每隔 30 分钟执行一次</span><br><span class="line">"0 0 12 ? * WED" 每周三的 12 点执行</span><br><span class="line">"0 15 10 L * ?" 每月的最后一天的 10 点 15 分执行</span><br><span class="line">"0 15 10 ? * 6#3" 每月的第三个周五 10 点 15 分执行</span><br></pre></td></tr></table></figure></p><h4 id="CronTrigger-示例"><a href="#CronTrigger-示例" class="headerlink" title="CronTrigger 示例"></a>CronTrigger 示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JobDetail jobDetail = JobBuilder.newJob(QuartzHelloJob.class)</span><br><span class="line">        .withIdentity(<span class="string">"job1"</span>, <span class="string">"jobGroup1"</span>)</span><br><span class="line">        .usingJobData(<span class="string">"message"</span>, <span class="string">"job message"</span>)</span><br><span class="line">        .usingJobData(<span class="string">"param"</span>, <span class="string">"setter 传参"</span>)</span><br><span class="line">        .usingJobData(<span class="string">"count"</span>, <span class="number">1</span>)</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure><h2 id="SchedulerFactory"><a href="#SchedulerFactory" class="headerlink" title="SchedulerFactory"></a>SchedulerFactory</h2><ul><li>对于 Job 来说，Trigger 就类似于驱动器，没有触发器来定时驱动作业 Job，Job 就无法运行；</li><li>对于 Job 而言，一个 Job 可以对应多个 Trigger；</li><li>对于 Trigger 而言，一个 Trigger 只能对应一个 Job；</li></ul><blockquote><p>Trigger 和 Job 因此就是「多对一」的关系</p></blockquote><p>Scheduler 的创建方式：<br>（1） StdSchdulerFactory：Quartz 默认的 SchdulerFactory</p><ul><li>使用一组参数（<code>java.util.Properties</code>）来创建和初始化 Quartz 调度器；</li><li>配置参数一般存储在 <code>quartz.properties</code> 文件中；</li><li>调用 <code>getScheduler</code> 方法就能创建和初始化调度器；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">StdSchedulerFactory stdSchedulerFactory = <span class="keyword">new</span> StdSchedulerFactory();</span><br><span class="line">Scheduler stdScheduler = stdSchedulerFactory.getScheduler();</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line">Scheduler stdScheduler = StdSchedulerFactory.getDefaultScheduler();</span><br></pre></td></tr></table></figure><h3 id="将任务和触发器关联"><a href="#将任务和触发器关联" class="headerlink" title="将任务和触发器关联"></a>将任务和触发器关联</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stdScheduler.scheduleJob(jobDetail, trigger);</span><br></pre></td></tr></table></figure><h3 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h3><ul><li>启动任务调度 <code>stdScheduler.start();</code></li><li>调度挂起，即暂停（暂停后，需要再次调用 <code>start()</code> 方法才能启动）: <code>stdSchduler.standby();</code></li><li>调度关闭（关闭之后，重新启动也不行）：<code>stdSchduler.shutdown();</code></li></ul><blockquote><p>shutdown() 方法可以传入一个布尔值，<code>boolean waitForJobsToComplete</code>，用于表示是否等待 Job 执行完毕再结束！ture 表示等待所有正在执行的 Job 执行完毕之后，再关闭 Scheduler。false 表示直接关闭 Scheduler。</p></blockquote><h2 id="quartz-properties-配置"><a href="#quartz-properties-配置" class="headerlink" title="quartz.properties 配置"></a>quartz.properties 配置</h2><p>在项目中搜索该文件，可以在依赖的 Quartz 包下看到默认的配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># Default Properties file for use by StdSchedulerFactory</span><br><span class="line"># to create a Quartz Scheduler Instance, if a different</span><br><span class="line"># properties file is not explicitly specified.</span><br><span class="line">#</span><br><span class="line"># 调度器属性</span><br><span class="line">## instanceName 用来区分特定调度器实例，可以按照功能用途来给调度器起名</span><br><span class="line">org.quartz.scheduler.instanceName: DefaultQuartzScheduler</span><br><span class="line">org.quartz.scheduler.rmi.export: false</span><br><span class="line">org.quartz.scheduler.rmi.proxy: false</span><br><span class="line">org.quartz.scheduler.wrapJobExecutionInUserTransaction: false</span><br><span class="line"></span><br><span class="line"># 线程池属性</span><br><span class="line">org.quartz.threadPool.class: org.quartz.simpl.SimpleThreadPool</span><br><span class="line">## 处理 Job 的线程数，至少为 1，并不是越大越好</span><br><span class="line">org.quartz.threadPool.threadCount: 10</span><br><span class="line">## 线程的优先级，优先级别高的线程比级别低的线程优先得到执行。最小为 1，最大为 10，默认 5</span><br><span class="line">org.quartz.threadPool.threadPriority: 5</span><br><span class="line">org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread: true</span><br><span class="line"></span><br><span class="line"># 作业存储设置</span><br><span class="line">org.quartz.jobStore.misfireThreshold: 60000</span><br><span class="line"></span><br><span class="line">org.quartz.jobStore.class: org.quartz.simpl.RAMJobStore</span><br></pre></td></tr></table></figure></p><p>扩充：</p><ul><li><code>org.quartz.scheduler.instanceId: AUTO</code>  这个值必须所有调度器实例中唯一，作为集群的唯一 key。</li><li><code>org.quartz.spi.ThreadPool.class</code> 一个实现了 <code>org.quartz.spi.ThreadPool</code> 接口的类，Quartz 自带的线程池实现类是 <code>org.quartz.smpl.SimpleThreadPool</code></li></ul><p>如果想自定义配置，那么只需要拷贝上面内容放在项目的 <code>resources</code> 目录下即可。也可以通过编写程序代码操作 <code>quartz.properties</code> 文件的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 通过代码方式配置 quartz</span><br><span class="line">Properties properties = new Properties();</span><br><span class="line">// 可以用工厂类中的常量</span><br><span class="line">properties.put(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, &quot;org.quartz.simpl.SimpleThreadPool&quot;);</span><br><span class="line">properties.put(&quot;org.quartz.threadPool.threadCount&quot;, &quot;10&quot;);</span><br><span class="line"></span><br><span class="line">// 1. 调度器 Schduler，从工厂中获取调度器实例</span><br><span class="line">StdSchedulerFactory stdSchedulerFactory = new StdSchedulerFactory();</span><br><span class="line">stdSchedulerFactory.initialize(properties);</span><br><span class="line">Scheduler stdScheduler = stdSchedulerFactory.getScheduler();</span><br></pre></td></tr></table></figure><blockquote><p>通过 Properties 设置工厂属性的缺点在用硬编码，例如需要修改线程数量，将不得不修改代码，然后又重新编译。因此，不推荐使用。还是使用 <code>quartz.properties</code> 的配置方式方便。</p></blockquote><h2 id="Quartz-监听器"><a href="#Quartz-监听器" class="headerlink" title="Quartz 监听器"></a>Quartz 监听器</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Quartz 监听器用于当任务调度你所关注的事件发生时，能够及时获取这一事件的通知。</p><p>Quartz 监听器主要有 <code>JobListener</code>、<code>TriggerListener</code>、<code>SchedulerListener</code> 三种。先明确两个概念：全局监听器与非全局监听器。二者区别在于：</p><ul><li>全局监听器能够接收到所有的 Job/Trigger 的事件通知</li><li>非全局监听器只能接收到在其上注册的 Job 或 Trigger 事件，不在其上注册的 Job 或 Trigger 则不会进行监听。 </li></ul><p>监听器的用法步骤大致如下：</p><ul><li>新建一个类，实现监听器接口 <code>xxxListener</code>；</li><li>通过监听管理器创建并注册监听器</li></ul><h3 id="JobListener"><a href="#JobListener" class="headerlink" title="JobListener"></a>JobListener</h3><p>任务调度过程中，与任务 Job 相关事件包括：</p><ul><li>Job 开始要执行的提示；</li><li>Job 执行完成的提示；</li></ul><p>JobListener 接口包含几个重要的方法声明：</p><ul><li><code>getName</code>：用于获取 JobListener 的名称；</li><li><code>jobToBeExecuted</code> 方法：Scheduler 在 JobDetail 将要被执行时调用该方法；</li><li><code>jobExecutedVetoed</code> 方法：Scheduler 在 JobDetail 即将被执行，但又被 TriggerListener 否决时调用该方法；</li><li><code>jobWasExecuted</code> 方法：Scheduler 在 JobDetail 被执行之后调用该方法；</li></ul><h3 id="TriggerListener"><a href="#TriggerListener" class="headerlink" title="TriggerListener"></a>TriggerListener</h3><p>TriggerListener 包含几个方法：</p><ul><li><code>getName</code>：获取触发器的名称</li><li><code>triggerFired</code> 方法：当与监听器相关联的 Trigger 被触发，Job 上的 <code>execute()</code> 方法将被执行时，Scheduler 就调用该方法；</li><li><code>vetoJobExecution</code> 方法：在 Trigger 触发后，Job 将要被执行时由 Scheduler 调用这个方法。TriggerListener 给了一个选择去否决 Job 的执行。假如这个方法返回 true，这个 Job 将不会被此次 Trigger 触发而得到执行；</li><li><code>triggerMisfired</code> 方法：Scheduler 调用这个方法是在 Trigger 错过触发时。</li><li><code>triggerComplete</code> 方法：Trigger 被触发并且完成了 Job 的执行时，Scheduler 调用这个方法；</li></ul><h3 id="SchedulerListener"><a href="#SchedulerListener" class="headerlink" title="SchedulerListener"></a>SchedulerListener</h3><p>SchedulerListener 会在 Scheduler 的生命周期中关键事件发生时被调用。与 Scheduler 有关的时间包括：</p><ul><li>增加一个 Job/Trigger</li><li>删除一个 Job/Trigger</li><li>Scheduler 发生错误</li><li>关闭 Scheduler 等</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>完整示例代码：<a href="https://github.com/Michael728/java-middleware-demos/tree/master/quartz-demos" target="_blank" rel="noopener">https://github.com/Michael728/java-middleware-demos/tree/master/quartz-demos</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.bilibili.com/video/BV1St411g72Z?p=5" target="_blank" rel="noopener">B 站/任务调度 Quartz 视频教程全集（21P）| 3 小时从入门到精通</a></li><li><a href="https://www.cnblogs.com/zhanghaoliang/p/7886110.html" target="_blank" rel="noopener">博客园/Quartz的基本使用之入门（2.3.0版本）</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Quartz-概念&quot;&gt;&lt;a href=&quot;#Quartz-概念&quot; class=&quot;headerlink&quot; title=&quot;Quartz 概念&quot;&gt;&lt;/a&gt;Quartz 概念&lt;/h2&gt;&lt;p&gt;Quartz 是任务调度的开源项目。Quartz 就是基于 Java 实现的任务调度
      
    
    </summary>
    
      <category term="Java" scheme="https://michael728.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://michael728.github.io/tags/Java/"/>
    
      <category term="定时任务" scheme="https://michael728.github.io/tags/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    
      <category term="Quartz" scheme="https://michael728.github.io/tags/Quartz/"/>
    
  </entry>
  
  <entry>
    <title>IT程序员的装修笔记——家电选购之冰箱篇</title>
    <link href="https://michael728.github.io/2020/08/21/life-shopping-applicances-fridge/"/>
    <id>https://michael728.github.io/2020/08/21/life-shopping-applicances-fridge/</id>
    <published>2020-08-21T21:29:08.000Z</published>
    <updated>2021-06-20T15:45:44.501Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/frog-1729802_640.jpg" alt="frog-ice-fridge"></p><h2 id="冰箱"><a href="#冰箱" class="headerlink" title="冰箱"></a>冰箱</h2><p>冰箱可谓是现代家庭必不可少的一件电器，最近花时间了解了一下现在冰箱的常见卖点功能。这里总结分享出来，方便其他有需要的同学作参考。重点不是推荐具体型号的冰箱，而是方便大家选购适合自己需求的产品~</p><blockquote><p>不了解不知道，一了解吓一跳。小时候电视剧里出现的高大上的对开门大冰箱，如今二三千也可以入手！</p></blockquote><a id="more"></a><h2 id="箱门形式"><a href="#箱门形式" class="headerlink" title="箱门形式"></a>箱门形式</h2><p>按照冰箱门类型设计进行划分：</p><ul><li><p>双门冰箱：一般上冷藏，下冷冻，通常无变温室<br><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/cF8LH7.png" alt="双门-图源自网络"></p></li><li><p>三门冰箱：比双门冰箱多了一个中间的变温室，可以调节不同温度使用<br><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/TGy1lp.png" alt="双门-图源自网络"></p></li><li><p>对开门冰箱：体积大、性价比高，缺少变温室<br><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/AeGl35.png" alt="双门-图源自网络"></p></li><li><p>十字对开门冰箱：对开门冰箱的进阶版，分区更为合理，一般也有独立变温室<br><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/msG1fr.png" alt="双门-图源自网络"></p></li><li><p>多门冰箱：有时也称法式多门，一般 4 门起<br><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/5MgKIb.png" alt="双门-图源自网络"></p></li></ul><blockquote><p>假设倾向大容量冰箱，食材管理比较精细化的可以选择多门和十字对开门，粗放式的同学可以选择对开门</p></blockquote><p>变温空间就是指有一块空间，你可以独立指定它的温度模式，适配存储鲜肉、冰镇啤酒、干燥坚果。</p><h2 id="容量"><a href="#容量" class="headerlink" title="容量"></a>容量</h2><p>在空间允许的前提下，建议参考 <code>100~150L/人</code> 的标准，结合家庭食材购买频率，确定容积需求。</p><blockquote><p>正常家庭 250~500L 即可, 500L 以上适合多口之家。毕竟食物还是新鲜的好，没必要囤积太多食品。</p></blockquote><h2 id="放置"><a href="#放置" class="headerlink" title="放置"></a>放置</h2><p>冰箱会要求上、左、右都要留有一定的间隙用于散热，在保证箱门正常开启的前提下，两侧各预留 5cm 左右即可。</p><h2 id="制冷模式"><a href="#制冷模式" class="headerlink" title="制冷模式"></a>制冷模式</h2><ul><li>直冷：通过蒸发器直接直冷，对于蔬果保鲜有利，但是易结冰</li><li>风冷：蒸发器增加风机，有自动除霜效果，现在主流技术，也就是常看见的「风冷无霜」宣传语</li><li>混冷：冷藏直冷（防止蔬果风干）、冷冻风冷（无霜）。高端冰箱会采用，因为其结构稍复杂、成本较高</li></ul><h2 id="压缩机"><a href="#压缩机" class="headerlink" title="压缩机"></a>压缩机</h2><p>美芝、加西贝拉、恩布拉科、扎努西、华意等品牌</p><p>当我在京东咨询客服试图了解一款冰箱的具体压缩机型号时，下面是客服给我的答复：</p><blockquote><p>因根据产品批次不同，选配的压缩机不同，多品牌更利于确保供货，所以具体品牌查询不到哦~</p></blockquote><p>看京东经常也会有核心部件、质保十年的赠品，因此压缩机这块应该不用太在意。</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/a2SKg6.png" alt="质保"></p><h2 id="循环模式"><a href="#循环模式" class="headerlink" title="循环模式"></a>循环模式</h2><ul><li>单循环，就是一个蒸发器，冷风在冰箱里冷藏变温冷冻转一圈再回去。</li><li>双循环，则是两个蒸发器，冷藏和冷冻分别冷风循环，制冷更快，也缓解了串味问题。常常带有「双系统制冷」描述字眼。</li><li>多循环：常见于三开门或多门冰箱，除了冷藏和冷冻各有蒸发器之外，零度区可能也也有单独调节温度。</li></ul><blockquote><p>确认是不是双系统，得向客服咨询！！！因为从描述很难判断，双循环≠双系统！小心被坑~</p></blockquote><p>单循环只有一套制冷系统，即一个蒸发器，制冷剂的流向<code>压缩机-冷凝器-过滤器-毛细管-蒸发器-压机</code>。冷藏室与冷冻室不可单独控制，任何一个间室的制冷都会让另一个间室被迫制冷。</p><p>双系统制冷的优点：</p><ul><li>食材不串味</li><li>控温更精确，不同于单循环的“牵一发而动全身”</li></ul><h2 id="品牌"><a href="#品牌" class="headerlink" title="品牌"></a>品牌</h2><ul><li>欧美：博士、西门子</li><li>日系：松下、东芝</li><li>国产：海尔、美的、海信、容声、美菱</li></ul><blockquote><p>海信、容声目前是一家了，博士西门子合称博西，因为西门子家用电器业务据说被博士收购了</p></blockquote><h2 id="价格记录"><a href="#价格记录" class="headerlink" title="价格记录"></a>价格记录</h2><blockquote><p>此处不是推荐！仅是做一个价格记录的快照，方便日后对比！</p></blockquote><table><thead><tr><th>品牌</th><th>型号</th><th>容量</th><th>长宽高/mm</th><th>上市时间</th><th>价格</th><th>好评度</th><th>质保</th><th>能效（度/天）</th><th>款式</th><th>特点</th></tr></thead><tbody><tr><td>海尔</td><td><a href="https://item.jd.com/100012645766.html" target="_blank" rel="noopener">BCD-545WFPB</a> 单系统</td><td>545L</td><td><code>648*908*1905</code></td><td>2020-4</td><td>4499（20200816）</td><td>99%</td><td>赠品赠送 10 年核心部件质保</td><td>1 级（0.93）</td><td>十字对开门</td><td>变温箱（母婴模式、零度模式、珍品模式）、90°悬停门</td></tr><tr><td>美的</td><td><a href="https://item.jd.com/100012751424.html" target="_blank" rel="noopener">BCD-503WSPZM(E)</a> 双系统</td><td>503L</td><td><code>648*833*1898</code></td><td>202006</td><td>5749（20200816）</td><td>99%</td><td>赠品赠送 10 年核心部件质保</td><td>1 级（0.89）</td><td>十字对开门</td><td>母婴保鲜智能、不容易留指纹、果润保鲜</td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文的目的不是推荐冰箱，而是梳理选购冰箱时涉及到的一些基本概念，有助于帮助大家选择到合适的产品！有些功能不是必选，而是可选。抛开预算、推荐产品就是耍流氓，根据自己的需要、选择适合自己的才是理智的行为！</p><h2 id="一言"><a href="#一言" class="headerlink" title="一言"></a>一言</h2><p>在和京东客服咨询时，发现国产品牌的客服都很热心，周末都提供在线咨询服务到深夜！国产家电的质量和国外品牌的差距并没那么大，有时候没必要盲从，同样的功能，因为品牌溢价，你可能就要多付很多智商税~</p><p>2020 魔幻的一年，国外的月亮不一定就更圆，国货加油！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://mp.weixin.qq.com/s/o6QqwYP-BnrRGWDq1c4Txg" target="_blank" rel="noopener">一兜糖家居APP/拜托，挑冰箱真没那么难！</a></li><li><a href="https://post.smzdm.com/p/a078pm9r/p2/#comments" target="_blank" rel="noopener">什么值得买/装修系列专题｜2020年冰箱选购推荐（6.29更新）</a></li><li><a href="https://zhuanlan.zhihu.com/p/28035403" target="_blank" rel="noopener">知乎/出木衫同学/家电选购终极指南——冰箱篇</a></li><li><a href="https://www.haier.com/guang/guide/20181219_126271.shtml" target="_blank" rel="noopener">海尔官网/冰箱双循环制冷，食材新鲜不串味</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://gitee.com/michael_xiang/images/raw/master/uPic/frog-1729802_640.jpg&quot; alt=&quot;frog-ice-fridge&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;冰箱&quot;&gt;&lt;a href=&quot;#冰箱&quot; class=&quot;headerlink&quot; title=&quot;冰箱&quot;&gt;&lt;/a&gt;冰箱&lt;/h2&gt;&lt;p&gt;冰箱可谓是现代家庭必不可少的一件电器，最近花时间了解了一下现在冰箱的常见卖点功能。这里总结分享出来，方便其他有需要的同学作参考。重点不是推荐具体型号的冰箱，而是方便大家选购适合自己需求的产品~&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不了解不知道，一了解吓一跳。小时候电视剧里出现的高大上的对开门大冰箱，如今二三千也可以入手！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Life" scheme="https://michael728.github.io/categories/Life/"/>
    
    
      <category term="装修" scheme="https://michael728.github.io/tags/%E8%A3%85%E4%BF%AE/"/>
    
      <category term="购物" scheme="https://michael728.github.io/tags/%E8%B4%AD%E7%89%A9/"/>
    
      <category term="家电" scheme="https://michael728.github.io/tags/%E5%AE%B6%E7%94%B5/"/>
    
  </entry>
  
  <entry>
    <title>IT程序员的装修笔记——家电选购之冰箱篇</title>
    <link href="https://michael728.github.io/2020/08/21/life-shopping-network/"/>
    <id>https://michael728.github.io/2020/08/21/life-shopping-network/</id>
    <published>2020-08-21T21:29:08.000Z</published>
    <updated>2021-06-20T15:45:44.501Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="5G-amp-2-4G"><a href="#5G-amp-2-4G" class="headerlink" title="5G &amp; 2.4G"></a>5G &amp; 2.4G</h3><p>wifi 路由器目前主要分为 2.4G 和 5G 两种频率的型号。5G 信号频率高、波长短，而 2.4G 信号频率低、波长长，所以 5G 信号穿过障碍物时衰减更大，穿墙能力比 2.4G 信号弱。那么5G信号有什么优点呢？5G 信号频宽较宽，无线环境比较干净，干扰少，网速稳定，且 5G 可以支持更高的无线速率。</p><blockquote><p>电磁波的物理特性：频率低，则波长越长，衰减越少，也更容易绕过障碍物继续传播。</p></blockquote><p>因此，如果能够配置全屋 WiFi，则理想情况是多覆盖 5G 信号。</p><h3 id="带宽与下载速率"><a href="#带宽与下载速率" class="headerlink" title="带宽与下载速率"></a>带宽与下载速率</h3><p>运营商通常给出的套餐中，经常会听到百兆宽带，但是我们实际使用时的下载速率却到不到百兆，这是为为什么呢？因为二者的单位不一致。</p><p>运营商的单位是 <code>Mbps</code>，下载速率的单位通常是 <code>MBps</code>。 1 Byte = 8 bit，即 1 字节 = 8 位。因此，100兆宽带大约最大的下载速率在 12.5兆/秒左右。</p><h3 id="网线"><a href="#网线" class="headerlink" title="网线"></a>网线</h3><ul><li>五类线（<code>Cat5</code>）的速度最高能达到 100Mb/s，频率能达到100Mhz，所以说五类线可以支持百兆以下的网</li><li>超五类线（<code>Cat5e</code>）的速度最高能达到 1Gb/s（1000Mb/s），频率也是 100Mhz，超五类线可以支持千兆以下的网。在一般的家庭中，传输距离有限，因此，超五类网线也够用了。</li><li>六类线（<code>Cat6</code>）的速度最高能达到 10Gb/s，频率是 250Mhz，六类线可以支持万兆网，主要用于万兆局域网等</li></ul><blockquote><p>需要注意网线水晶头接了几根芯，详情阅读 <a href="https://jingyan.baidu.com/article/cb5d6105aa8e40005d2fe04f.html" target="_blank" rel="noopener">网线的四芯接法以及八芯接法</a></p></blockquote><h3 id="POE"><a href="#POE" class="headerlink" title="POE"></a>POE</h3><p>POE(Power Over Ethernet)也被称为基于局域网的供电系统(POL, Power over LAN )或有源以太网( Active Ethernet)，有时也被简称为以太网供电，这是利用现存标准以太网传输电缆的同时传送数据和电功率的最新标准规范</p><blockquote><p>不需要为每个AP专门再拉一条电线供电，直接通过网线就可以实现供电，但是这边还有个注意点就是每个AP都是有额定功率的，所以在后期POE供电功率要大于等于所有AP的功率之和。</p></blockquote><h3 id="AC"><a href="#AC" class="headerlink" title="AC"></a>AC</h3><p>接入控制器（Access Controller或Wireless Access Point Controller），即无线控制器，是一种网络设备，负责管理某个区域内无线网络中的 AP</p><h3 id="AP"><a href="#AP" class="headerlink" title="AP"></a>AP</h3><p>无线访问接入点(WirelessAccessPoint)，即无线接入点，它用于无线网络的无线交换机，也是无线网络的核心。无线AP是移动计算机用户进入有线网络的接入点，主要用于宽带家庭、大楼内部以及园区内部，可以覆盖几十米至上百米。无线AP（又称会话点或存取桥接器）是一个包含很广的名称，它不仅包含单纯性无线接入点（无线AP），同样也是无线路由器（含无线网关、无线网桥）等类设备的统称。</p><h3 id="无线协议"><a href="#无线协议" class="headerlink" title="无线协议"></a>无线协议</h3><p>第一代的 <code>802.11</code> 演变到了 <code>802.11ax</code>。目前主流的 <code>802.11ac</code> 已经重新被命名为 <code>WiFi 5</code>，最新的 <code>802.11ax</code> 为<code>WiFi 6</code></p><h2 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h2><ol><li>路由器不能取代AC，要不就无法控制下面的AP,最重要的是没有POE的功能了，需要加POE的设备，多余；</li><li>如果是需要路由器的使用功能，如DDNS,挂硬盘，去广告等，建议把 AC 挂在路由器下面，路由器作为核心来拨号，AC 控制其他的WIFI,路由器的WIFI关闭（原因是路由器的WIFI在面积很大的基础上没有AP的范围广）</li><li>如果是需要路由器的网络信号，就直接找个合适的位置挂在 AC 下面即可，建议放客厅，但是部分功能就用不了了，因为这样配置路由器就相当于家里的一个AP面板。</li></ol><ul><li><a href="https://www.acwifi.net/category/mesh" target="_blank" rel="noopener">https://www.acwifi.net/category/mesh</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.zhihu.com/question/342250054/answer/800691648" target="_blank" rel="noopener">知乎/家庭组网AP+AC，是否需要一个强力路由器？</a></li><li><a href="https://zhuanlan.zhihu.com/p/172097775" target="_blank" rel="noopener">知乎/小怪的装修笔记-设计篇五（无线网络方案 全屋wifi ap+ac）</a></li><li><a href="https://www.zhihu.com/question/20305170/answer/1132367453" target="_blank" rel="noopener">「五类网线」 和 「六类网线」 有什么区别?</a></li><li><a href="https://zhuanlan.zhihu.com/p/38911036" target="_blank" rel="noopener">四芯网线与八芯网线的区别</a></li><li><a href="https://jingyan.baidu.com/article/636f38bb4cb7f8d6b8461082.html" target="_blank" rel="noopener">四芯双绞线怎么接,四芯网线接法,4根网线如何接</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;h3 id=&quot;5G-amp-2-4G&quot;&gt;&lt;a href=&quot;#5G-amp-2-4G&quot; class=&quot;headerlink&quot; title=&quot;5G 
      
    
    </summary>
    
      <category term="Life" scheme="https://michael728.github.io/categories/Life/"/>
    
    
      <category term="装修" scheme="https://michael728.github.io/tags/%E8%A3%85%E4%BF%AE/"/>
    
      <category term="购物" scheme="https://michael728.github.io/tags/%E8%B4%AD%E7%89%A9/"/>
    
      <category term="家电" scheme="https://michael728.github.io/tags/%E5%AE%B6%E7%94%B5/"/>
    
  </entry>
  
  <entry>
    <title>IT程序员的装修笔记——家电选购之电视机篇</title>
    <link href="https://michael728.github.io/2020/08/16/life-shopping-appliances-TV/"/>
    <id>https://michael728.github.io/2020/08/16/life-shopping-appliances-TV/</id>
    <published>2020-08-16T16:29:08.000Z</published>
    <updated>2021-06-20T15:45:44.501Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/wild-865296_640.jpg" alt="选自Pixabay"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2018 年五月购买的房子，等了 2 年多多了，预计今年年底就要交付了。今天在家看看家电有关的内容，做好笔记。</p><a id="more"></a><h2 id="电视机"><a href="#电视机" class="headerlink" title="电视机"></a>电视机</h2><p>电视机的诉求就是画质好、用的久、接口齐全、与相关的设备兼容性好，比如和游戏主机的互联等。</p><h2 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h2><p>市面上很多假 4K，要注意分辨率要达到 <code>3840*2160</code> 或 <code>4096*2160</code></p><p>真 4K 是 RGB 三色面板，则为，假 4K 是 RGBW 四色面板。</p><h2 id="面板"><a href="#面板" class="headerlink" title="面板"></a>面板</h2><ul><li>VA 面板：对比度更好，适合观看影片电视剧</li><li>IPS 面板：可视度更好，看比赛、玩游戏</li></ul><h2 id="HDR"><a href="#HDR" class="headerlink" title="HDR"></a>HDR</h2><p>光影对比更加真实。一个画面中，亮的的地方可以亮，同时，暗的地方可以依然保持暗。</p><p>要明确是支持 HDR 解码还是支持 <strong>HDR 显示</strong>效果。</p><p>HDR电视标准：</p><ul><li>液晶电视屏幕峰值亮度 1000 Nit以上；</li><li>广色域，大于等于 90%DCI-P3色域；</li><li>支持动态区域背光控制；</li><li>杜比视界/HDR10/HLG至少支持一种；</li></ul><blockquote><p>市售低于5K的电视机支持的HDR自然只是HDR解码，并无太多实际意义</p></blockquote><h2 id="画质芯片"><a href="#画质芯片" class="headerlink" title="画质芯片"></a>画质芯片</h2><ul><li>索尼 X1、XR</li><li>三星 8K 的 AI 芯片</li><li>LG 的 α9、α7</li><li>海信的 Hi-View Pro</li></ul><h2 id="色域"><a href="#色域" class="headerlink" title="色域"></a>色域</h2><p>色域又叫色彩空间，是衡量电视画质的重要标准之一。一般来说色域越广越好，广色域包含更多的色彩表现，能够更好的呈现视频的画质。</p><p>色域标准众多，常用的主要包括 NTSC、sRGB、BT.709、BT.2020 和 DCI-P3，不同标准覆盖的色域范围不同。考虑到NTSC标准相对通用，习惯性会将其他色域标准转化成 NTSC（考虑到不同色域之间并不能完全互相覆盖，这里的转换只是近似）。</p><ul><li>100% sRGB≈72% NTSC；</li><li>100% BT.709≈72% NTSC；</li><li>100% BT.2020≈150% NTSC；</li><li>100% DCI-P3≈96% NTSC。</li></ul><blockquote><p>关注厂商广告中色域标准采用的是哪个。100%色域。可能是采用的 <code>BT.709</code> 标准，它只是近似为72% NTSC标准的色域表现</p></blockquote><p>关键其实是色彩管理系统！这才是厂家核心技术的护城河~</p><h2 id="背光方式"><a href="#背光方式" class="headerlink" title="背光方式"></a>背光方式</h2><ul><li>直下式</li></ul><h2 id="运动补偿"><a href="#运动补偿" class="headerlink" title="运动补偿"></a>运动补偿</h2><p>运动补偿功能（多数厂家叫MEMC，SONY的叫Motion Flow）</p><h2 id="屏幕刷新率"><a href="#屏幕刷新率" class="headerlink" title="屏幕刷新率"></a>屏幕刷新率</h2><p>屏幕刷新率表示电视在一秒钟能刷新的图片数量。刷新率越高刷新的照片越多，电视画面就越流畅。目前大多数电视屏幕刷新率都是 60Hz，高端电视屏幕刷新率可以达到 120Hz。高刷新率配合 MEMC 技术，可以带来更加流畅的画面体验。</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li>HDMI 1.4 = 10.2 Gbps</li><li>HDMI 2.0 = 18 Gbps</li></ul><p>如果没有上面这种接口，大概率无法播放 4K 片源</p><h2 id="蓝牙"><a href="#蓝牙" class="headerlink" title="蓝牙"></a>蓝牙</h2><p>智能电视蓝牙功能有用，搭配游戏手柄、蓝牙音箱使用十分方便，同时看电视无法外放声音的时候可以使用蓝牙耳机。</p><h2 id="视频格式"><a href="#视频格式" class="headerlink" title="视频格式"></a>视频格式</h2><ul><li>H.265+ 视频格式，为 4K 而生的编码格式</li></ul><h2 id="选购"><a href="#选购" class="headerlink" title="选购"></a>选购</h2><h3 id="索尼"><a href="#索尼" class="headerlink" title="索尼"></a>索尼</h3><p>索尼：</p><ul><li>OLED 有 A9、A8 两个系列；</li><li>液晶电视 9000 系列高端、8000 系列中端、7000 系列入门级；</li></ul><p>每个系列后面有字幕代表年份，比如 Z9G，G 代表 2019 年；F 表示去年机型;</p><p>关注型号：</p><ul><li>X9000H 65 寸，8000，202005 上市，安卓 9.0，二级能效，蓝牙耳机、4K HDR、4G16G、4 核、x1 芯片、2 个 USB 接口 2.0/3.0，HDMI 2.1 接口、耳机接口、可屏幕发声、特丽魅彩技术、精锐光控、杜比音效、线上线下同款，整机一年，主要部件三年，好评率 99%，<a href="https://www.sonystyle.com.cn/products/bravia/x9000h/kd_65x9000h.html" target="_blank" rel="noopener">官网参数</a></li></ul><blockquote><p>8000H 入门级 4K，刷新率 60HZ 的面板，扬声器也有区别；9500H 芯片是 X1 加强版，精锐光控增加强版、支持远程语音，9500 G 是 2019 年旗舰机型；</p></blockquote><h3 id="三星"><a href="#三星" class="headerlink" title="三星"></a>三星</h3><p>三星主打 QLED 量子点技术，色域很广</p><p>芯片：</p><ul><li>UA 系列，7 系以上，三星自研芯片；</li><li>5-7 系，芯片主频比较低</li><li>5 系以下，使用太长新芯片</li></ul><h3 id="海信"><a href="#海信" class="headerlink" title="海信"></a>海信</h3><ul><li>E 系列是线上型号，线下没有；</li><li>A 系列，线下款；</li><li>U 系列是 ULED 电视；</li><li>带 E 的型号，带远场语音；</li></ul><blockquote><p>选择海信电视，关注是否有 AI 画境芯片或者 ULED 量子点技术或者「信芯」芯片</p></blockquote><p>关注型号：</p><ul><li>E8D 5669 ULED/140%色域/3+ 32G/CPU A73✖️2核+A53✖️2核数/刷新率 60HZ/支持蓝牙耳机</li></ul><h2 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h2><p>在国外这个网站 <a href="https://www.rtings.com/tv/reviews/by-size/size-to-distance-relationship" target="_blank" rel="noopener">rtings/size-to-distance-relationship</a> 有提供关于根据观影距离和视频分别率推荐电视尺寸的工具，非常值得推荐！</p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/2TbUZE.png" alt="2TbUZE"></p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/6fyosV.png" alt="6fyosV"></p><p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/mqIQva.png" alt="mqIQva"></p><ul><li><a href="https://www.haier.com/guang/guide/20180102_126329.shtml" target="_blank" rel="noopener">海尔官网/你真的会选电视尺寸吗?</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.bilibili.com/video/BV1ub411M7Ni/?spm_id_from=333.788.videocard.3" target="_blank" rel="noopener">B站/知电晓春哥/液晶电视选择的坑你踩了几个？屏好不等于电视好，液晶电视选购必看</a> 提到了关注芯片、接口、视频格式等关键因素</li><li><a href="https://www.youtube.com/watch?v=SozJZIWcO5c" target="_blank" rel="noopener">科技狗/油管/【選購指南】2020年4K 電視怎麼選？</a> 更专业的评测，提供很多专业讲解</li><li><a href="https://post.smzdm.com/p/akm7rdw8/" target="_blank" rel="noopener">什么值得买/从参数到推荐：2020年电视机选购指南</a></li><li><a href="https://www.bilibili.com/video/av243373433/" target="_blank" rel="noopener">B站 Wayne的生活/索尼电视2020新品又挤牙膏？快去抢X9500G！SONY 85寸9500G评测 上集</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://gitee.com/michael_xiang/images/raw/master/uPic/wild-865296_640.jpg&quot; alt=&quot;选自Pixabay&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;2018 年五月购买的房子，等了 2 年多多了，预计今年年底就要交付了。今天在家看看家电有关的内容，做好笔记。&lt;/p&gt;
    
    </summary>
    
      <category term="Life" scheme="https://michael728.github.io/categories/Life/"/>
    
    
      <category term="装修" scheme="https://michael728.github.io/tags/%E8%A3%85%E4%BF%AE/"/>
    
      <category term="购物" scheme="https://michael728.github.io/tags/%E8%B4%AD%E7%89%A9/"/>
    
      <category term="家电" scheme="https://michael728.github.io/tags/%E5%AE%B6%E7%94%B5/"/>
    
  </entry>
  
  <entry>
    <title>Java 基础 —— 反射</title>
    <link href="https://michael728.github.io/2020/08/09/java-basic-class-reflect/"/>
    <id>https://michael728.github.io/2020/08/09/java-basic-class-reflect/</id>
    <published>2020-08-09T17:49:10.000Z</published>
    <updated>2021-06-20T15:45:44.497Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/michael_xiang/images/raw/master/uPic/looking-glass-918878_640.jpg" alt="远方"></p><h2 id="通过反射查看类信息"><a href="#通过反射查看类信息" class="headerlink" title="通过反射查看类信息"></a>通过反射查看类信息</h2><p>Java 程序中的许多对象在运行时会出现两种类型：编译时类型和运行时类型。例如：<code>Person p = new Student();</code>，代码会生成一个 p 变量，编译时类型是 Person，运行时类型为 Student。除此之外，有时程序在运行时接收到外部传入的一个编译类型为 Object，但程序又需要调用该对象运行时类型的方法。</p><a id="more"></a><p>未解决这些问题，程序需要运行时发现对象和类的真实信息。有下面两种做法：</p><ol><li>先试用 <code>instanceOf</code> 运算符进行判断，再利用强制类型转换将其转换成运行时类型的变量；</li><li>程序只依靠运行时信息来发现该对象和类的真实信息，这就必须使用「反射」；</li></ol><p>本文就主要是来介绍反射知识点的。</p><h3 id="获得-Class-对象"><a href="#获得-Class-对象" class="headerlink" title="获得 Class 对象"></a>获得 Class 对象</h3><p>之前<a href="https://michael728.github.io/2020/08/07/java-basic-class-load/">文章</a>已经介绍过类加载了，每个类被加载之后，系统会为该类生成一个对应的 Class 对象，通过该 Class 对象就可以访问 JVM 中的这个类。Java 程序中获得 Class 对象有如下三种方式：</p><ol><li>使用 Class 类的 <code>forName(String clazzName)</code> 静态方法。该方法需要传入字符串参数，该字符串参数的值是某个类的「全限定名」（必须是完成包名）。</li><li>调用某个类的 class 属性来获取该类对应的 Class 对象。例如 <code>Person.class</code> 将会返回 Person 类对应的 Class 对象。</li><li>调用某个实例对象的 <code>getClass()</code> 方法。该方法是 <code>java.lang.Object</code> 类中的方法，因此所有 Java 对象都可以调用该方法。</li></ol><p>方式 1 和方式 2 都是直接根据类来获得该类的 Class 对象。大部分时候，应该使用方式 2 来获取指定类的 Class 对象。因为方式 2 有如下优势：</p><ul><li>代码更安全。编译阶段就可以检查需要访问的 Class 对象是否存在；</li><li>程序性能更好。</li></ul><p>获取了 Class 对象之后可以进行的操作就多了，程序可以调用 Class 对象的方法来获得该对对象和对应类的真实信息了。</p><h3 id="从-Class-中获取信息"><a href="#从-Class-中获取信息" class="headerlink" title="从 Class 中获取信息"></a>从 Class 中获取信息</h3><p>Class 类提供了大量的<strong>实例方法</strong>来获取该 Class 对象所对应类的相关信息。下面的方法都可能提供了多个<strong>重载</strong>的版本。</p><h4 id="获取-Class-对象的对应类的构造器"><a href="#获取-Class-对象的对应类的构造器" class="headerlink" title="获取 Class 对象的对应类的构造器"></a>获取 Class 对象的对应类的构造器</h4><ul><li><code>Constructor&lt;T&gt; getConstructor(Class&lt;?&gt; ... parameterTypes)</code>：返回此 Class 对象对应类的、<strong>带指定形参列表</strong> 的 public 构造器；</li><li><code>Constructor&lt;T&gt;[] getConstructors()</code>：返回此 Class 对象对应类的<strong>所有 public</strong> 构造器；</li><li><code>Constructor&lt;T&gt; getDeclaredConstructor(Class&lt;?&gt; ... parameterTypes)</code>：返回此 Class 对象对应类的、<strong>带指定形参列表</strong> 的构造器，与构造器的访问权限无关！</li><li><code>Constructor&lt;T&gt;[] getDeclaredConstructors()</code>：返回此 Class 对象对应类的所有构造器，与构造器的访问权限无关！</li></ul><h4 id="获取-Class-对象的对应类所包含的方法"><a href="#获取-Class-对象的对应类所包含的方法" class="headerlink" title="获取 Class 对象的对应类所包含的方法"></a>获取 Class 对象的对应类所包含的方法</h4><ul><li><code>Method getMethod(String name, Class&lt;?&gt; ... parameterTypes)</code>：返回此 Class 对象对应类的、带指定形参列表的<strong> public 方法</strong></li><li><code>Method[] getMethods()</code>：返回此 Class 对象对应类的<strong>所有 public 方法</strong>；</li><li><code>Method getDeclaredMethod(String name, Class&lt;?&gt; ... parameterTypes)</code>：返回 Class 对象对应类的、带指定形参列表的方法，与方法的访问权限无关！</li><li><code>Method[] getDeclaredMethods()</code>：返回 Class 对象对应类的<strong>全部方法</strong>，与方法的访问权限无关！</li></ul><h4 id="获取-Class-对象的对应类所包含的成员变量"><a href="#获取-Class-对象的对应类所包含的成员变量" class="headerlink" title="获取 Class 对象的对应类所包含的成员变量"></a>获取 Class 对象的对应类所包含的成员变量</h4><ul><li><code>Field getField(String name)</code>：返回此 Class 对象对应类的、指定名称的<strong>public 成员变量</strong>；</li><li><code>Fields[] getFileds()</code>：返回此 Class 对象对应类的<strong>所有 public 成员变量</strong>；</li><li><code>Field getDeclaredField(String name)</code>：返回此 Class 对象对应类的、指定名称的成员变量，与成员变量的访问权限无关！</li><li><code>Fields[] getDeclaredFields()</code>：返回此 Class 对象对应类的全部成员变量，与成员变量的访问权限无关！</li></ul><p>还有很多其他的功能呢：</p><ul><li>访问 Class 对象对应类上所包含的 Annotation；</li><li>访问 Class 对象对应类包含的内部类（<code>Class&lt;?&gt;[] getDeclaredClasses()</code>）；</li><li>访问 Class 对象对应类的所在的外部类（<code>Class&lt;?&gt; getDeclaringClass()</code>）；</li><li>获取 Class 对象对应类的修饰符、所在包、类名等基本信息</li></ul><p>方法就不一一介绍了，详细可阅读 <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html" target="_blank" rel="noopener">Java Class API</a>。</p><div class="note info no-icon">            <p>观察上面方法的描述，其实大体可以总结出来，带 <code>Declared</code> 字眼的方法呢，返回的内容就不受访问权限的控制！</p>          </div><h4 id="方法理解"><a href="#方法理解" class="headerlink" title="方法理解"></a>方法理解</h4><p>上面介绍了一群方法，怎么调用呢？传参是怎样的呢？看个栗子就明白了！</p><p>假设某个类包含如下三个 <code>info</code> 方法签名：</p><ul><li><code>public void info()</code></li><li><code>public void info(String str)</code></li><li><code>public void info(String str, Integer num)</code></li></ul><p>这三个同名方法属于重载，参数列表不同。假如想要指定第 2 个 <code>info</code> 方法，那么形参列表为 <code>String.class</code>，因此程序中获取该方法应该使用如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// clazz 是 Class 对象，第一个参数是方法名，后面的个数可变的 Class 参数形参类型列表</span></span><br><span class="line">clazz.getMethod(<span class="string">"info"</span>, String.class);</span><br></pre></td></tr></table></figure><p>看了上面的例子，应该可以看懂 <code>Method getMethod(String name, Class&lt;?&gt; ... parameterTypes)</code> 这个方法如何使用了吧。这里仅是概览一下方法，下文会有更详细的示例。</p><h2 id="使用反射生成并操作对象"><a href="#使用反射生成并操作对象" class="headerlink" title="使用反射生成并操作对象"></a>使用反射生成并操作对象</h2><p>Class 对象通过上面介绍的方法，可以获得该类里的方法（由 <code>Method</code> 对象表示）、构造器（由 <code>Constructor</code> 对象表示）、成员变量（由 <code>Field</code> 对象表示），这三个类都位于 <code>java.lang.reflect</code> 包下，并实现了 <code>java.lang.reflect.Member</code> 接口。</p><p>程序可以通过 <code>Method</code> 对象来执行对应的方法，通过 <code>Constructor</code> 对象来调用对应的构造器创建实例，能通过 <code>Field</code> 对象直接访问并修改对象的成员变量值。</p><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>先使用 Class 对象获取指定的 Constructor 对象，再调用 Constructor 对象的 <code>newInstance()</code> 方法来创建该 Class 对象对应类的实例！</p><p>看个栗子：</p><p>Student.java:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"My name is: "</span> + name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"name: "</span> + name + <span class="string">" say :"</span> + content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>CreateObjectTest.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateObjectTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Object <span class="title">createObject</span><span class="params">(String clazzName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 根据全限定的类名获取对应的 Class 对象</span></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(clazzName);</span><br><span class="line">        <span class="comment">// 使用 clazz 对应类的无参构造器创建实例</span></span><br><span class="line">        <span class="keyword">return</span> clazz.getConstructor().newInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object s = createObject(<span class="string">"reflect.Student"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实，如果想调用有参的构造器创建对象，只要用上面介绍过的方法去获取有参的 <code>Contructor</code> 对象即可。然后调用 <code>newInstance</code> 方法时，传入对应的实参就行。</p><blockquote><p>Spring 框架就采用读取配置文件的内容，然后通过反射来创建对象。</p></blockquote><div class="note warning no-icon">            <p>通常没有必要使用反射来创建对象，因为反射创建对象时性能要稍低。实际上，只有当程序需要动态创建某个类的对象时才会考虑使用反射。通常在开发通用性比较广的框架、基础平台时可能会大量使用反射。</p>          </div><h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><p>通过反射调用方法其实和上面的步骤差不多：获得某个类的 Class 对象，通过该对象的 <code>getMethods()</code> 方法或者 <code>getMethod()</code> 方法获取全部方法或指定方法。具体语法在上面介绍过。方法返回值是 <code>Method</code> 数组或者 <code>Method</code> 对象。</p><p>每个 <code>Method</code> 对象对应一个方法，程序通过该 <code>Method</code> 调用它对应的方法。<code>Method</code> 包含一个 <code>invoke()</code> 方法，方法签名如下：</p><ul><li><code>Object invoke(Object obj,Object ... args)</code>：<code>obj</code> 是执行该方法的主调，<code>args</code> 是执行该方法时传入的实参。</li></ul><p>接上面的示例继续完善，CreateObjectTest.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateObjectTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Object <span class="title">createObject</span><span class="params">(String clazzName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(clazzName);</span><br><span class="line">        <span class="keyword">return</span> clazz.getConstructor().newInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodTest</span><span class="params">(Object target)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 通过实例的 `getClass` 方法获取 Class 对象</span></span><br><span class="line">        Class&lt;?&gt; clazz = target.getClass();</span><br><span class="line">        <span class="comment">// 通过 Class 对象获取对应类的 Method 对象</span></span><br><span class="line">        Method mtd = clazz.getMethod(<span class="string">"hello"</span>, String.class);</span><br><span class="line">        <span class="comment">// 调用 Method 对象的 invoke 方法，传入方法实参</span></span><br><span class="line">        mtd.invoke(target, <span class="string">"测试"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object s = createObject(<span class="string">"reflect.Student"</span>);</span><br><span class="line">        methodTest(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name: null say :测试</span><br></pre></td></tr></table></figure></p><p>这里因为调用的是 Student 无参构造器，因此 name 为空。</p><p>Method 的 <code>invoke()</code> 方法来调用对应方法时，Java 会要求程序具有调用该方法的权限。默认情况，<code>private</code> 方法是无权调用的。可以通过先调用 Method 对象的 <code>setAccessible(boolean flag)</code> 方法取消 Java 语言的访问权限检查（设为 <code>false</code> 时，不检查）。</p><blockquote><p>Spring 框架将成员变量的值以及依赖对象等都放在配置文件中，然后采用上面方式进行创建对象、赋值成员变量的。这也是 Spring 框架 IoC 的秘密。</p></blockquote><div class="note info no-icon">            <p>上面这个是《疯狂 Java 讲义》中的提示，从这提示里可以看到，反射的重点意义其实不在于它能够创建对象、赋值变量，因为这通过构造器等也能做，我觉得它存在的主要意义在于能够在<strong>运行时</strong>动态地执行创建对象、赋值变量等操作。</p>          </div><h3 id="访问成员变量值"><a href="#访问成员变量值" class="headerlink" title="访问成员变量值"></a>访问成员变量值</h3><p>通过 Class 对象的 <code>getFields()</code> 或 <code>getField()</code> 方法可以获取该类所包括的全部成员变量或指定成员变量。Field 提供了下面两组方法来读取或设置成员变量值。</p><ul><li><code>getXxx(Object obj)</code> 获取 <code>obj</code> 对象的该成员的变量值。此处 Xxx 对应 8 中基本类型，如果该成员变量类型是引用类型，则取消 get 后面的 Xxx</li><li><code>setXxx(Object obj, Xxx val)</code> 将 <code>obj</code> 对象的该成员变量设置成 val 值。如果该成员变量类型是引用类型，则取消 set 后面的 Xxx</li></ul><p>栗子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FieldTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个 Person 对象</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="comment">// 获取 Class 对象</span></span><br><span class="line">        Class&lt;Person&gt; personClazz = Person.class;</span><br><span class="line">        <span class="comment">// 使用 getDeclaredField() 方法获取 private 类型的成员变量</span></span><br><span class="line">        Field nameFiled = personClazz.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">        <span class="comment">// 能够获取到并不代表能够访问成员变量，需要设置可访问才行，否则会报错：</span></span><br><span class="line">        <span class="comment">// Class reflect.FieldTest can not access a member of class reflect.Person with modifiers "private"</span></span><br><span class="line">        nameFiled.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        nameFiled.set(p, <span class="string">"Michael"</span>);</span><br><span class="line">        Field ageFiled = personClazz.getDeclaredField(<span class="string">"age"</span>);</span><br><span class="line">        ageFiled.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 调用 setInt() 方法为 p 对象的 age 成员变量设置值</span></span><br><span class="line">        <span class="comment">// ageFiled.setInt(p, 30);</span></span><br><span class="line">        ageFiled.set(p, <span class="number">30</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面代码中，如果使用 <code>ageFiled.setInt(p,30)</code> 则会报如下错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread&quot;main&quot;java.lang.IllegalArgumentException:Can not set java.lang.Integer field reflect.Person.age to(int)30</span><br><span class="line">at sun.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:167)</span><br><span class="line">at sun.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:191)</span><br><span class="line">at sun.reflect.UnsafeObjectFieldAccessorImpl.setInt(UnsafeObjectFieldAccessorImpl.java:114)</span><br><span class="line">at java.lang.reflect.Field.setInt(Field.java:949)</span><br><span class="line">at reflect.FieldTest.main(FieldTest.java:50)</span><br></pre></td></tr></table></figure></p><p>因为 <code>age</code> 不是基本类型，要用上面那种写法才会 OK。</p><h3 id="操作数组"><a href="#操作数组" class="headerlink" title="操作数组"></a>操作数组</h3><p>在 <code>java.lang.reflect</code> 包下提供了一个 Array 类，Array 对象可以代表所有的数组。可以通过 Array 动态地创建数组、操作数组元素。</p><ul><li><code>static Object newInstance(Class&lt;?&gt; componentType,int ... length)</code>：创建一个具有指定的元素类型、指定维度的新数组</li><li><code>static xxx getXxx(Object  array, int index)</code>：返回 array 数组中第 index 个元素。其中，xxx 是各种基本数据类型，如果数据元素时引用类型，则方法为 <code>get(Object array, int index)</code></li><li><code>static setXxx(Object array, int index, xxx value)</code>：设置 array 数组中第 index 个元素值为 value。xxx 表示基本类型，如果是引用引用类型，则方法为 <code>set(Object array, int index, Object value)</code>。</li></ul><p>具体的用法，可以阅读 <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html" target="_blank" rel="noopener">java.lang.reflect.Array</a></p><p>栗子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Object arr = Array.newInstance(String.class, <span class="number">10</span>);</span><br><span class="line">            Array.set(arr, <span class="number">5</span>, <span class="string">"反射测试"</span>);</span><br><span class="line">            Array.set(arr, <span class="number">6</span>, <span class="string">"数组学习"</span>);</span><br><span class="line">            Object c1 = Array.get(arr, <span class="number">5</span>);</span><br><span class="line">            Object c2 = Array.get(arr, <span class="number">6</span>);</span><br><span class="line">            System.out.println(c1);</span><br><span class="line">            System.out.println(c2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><code>java.lang.reflect</code> 包下还有 Proxy 类和一个 <code>InvocationHandler</code> 接口，通过他们可以生成 JDK 动态代理或动态代理对象。代理对象具有原本对象的执行方法之外，还增加了可以增加以下额外的行为（AOP 里方法在执行目标前、之后插入一些通用处理的效果）。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://cloud.tencent.com/developer/article/1015078" target="_blank" rel="noopener">腾讯云社区/深入理解 Java 反射：Field （成员变量）</a></li><li>《疯狂 Java 讲义》第四版，18 章</li></ul><hr><blockquote><p>生命不息，折腾不止！关注 「Coder 魔法院」，祝你 Niubilitiy ！🐂🍺</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://gitee.com/michael_xiang/images/raw/master/uPic/looking-glass-918878_640.jpg&quot; alt=&quot;远方&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;通过反射查看类信息&quot;&gt;&lt;a href=&quot;#通过反射查看类信息&quot; class=&quot;headerlink&quot; title=&quot;通过反射查看类信息&quot;&gt;&lt;/a&gt;通过反射查看类信息&lt;/h2&gt;&lt;p&gt;Java 程序中的许多对象在运行时会出现两种类型：编译时类型和运行时类型。例如：&lt;code&gt;Person p = new Student();&lt;/code&gt;，代码会生成一个 p 变量，编译时类型是 Person，运行时类型为 Student。除此之外，有时程序在运行时接收到外部传入的一个编译类型为 Object，但程序又需要调用该对象运行时类型的方法。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://michael728.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://michael728.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
